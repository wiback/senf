// Copyright (C) 2007
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief INetAddressing non-inline template implementation  */

//#include "INetAddressing.ih"

// Custom includes
#include <boost/range.hpp>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class Range>
prefix_ senf::INet6Address::INet6Address(Range const & range)
{
    typename boost::range_const_iterator<Range>::type i ( boost::const_begin(range) );
    typename boost::range_const_iterator<Range>::type const i_end ( boost::const_end(range) );
    unsigned char * p (&addr_.s6_addr[0]);
    unsigned char * p_end (p+sizeof(addr_.s6_addr));
    for (; p!=p_end && i!=i_end; ++p, ++i)
        *p = *i;
    if (p!=p_end || i!=i_end)
        throw InvalidINetAddressException();
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
