// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ssenf::ProtocolServerSocketHandle Boost.Preprocessor external iteration include
 */

#if !BOOST_PP_IS_ITERATING
#ifndef MPP_SENF_Socket_ProtocolServerSocketHandle_

// Custom includes
#include <boost/preprocessor/iteration/iterate.hpp>
#include <boost/preprocessor/enum.hpp>
#include <boost/preprocessor/cat.hpp>

//////////////////////////////mpp_PSSH_.p////////////////////////////////////////
// Local Macros

#define mpp_PSSH_Arg(z,n,data) BOOST_PP_CAT(A,n) const & BOOST_PP_CAT(a,n)

#define mpp_PSSH_TemplateParameters() BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), class A )
#define mpp_PSSH_MethodParameters() BOOST_PP_ENUM(BOOST_PP_ITERATION(), mpp_PSSH_Arg, )
#define mpp_PSSH_CallParameters() BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), a )

//////
#endif
#else
///////////////////////////////////////////////////////////////////////////

//////
#if BOOST_PP_ITERATION_FLAGS()==1
///////////////////////////////////////////////////////////////////////////
// senf::ProtocolServerSocketHandle<SocketProtocol>::
// ProtocolServerSocketHandle (constructor) declaration

template < mpp_PSSH_TemplateParameters() >
explicit ProtocolServerSocketHandle( mpp_PSSH_MethodParameters() );

//////
#elif BOOST_PP_ITERATION_FLAGS()==2
///////////////////////////////////////////////////////////////////////////
// senf::ProtocolServerSocketHandle<SocketProtocol>::
// ProtocolServerSocketHandle (constructor) implementation

template <class SocketProtocol>
template < mpp_PSSH_TemplateParameters() >
prefix_ senf::ProtocolServerSocketHandle<SocketProtocol>::
ProtocolServerSocketHandle( mpp_PSSH_MethodParameters() )
    : ServerSocketHandle<typename SocketProtocol::Policy>(
        std::auto_ptr<senf::SocketBody>(new ProtocolSocketBody<SocketProtocol>(true)))
{
    this->protocol().init_server( mpp_PSSH_CallParameters() );
}

//////
#endif
#endif
#if !BOOST_PP_IS_ITERATING
#ifdef MPP_SENF_Socket_ProtocolServerSocketHandle_
///////////////////////////////////////////////////////////////////////////
// Undefine local Macros

#undef mpp_PSSH_Arg
#undef mpp_PSSH_TemplateParameters
#undef mpp_PSSH_MethodParameters
#undef mpp_PSSH_CallParameters

//////////////////////////////mpp_PSSH_.e////////////////////////////////////////
#else
#define MPP_SENF_Socket_ProtocolServerSocketHandle_ 1
#endif
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// End:
