// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ReadPolicy and WritePolicy inline template implementation
 */

//#include "ReadWritePolicy.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class Policy>
prefix_ unsigned senf::ReadablePolicy::
readfrom(ClientSocketHandle<Policy> handle, char * buffer, unsigned size,
         typename Policy::AddressingPolicy::Address & address,
         typename IfCommunicationPolicyIs<Policy,UnconnectedCommunicationPolicy>::type *)
{
    return do_rcvfrom(handle, buffer, size, address.sockaddr_p(), address.sockaddr_len());
}

template <class Policy>
prefix_ unsigned senf::WriteablePolicy::
write(ClientSocketHandle<Policy> handle, char const * buffer, unsigned size,
      typename IfCommunicationPolicyIs<Policy,ConnectedCommunicationPolicy>::type *)
{
    return do_write(handle,buffer,size);
}

template <class Policy>
prefix_ unsigned senf::WriteablePolicy::
writeto(ClientSocketHandle<Policy> handle,
        typename boost::call_traits<typename Policy::AddressingPolicy::Address>::param_type addr,
        char const * buffer, unsigned size,
        typename IfCommunicationPolicyIs<Policy,UnconnectedCommunicationPolicy>::type *)
{
    return do_writeto(handle, buffer, size, addr.sockaddr_p(), addr.sockaddr_len());
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// End:
