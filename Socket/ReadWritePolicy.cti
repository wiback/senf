// $Id$
//
// Copyright (C) 2006 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// Definition of inline template functions

//#include "ReadWritePolicy.ih"

// Custom includes
#include <unistd.h>
#include <errno.h>

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class Policy>
prefix_ unsigned satcom::lib::ReadablePolicy::
readfrom(ClientSocketHandle<Policy> handle, char * buffer, unsigned size,
         typename Policy::AddressingPolicy::Address & address,
         typename IfCommunicationPolicyIs<Policy,UnconnectedCommunicationPolicy>::type *)
{
    int rv = ::recvfrom(handle.fd(),buffer, size, 0, 
                        address.sockaddr_p(), address.sockaddr_len());
    if (rv < 0)
        throw SystemException(errno);
    return rv;
}

template <class Policy>
prefix_ unsigned satcom::lib::WriteablePolicy::
write(ClientSocketHandle<Policy> handle, char const * buffer, unsigned size,
      typename IfCommunicationPolicyIs<Policy,ConnectedCommunicationPolicy>::type *)
{
    return do_write(handle,buffer,size);
}

template <class Policy>
prefix_ unsigned satcom::lib::WriteablePolicy::
writeto(ClientSocketHandle<Policy> handle,
        typename boost::call_traits<typename Policy::AddressingPolicy::Address>::param_type addr,
        char const * buffer, unsigned size,
        typename IfCommunicationPolicyIs<Policy,UnconnectedCommunicationPolicy>::type *)
{
    int rv = ::sendto(handle.fd(), buffer, size, 0,
                      addr.sockaddr_p(), addr.sockaddr_len());
    if (rv < 0)
        throw SystemException(errno);
    return rv;
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// c-file-style: "satcom"
// End:
