// $Id$
//
// Copyright (C) 2006 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// Definition of inline template functions

#include "SocketHandle.ih"

// Custom includes
#include <typeinfo>

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class SocketPolicy>
template <class OtherPolicy>
prefix_ satcom::lib::SocketHandle<SocketPolicy>::SocketHandle(SocketHandle<OtherPolicy> other,
                                                              typename IsCompatible<OtherPolicy>::type *)
    : FileHandle(other)
{}

template <class SocketPolicy>
template <class OtherPolicy>
prefix_ typename satcom::lib::SocketHandle<SocketPolicy>::template IsCompatible<OtherPolicy>::type const &
satcom::lib::SocketHandle<SocketPolicy>::operator=(SocketHandle<OtherPolicy> other)
{
    assign(other);
    return *this;
}

template <class SocketPolicy>
prefix_ 
satcom::lib::SocketHandle<SocketPolicy>::SocketHandle(std::auto_ptr<SocketProtocol> protocol,
                                                      bool isServer)
    : FileHandle(std::auto_ptr<FileBody>(new SocketBody(protocol,isServer)))
{}

template <class SocketPolicy>
prefix_ satcom::lib::SocketHandle<SocketPolicy>::SocketHandle(FileHandle other, bool isChecked)
    : FileHandle(other)
{
    BOOST_ASSERT( isChecked );
    BOOST_ASSERT( dynamic_cast<SocketBody *>(&FileHandle::body()) );
}

template <class SocketPolicy>
prefix_ satcom::lib::SocketBody & satcom::lib::SocketHandle<SocketPolicy>::body()
{
    BOOST_ASSERT( dynamic_cast<SocketBody *>(&FileHandle::body()) );
    return static_cast<SocketBody &>(FileHandle::body());
}

template <class SocketPolicy>
prefix_ satcom::lib::SocketBody const & satcom::lib::SocketHandle<SocketPolicy>::body()
    const
{
    BOOST_ASSERT( dynamic_cast<SocketBody const *>(&FileHandle::body()) );
    return static_cast<SocketBody const &>(FileHandle::body());
}

template <class SocketPolicy>
prefix_ satcom::lib::SocketProtocol const & satcom::lib::SocketHandle<SocketPolicy>::protocol()
    const
{
    return body().protocol();
}

template <class SocketPolicy>
prefix_ void satcom::lib::SocketHandle<SocketPolicy>::assign(FileHandle other)
{
    FileHandle::operator=(other);
}

template <class SocketPolicy>
prefix_ satcom::lib::SocketHandle<SocketPolicy>
satcom::lib::SocketHandle<SocketPolicy>::cast_static(FileHandle handle)
{
    return SocketHandle(handle,true);
}

template <class SocketPolicy>
prefix_ satcom::lib::SocketHandle<SocketPolicy>
satcom::lib::SocketHandle<SocketPolicy>::cast_dynamic(FileHandle handle)
{
    // throws bad_cast if the body is not a SocketBody
    SocketBody & body (dynamic_cast<SocketBody&>(FileHandle::body(handle)));
    // throws bad_cast if the poplicy is not compatible
    SocketPolicy::checkBaseOf(body.protocol().policy());
    return cast_static(handle);
}

template <class Target, class Source>
prefix_ Target satcom::lib::static_socket_cast(Source handle)
{
    BOOST_STATIC_ASSERT((
        boost::is_convertible<Source*,FileHandle*>::value &&
        boost::is_convertible<Target*,FileHandle*>::value &&
        ( boost::is_convertible<Source,Target>::value ||
          boost::is_convertible<Target,Source>::value ) ));
    BOOST_ASSERT( check_socket_cast<Target>(handle) );
    return Target::cast_static(handle);
}

template <class Target, class Source>
prefix_ Target satcom::lib::dynamic_socket_cast(Source handle)
{
    BOOST_STATIC_ASSERT((
        boost::is_convertible<Source*,FileHandle*>::value &&
        boost::is_convertible<Target*,FileHandle*>::value &&
        ( boost::is_convertible<Source,Target>::value ||
          boost::is_convertible<Target,Source>::value ) ));
    return Target::cast_dynamic(handle);
}

template <class Target, class Source>
prefix_ bool satcom::lib::check_socket_cast(Source handle)
{
    BOOST_STATIC_ASSERT((
        boost::is_convertible<Source*,FileHandle*>::value &&
        boost::is_convertible<Target*,FileHandle*>::value &&
        ( boost::is_convertible<Source,Target>::value ||
          boost::is_convertible<Target,Source>::value ) ));
    // we don't have a non-throwing variant of cast_dynamic
    // for two reasons:
    // a) since the handle is passed back by value, we cannot return
    //    something like a null handle
    // b) it is simpler to implement cast_dynamic throwig bad_cast on
    //    failure than implementing cast_check
    try {
        Target::cast_dynamic(handle);
    }
    catch (std::bad_cast const &) {
        return false;
    }
    return true;
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// c-file-style: "satcom"
// End:
