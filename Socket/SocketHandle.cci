// $Id$
//
// Copyright (C) 2006 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// Definition of inline non-template functions

#include "SocketHandle.ih"

// Custom includes
#include "Utils/Exception.hh"
#include "SocketProtocol.hh"

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ satcom::lib::SocketBody::SocketBody(std::auto_ptr<SocketProtocol> protocol,
                                            bool isServer)
    : protocol_(protocol), isServer_(isServer)
{
    BOOST_ASSERT( ! protocol_->body_ );
    protocol_->body_ = this;
}

prefix_ satcom::lib::SocketBody::SocketBody(std::auto_ptr<SocketProtocol> protocol,
                                            bool isServer, int fd)
    : FileBody(fd), protocol_(protocol), isServer_(isServer)
{
    BOOST_ASSERT( ! protocol_->body_ );
    protocol_->body_ = this;
}

prefix_ satcom::lib::SocketProtocol const & satcom::lib::SocketBody::protocol()
    const
{
    return *protocol_;
}

prefix_ bool satcom::lib::SocketBody::isServer()
{
    return isServer_;
}

///////////////////////////////////////////////////////////////////////////
// satcom::lib::detail::ConvertibleString

prefix_ satcom::lib::detail::ConvertibleString::ConvertibleString()
{}

prefix_ satcom::lib::detail::ConvertibleString::ConvertibleString(bool v)
    : std::string(v ? "true" : "false")
{}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// c-file-style: "satcom"
// End:
