// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ClientSocketHandle internal header */

#ifndef IH_ClientSocketHandle_
#define IH_ClientSocketHandle_ 1

// Custom includes
#include "../Utils/IteratorTraits.hh"

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {

    ///////////////////////////////////////////////////////////////////////
    // senf::detail::ReadRange

    /** \brief Internal: Choose optimal read implementation

        \internal

        If the range iterator is a contiguous_storage_iterator, the data is *directly* read into the
        range, otherwise a temporary storage area is used.
     */
    template <class Handle, class ForwardWritableRange, bool IsContiguous>
    struct ReadRange 
    {
        static typename boost::range_iterator<ForwardWritableRange>::type
        read(Handle & handle, ForwardWritableRange & range);

        static typename boost::range_iterator<ForwardWritableRange>::type
        readfrom(Handle & handle, ForwardWritableRange & range, typename Handle::Address & addr);
    };

#   ifndef DOXYGEN

    template <class Handle, class ForwardWritableRange>
    struct ReadRange<Handle, ForwardWritableRange, true>
    {
        static typename boost::range_iterator<ForwardWritableRange>::type
        read(Handle & handle, ForwardWritableRange & range);

        static typename boost::range_iterator<ForwardWritableRange>::type
        readfrom(Handle & handle, ForwardWritableRange & range, typename Handle::Address & addr);
    };

#   endif

    ///////////////////////////////////////////////////////////////////////
    // senf::detail::WriteRange

    /** \brief Internal: Choose optimal write implementation

        \internal

        If the range iterator is a contiguous_storage_iterator, the data is *directly* written from
        the range, otherwise a temporary storage area is used.
     */
    template <class Handle, class ForwardReadableRange, bool IsContiguous>
    struct WriteRange
    {
        static typename boost::range_iterator<ForwardReadableRange>::type
        write(Handle & handle, ForwardReadableRange & range);
        
        static typename boost::range_iterator<ForwardReadableRange>::type
        writeto(Handle & handle, ForwardReadableRange & range,
                typename Handle::Address const & addr);
    };

#   ifndef DOXYGEN

    template <class Handle, class ForwardReadableRange>
    struct WriteRange<Handle, ForwardReadableRange, true>
    {
        static typename boost::range_const_iterator<ForwardReadableRange>::type
        write(Handle & handle, ForwardReadableRange & range);
        
        static typename boost::range_const_iterator<ForwardReadableRange>::type
        writeto(Handle & handle, ForwardReadableRange & range,
                typename Handle::Address const & addr);
    };

#   endif

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
