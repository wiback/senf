// $Id$
//
// Copyright (C) 2006 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief PacketProtocol and PacketSocketHandle inline template implementation
 */

#include "PacketSocketHandle.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class ForwardRange>
prefix_ void senf::PacketProtocol::mcAdd(std::string interface,
                                                ForwardRange const & address)
    const
{
    do_mc(interface,address,true);
}

template <class ForwardRange>
prefix_ void senf::PacketProtocol::mcDrop(std::string interface,
                                                 ForwardRange const & address)
    const
{
    do_mc(interface,address,false);
}

template <class ForwardRange>
prefix_ senf::detail::Range_LLAddressCopier<ForwardRange>::
Range_LLAddressCopier(ForwardRange const & range)
    : range_ (range) 
{}

template <class ForwardRange>
prefix_ void senf::PacketProtocol::do_mc(std::string interface,
                                                ForwardRange const & address, bool add)
    const
{
    detail::Range_LLAddressCopier<ForwardRange> copier (address);
    do_mc_i(interface, copier, add);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// c-file-style: "senf"
// End:
