// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Executor inline non-template implementation */

//#include "Executor.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::Executor

prefix_ senf::console::Executor::Executor()
    : root_(senf::console::root().thisptr()), cwd_ (), oldCwd_ (),
      autocd_ (false), autocomplete_ (false)
{
    cwd_.push_back(root_);
}

prefix_ void senf::console::Executor::operator()(std::ostream & output,
                                                 ParseCommandInfo const & command)
{
    return execute(output, command);
}

prefix_ bool senf::console::Executor::autocd()
    const
{
    return autocd_;
}

prefix_ senf::console::Executor & senf::console::Executor::autocd(bool v)
{
    autocd_ = v;
    return *this;
}

prefix_ bool senf::console::Executor::autocomplete()
    const
{
    return autocomplete_;
}

prefix_ senf::console::Executor & senf::console::Executor::autocomplete(bool v)
{
    autocomplete_ = true;
    return *this;
}

prefix_ senf::console::DirectoryNode & senf::console::Executor::chroot()
    const
{
    return *root_;
}

prefix_ senf::console::Executor & senf::console::Executor::chroot(DirectoryNode & node)
{
    root_ = node.thisptr();
    cwd_.clear();
    cwd_.push_back(root_);
    oldCwd_ = cwd_;
    return *this;
}

prefix_ senf::console::Executor & senf::console::Executor::policy(SecurityPolicy policy)
{
    policy_ = policy;
    return *this;
}

prefix_ bool senf::console::Executor::skipping()
    const
{
    return cwd_.empty();
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
