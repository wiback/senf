// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ClockService inline non-template implementation */

// Custom includes
#include <boost/date_time/posix_time/posix_time_types.hpp>

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ClockService

prefix_ senf::ClockService::clock_type senf::ClockService::now()
{
    return instance().now_m();
}

prefix_ senf::ClockService::abstime_type senf::ClockService::abstime(clock_type clock)
{
    return instance().abstime_m(clock);
}

prefix_ senf::ClockService::clock_type senf::ClockService::clock(abstime_type time)
{
    return instance().clock_m(time);
}

prefix_ senf::ClockService::clock_type senf::ClockService::nanoseconds(clock_type v)
{
    return v;
}

prefix_ senf::ClockService::clock_type senf::ClockService::microseconds(clock_type v)
{
    return v * nanoseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::milliseconds(clock_type v)
{
    return v * microseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::seconds(clock_type v)
{
    return v * milliseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::minutes(clock_type v)
{
    return v * seconds(60);
}

prefix_ senf::ClockService::clock_type senf::ClockService::hours(clock_type v)
{
    return v * minutes(60);
}

prefix_ senf::ClockService::clock_type senf::ClockService::days(clock_type v)
{
    return v * hours(24);
}

prefix_ void senf::ClockService::restart()
{
    instance().restart_m();
}

////////////////////////////////////////
// private members

prefix_ senf::ClockService::clock_type senf::ClockService::now_m()
{
    // We want to make the normal case (no skew) really fast. This first 'checkSkew' *might*
    // transiently fail if a SIGALRM is delivered in the midst of the test. updateSkew will
    // therefore block signals and do the check again to make sure.
    //
    // The opposite case (the test returns 'false' even though it should return 'true') is so highly
    // improbable that it is treated as academic. (it will be catched by the next SIGALRM)

    boost::posix_time::ptime time (boost::posix_time::microsec_clock::universal_time());
    if (checkSkew(time)) 
        updateSkew(time);
    
    // 'clock' will pick up the corrected base_ value if needed.
    return clock_m(time);
}

prefix_ senf::ClockService::abstime_type senf::ClockService::abstime_m(clock_type clock)
{
#ifdef BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG
    return base_ + boost::posix_time::nanoseconds(clock);
#else
    return base_ + boost::posix_time::microseconds((clock+500)/1000);
#endif
}

prefix_ senf::ClockService::clock_type senf::ClockService::clock_m(abstime_type time)
{
    ///\fixme What happens, if base_ is changed in SIGALRM while reading it here ?

    // Idea: Have *two* base values: one is written by the SIGALRM handler, the other is only
    // Written by synchronous code. If they differ, we block signals, copy over and continue.  If
    // they transiently differ because we are reading the SIGALRM value while it is being changed
    // this does not matter: We will then still copy it over.

    boost::posix_time::time_duration delta (time - base_);
    return clock_type( delta.ticks() )
        * clock_type( 1000000000UL / boost::posix_time::time_duration::ticks_per_second() );
}

prefix_ bool senf::ClockService::checkSkew(boost::posix_time::ptime time)
{
    boost::posix_time::ptime h (heartbeat_); // reduce chance for race condition
    return time < h || (time - h) > boost::posix_time::seconds(2*CheckInterval);
}

prefix_ void senf::ClockService::clockSkew(boost::posix_time::ptime time,
                                           boost::posix_time::ptime expected)
{
    base_ += (time - expected);
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
