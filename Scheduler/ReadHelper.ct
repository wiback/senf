// $Id$
//
// Copyright (C) 2006 

// Definition of non-inline template functions

#include "ReadHelper.ih"

// Custom includes
#include <errno.h>
#include "Utils/membind.hh"
#include "Utils/Exception.hh"
#include "Scheduler.hh"

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class Handle>
prefix_ senf::ReadHelper<Handle>::ReadHelper(Handle handle, std::string::size_type maxSize,
                                                    InternalPredicate * predicate, Callback cb)
    : handle_(handle), maxSize_(maxSize), predicate_(predicate), callback_(cb), 
      errno_(0), complete_(false)
{
    // Here we add a *static* member taking a *smart* pointer as first
    // argumnet instead of a simple bound-member as callback to the
    // scheduler. This ensures, that the refcount is at least 1 as
    // long as the helper is registered with the scheduler.
    senf::Scheduler::instance()
	.add(handle,boost::bind(&ReadHelper::dispatchProcess,ptr(this),_1,_2),
	     senf::Scheduler::EV_READ);
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::revoke()
{
    ptr guard (this); // To ensure, 'this' is deleted only after this method terminates ...
    senf::Scheduler::instance()
	.remove(handle_,senf::Scheduler::EV_READ);
}

template <class Handle>
prefix_ void
senf::ReadHelper<Handle>::dispatchProcess(ptr helper, Handle handle,
                                                 senf::Scheduler::EventId event)
{
    // since we have a 'ptr' argument, the instance cannot be deleted
    // before this method returns
    return helper->process(handle,event);
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::process(Handle handle,
                                                      senf::Scheduler::EventId event)
{
    try {
	if (event != senf::Scheduler::EV_READ)
	    throw SystemException(EPIPE);
	std::string rcv (handle.read(maxSize_ - data_.size()));
	data_.append(rcv);
	std::string::size_type n = predicate_ ? (*predicate_)(data_) : std::string::npos;
	if (n != std::string::npos || data_.size() >= maxSize_ || rcv.size() == 0) {
	    complete_ = true;
	    if (n < data_.size()) {
		tail_.assign(data_,n,std::string::npos);
		data_.erase(n);
	    }
	    done();
	}
    }
    catch (senf::SystemException const & ex) {
	errno_ = ex.err;
	done();
    }
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::done()
{
    revoke();
    callback_(ptr(this));
}

template <class Handle>
template <class Predicate>
prefix_ std::string::size_type
senf::ReadHelper<Handle>::InternalPredicate::Dispatcher<Predicate>::
operator()(std::string const & data)
{
    return predicate(data);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// End:
