// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Scheduler inline non-template implementation
 */

//#include "Scheduler.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::Scheduler::Scheduler & senf::Scheduler::instance()
{
    static Scheduler instance;
    return instance;
}

prefix_ unsigned senf::Scheduler::timeout(ClockService::clock_type timeout,
                                          SimpleCallback const & cb)
{
    ++ timerIdCounter_;
    TimerMap::iterator i (
        timerMap_.insert(std::make_pair(timerIdCounter_, 
                                        TimerSpec(timeout,cb,timerIdCounter_))).first);
    timerQueue_.push(i);
    return timerIdCounter_;
}

prefix_ void senf::Scheduler::cancelTimeout(unsigned id)
{
    TimerMap::iterator i (timerMap_.find(id));
    if (i != timerMap_.end())
        i->second.canceled = true;
}

prefix_ senf::ClockService::clock_type senf::Scheduler::timeoutEarly()
    const
{
    return eventEarly_;
}

prefix_ void senf::Scheduler::timeoutEarly(ClockService::clock_type v)
{
    eventEarly_ = v;
}

prefix_ senf::ClockService::clock_type senf::Scheduler::timeoutAdjust()
    const
{
    return eventAdjust_;
}

prefix_ void senf::Scheduler::timeoutAdjust(ClockService::clock_type v)
{
    eventAdjust_ = v;
}

prefix_ void senf::Scheduler::terminate()
{
    terminate_ = true;
}

prefix_ senf::ClockService::clock_type senf::Scheduler::eventTime()
    const
{
    return eventTime_;
}

prefix_ int senf::retrieve_filehandle(int fd)
{
    return fd;
}

prefix_ senf::Scheduler::TimerSpecCompare::result_type
senf::Scheduler::TimerSpecCompare::operator()(first_argument_type a, second_argument_type b)
{
    return a->second < b->second;
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
