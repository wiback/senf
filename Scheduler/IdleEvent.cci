// $Id$
//
// Copyright (C) 2009 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief IdleEvent inline non-template implementation */

#include "IdleEvent.ih"

// Custom includes
#include "FdEvent.hh"

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::scheduler::IdleEvent

prefix_ senf::scheduler::IdleEvent::IdleEvent(std::string const & name, Callback const & cb,
                                              bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo(name), cb_ (cb)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::IdleEvent::~IdleEvent()
{
    if (detail::IdleEventDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::IdleEvent::disable()
{
    if (enabled())
        detail::IdleEventDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::IdleEvent::enable()
{
    if (! enabled()) {
        detail::IdleEventDispatcher::instance().add(*this);
        setRunnable();
    }
}

prefix_ void senf::scheduler::IdleEvent::action(Callback const & cb)
{
    cb_ = cb;
}

///////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::IdleEventDispatcher

prefix_ void senf::scheduler::detail::IdleEventDispatcher::add(IdleEvent & event)
{
    events_.push_back(event);
    FIFORunner::instance().enqueue(&event);
    detail::FileDispatcher::instance().timeout(0);
}

prefix_ void senf::scheduler::detail::IdleEventDispatcher::timeout(int t)
{
    managerTimeout_ = t;
    if (events_.empty())
        detail::FileDispatcher::instance().timeout(managerTimeout_);
}

prefix_ int senf::scheduler::detail::IdleEventDispatcher::timeout()
    const
{
    return managerTimeout_;
}

prefix_ bool senf::scheduler::detail::IdleEventDispatcher::empty()
    const
{
    return events_.empty();
}

prefix_ senf::scheduler::detail::IdleEventDispatcher::IdleEventDispatcher()
    : managerTimeout_ (scheduler::detail::FileDispatcher::instance().timeout())
{}

/////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
