// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Timer inline non-template implementation */

//#include "Timer.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::SchedulerTimer::SchedulerTimer(ClockService::clock_type timeout,
                                             Scheduler::SimpleCallback const & cb,
                                             bool enabled)
    : timeout_ (timeout), cb_ (cb), 
      id_ (enabled ? Scheduler::instance().timeout(timeout_, cb_) : 0), 
      enabled_ (enabled)
{}

prefix_ void senf::SchedulerTimer::enable()
{
    if (!enabled_) {
        id_ = Scheduler::instance().timeout(timeout_, cb_);
        enabled_ = true;
    }
}

prefix_ void senf::SchedulerTimer::disable()
{
    if (enabled_) {
        Scheduler::instance().cancelTimeout(id_);
        enabled_ = false;
    }
}

prefix_ bool senf::SchedulerTimer::enabled()
{
    return enabled_;
}

prefix_ void senf::SchedulerTimer::update(ClockService::clock_type timeout)
{
    if (enabled_)
        Scheduler::instance().cancelTimeout(id_);
    timeout_ = timeout;
    if (enabled_)
        Scheduler::instance().timeout(timeout_, cb_);
}

prefix_ senf::SchedulerTimer::~SchedulerTimer()
{
    disable();
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
