// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief EventEvent inline non-template implementation */

#include "EventEvent.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::scheduler::EventEvent

prefix_ senf::scheduler::EventEvent::EventEvent(std::string const & name, Callback const & cb,
                                                bool initiallyEnabled,
                                                detail::FIFORunner::TaskInfo::Priority priority)
    : detail::FIFORunner::TaskInfo(name, priority), cb_ (cb)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::EventEvent::~EventEvent()
{
    if (detail::EventEventDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::EventEvent::disable()
{
    if (enabled())
        detail::EventEventDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::EventEvent::enable()
{
    if (! enabled())
        detail::EventEventDispatcher::instance().add(*this);
}

prefix_ void senf::scheduler::EventEvent::action(Callback const & cb)
{
    cb_ = cb;
}

///////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::EventEventDispatcher

prefix_ void senf::scheduler::detail::EventEventDispatcher::add(EventEvent & event)
{
    events_.push_back(event);
    FIFORunner::instance().enqueue(&event);
}

prefix_ bool senf::scheduler::detail::EventEventDispatcher::empty()
    const
{
    return events_.empty();
}

prefix_ senf::scheduler::detail::EventEventDispatcher::EventEventDispatcher()
{}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
