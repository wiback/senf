// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief safe_bool inline template implementation */

//#include "safe_bool.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef SENF_CXX11_ENABLED

template <typename T>
prefix_ senf::comparable_safe_bool<T>::operator bool()
    const
{
    return static_cast<const T*>(this)->boolean_test();
}

#else

template <typename T>
prefix_ senf::comparable_safe_bool<T>::operator bool_type()
    const
{
    return (static_cast<const T*>(this))->boolean_test()
//        ? &safe_bool_base::this_type_does_not_support_comparisons : 0;
        ? &comparable_safe_bool<T>::this_type_does_not_support_comparisons : 0;
}

template <typename T>
prefix_ bool senf::comparable_safe_bool<T>::operator!()
    const
{
    return ! (static_cast<const T*>(this))->boolean_test();
}

template <typename T>
prefix_ senf::comparable_safe_bool<T>::~comparable_safe_bool()
{}

template <typename T, typename U>
prefix_ void senf::operator==(const safe_bool<T>& lhs, const safe_bool<U>& rhs)
{
    lhs.this_type_does_not_support_comparisons();
}

template <typename T, typename U>
prefix_ void senf::operator!=(const safe_bool<T>& lhs, const safe_bool<U>& rhs)
{
    lhs.this_type_does_not_support_comparisons();
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
