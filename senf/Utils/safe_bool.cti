//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief safe_bool inline template implementation */

//#include "safe_bool.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef SENF_CXX11_ENABLED

template <typename T>
prefix_ senf::comparable_safe_bool<T>::operator bool()
    const
{
    return static_cast<const T*>(this)->boolean_test();
}

#else

template <typename T>
prefix_ senf::comparable_safe_bool<T>::operator bool_type()
    const
{
    return (static_cast<const T*>(this))->boolean_test()
//        ? &safe_bool_base::this_type_does_not_support_comparisons : 0;
        ? &comparable_safe_bool<T>::this_type_does_not_support_comparisons : 0;
}

template <typename T>
prefix_ bool senf::comparable_safe_bool<T>::operator!()
    const
{
    return ! (static_cast<const T*>(this))->boolean_test();
}

template <typename T>
prefix_ senf::comparable_safe_bool<T>::~comparable_safe_bool()
{}

template <typename T, typename U>
prefix_ void senf::operator==(const safe_bool<T>& lhs, const safe_bool<U>& rhs)
{
    lhs.this_type_does_not_support_comparisons();
}

template <typename T, typename U>
prefix_ void senf::operator!=(const safe_bool<T>& lhs, const safe_bool<U>& rhs)
{
    lhs.this_type_does_not_support_comparisons();
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
