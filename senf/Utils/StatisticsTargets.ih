// $Id$
//
// Copyright (C) 2009 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief StatisticsTargets internal header */

#ifndef IH_SENF_Utils_StatisticsTargets_
#define IH_SENF_Utils_StatisticsTargets_ 1

// Custom includes
#include <string>
#include <boost/utility.hpp>
#include <senf/Utils/singleton.hh>

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {

    namespace console { class DirectoryNode; }

    class StatisticsBase;

namespace detail {

    class StatisticsLoggerRegistry
        : public senf::singleton<StatisticsLoggerRegistry>
    {
    public:
        typedef void (*AddFn)(senf::StatisticsBase &, unsigned, 
                              senf::console::DirectoryNode &);

        using senf::singleton<StatisticsLoggerRegistry>::instance;
        using senf::singleton<StatisticsLoggerRegistry>::alive;

        void add(AddFn fn);
        void apply(senf::StatisticsBase & stats, unsigned rank,
                   senf::console::DirectoryNode & dir);

    private:
        typedef std::vector<AddFn> Adders;
        Adders adders_;
    };

    template <class Stream=void, class Area=void, class Level=void>
    struct StatisticsLogger
        : boost::noncopyable
    {
        StatisticsLogger(std::string const & label_);
        void operator()(float min, float avg, float max, float dev);
        
        std::string label;
    };

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
