// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief StatisticsTargets internal header */

#ifndef IH_SENF_Utils_StatisticsTargets_
#define IH_SENF_Utils_StatisticsTargets_ 1

// Custom includes
#include <string>
#include <senf/Utils/singleton.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {

    namespace console { class DirectoryNode; }

    class StatisticsBase;

namespace detail {

    class StatisticsLoggerRegistry
        : public senf::singleton<StatisticsLoggerRegistry>
    {
    public:
        typedef void (*AddFn)(senf::StatisticsBase &, unsigned,
                              senf::console::DirectoryNode &);

        using senf::singleton<StatisticsLoggerRegistry>::instance;
        using senf::singleton<StatisticsLoggerRegistry>::alive;

        void add(AddFn fn);
        void apply(senf::StatisticsBase & stats, unsigned rank,
                   senf::console::DirectoryNode & dir);

    private:
        typedef std::vector<AddFn> Adders;
        Adders adders_;
    };

    template <class Stream=void, class Area=void, class Level=void>
    struct StatisticsLogger
        : boost::noncopyable
    {
        StatisticsLogger(std::string const & label_);
        void operator()(unsigned cnt, float min, float avg, float max, float dev);

        std::string label;
    };

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
