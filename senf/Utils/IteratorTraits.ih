//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief IteratorTraits internal header */

#ifndef IH_SENF_Utils_IteratorTraits_
#define IH_SENF_Utils_IteratorTraits_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {

    // It is not very nice that we need to specialize on the exact iterator names.  The preprocessor
    // guard will need to be expanded by also giving the correct version numbers.  The problem is,
    // that typedefs are not expanded when specializing ...

#if defined(__GNUG__)
    template <class T, class Alloc>
    struct contiguous_storage_iterator<
        ::__gnu_cxx::__normal_iterator<T*, std::vector<T,Alloc> > >
        : public boost::true_type
    {};

    template <class CharT, class Traits, class Alloc>
    struct contiguous_storage_iterator<
        ::__gnu_cxx::__normal_iterator<CharT*, std::basic_string<CharT, Traits, Alloc> > >
        : public boost::true_type
    {};
#endif

}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
