//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Format inline template implementation */

#include "Format.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_signed<T> >::type *)
{
   return detail::dumpintSigned(v, std::numeric_limits<T>::digits);
}

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_unsigned<T> >::type *)
{
   return detail::dumpintUnsigned(v, std::numeric_limits<T>::digits);
}

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_signed<typename T::value_type> >::type *)
{
   return detail::dumpintSigned(v.value(), std::numeric_limits<typename T::value_type>::digits);
}

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_unsigned<typename T::value_type> >::type *)
{
   return detail::dumpintUnsigned(v.value(), std::numeric_limits<typename T::value_type>::digits);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
