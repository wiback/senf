// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Format inline template implementation */

#include "Format.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_signed<T> >::type *)
{
   return detail::dumpintSigned(v, std::numeric_limits<T>::digits);
}

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_unsigned<T> >::type *)
{
   return detail::dumpintUnsigned(v, std::numeric_limits<T>::digits);
}

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_signed<typename T::value_type> >::type *)
{
   return detail::dumpintSigned(v.value(), std::numeric_limits<typename T::value_type>::digits);
}

template <class T>
prefix_ std::string
senf::format::dumpint(T const & v, typename boost::enable_if<boost::is_unsigned<typename T::value_type> >::type *)
{
   return detail::dumpintUnsigned(v.value(), std::numeric_limits<typename T::value_type>::digits);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
