//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief singleton inline template implementation */

//#include "singleton.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Self>
prefix_ senf::singleton<Self>::singleton()
{
    alive_ = true;
}

template <class Self>
prefix_ senf::singleton<Self>::~singleton()
{
    alive_ = false;
}

template <class Self>
bool senf::singleton<Self>::alive_ (false);

template <class Self>
prefix_ Self & senf::singleton<Self>::instance()
{
    static Self instance_;
    // Force instantiation of force_creation (at static object creation time)
    creator_.nop();
    return instance_;
}

template <class Self>
prefix_ bool senf::singleton<Self>::alive()
{
    return alive_;
}

template <class Self>
prefix_ senf::singleton<Self>::force_creation::force_creation()
{
    // Force execution of instance() thereby creating instance
    senf::singleton<Self>::instance();
}

template <class Self>
prefix_ void senf::singleton<Self>::force_creation::nop()
    const
{
    // No operation ...
}

template <class Self>
typename senf::singleton<Self>::force_creation senf::singleton<Self>::creator_;

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
