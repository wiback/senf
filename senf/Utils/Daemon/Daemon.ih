//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Daemon internal header */

#ifndef IH_SENF_Utils_Daemon_Daemon_
#define IH_SENF_Utils_Daemon_Daemon_ 1

// Custom includes
#include <deque>
#include <boost/intrusive/list.hpp>
#include <boost/intrusive/list_hook.hpp>
#include <boost/noncopyable.hpp>
#include <boost/function.hpp>
#include <senf/Scheduler/Scheduler.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

    /** \brief Internal: Watch daemon process for successful startup */
    class DaemonWatcher
        : boost::noncopyable
    {
    public:

        DaemonWatcher(int pid, int coutpipe, int cerrpipe, int stdout, int stderr);

        void run();

    private:

        class Forwarder
        {
        public:
            typedef boost::function<void ()> Callback;

            Forwarder(int src, Callback cb);
            ~Forwarder();

            void addTarget(int fd);

        private:

            // This is awkward ... we'll need to erase an element from the target list given
            // only the target object. This is best implement using an intrusive container.
            // However, this makes memory-management explicit and we'll need to be careful.
            typedef std::deque<char> Buffer;
            struct TargetListTag;
            typedef boost::intrusive::list_base_hook< boost::intrusive::tag<TargetListTag> > TargetListBase;

            struct Target : public TargetListBase
            {
                Target(Forwarder & fwd, int fd);

                int fd;
                Buffer::size_type offset;
                scheduler::FdEvent writeevent;
            };

            typedef boost::intrusive::list< Target,
                                            boost::intrusive::constant_time_size<false>,
                                            boost::intrusive::base_hook<TargetListBase> > Targets;

            struct DestroyDelete
            {
                template <class T>
                void operator()(T * t) { delete t; }
            };

            void readData(int event);
            void writeData(int event, Target * target);

            Buffer buffer_;
            int src_;
            Targets targets_;
            Callback cb_;
            scheduler::FdEvent readevent_;
        };

        void pipeClosed(int id);
        void sigChld(siginfo_t const &);
        void childDied();
        void childOk();

        int childPid_;
        int coutpipe_;
        int cerrpipe_;
        int stdout_;
        int stderr_;
        bool sigChld_;

        scheduler::SignalEvent cldSignal_;
        scheduler::TimerEvent timer_;
        Forwarder coutForwarder_;
        Forwarder cerrForwarder_;
    };

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
