// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief StreamRegistry inline non-template implementation */

#include "StreamRegistry.ih"

// Custom includes
#include <senf/Utils/TypeInfo.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::log::StreamRegistry

prefix_ senf::log::StreamRegistry::StreamRegistry()
{}

prefix_ senf::log::StreamRegistry::iterator senf::log::StreamRegistry::begin()
{
    return boost::make_transform_iterator(registry_.begin(),
                                          ::__gnu_cxx::select1st<Registry::value_type>());
}

prefix_ senf::log::StreamRegistry::iterator senf::log::StreamRegistry::end()
{
    return boost::make_transform_iterator(registry_.end(),
                                          ::__gnu_cxx::select1st<Registry::value_type>());
}

prefix_ void senf::log::StreamRegistry::registerStream(detail::StreamBase const & stream)
{
    registry_.insert( std::make_pair(stream.v_name(), &stream) );
}

prefix_ senf::log::detail::StreamBase const *
senf::log::StreamRegistry::lookup(std::string const & name)
{
    Registry::iterator i (registry_.find(name));
    return i == registry_.end() ? 0 : i->second;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::log::detail::StreamBase

prefix_ senf::log::detail::StreamBase::StreamBase()
    : index( nStreams++ )
{}

prefix_ std::string senf::log::detail::StreamBase::fullName()
    const
{
    return prettyName(typeid(*this));
}

prefix_ std::string senf::log::detail::StreamBase::v_name()
    const
{
    return fullName();
}

prefix_ void senf::log::detail::StreamBase::init()
{
    senf::log::StreamRegistry::instance().registerStream(*this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
