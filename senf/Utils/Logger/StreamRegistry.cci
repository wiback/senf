//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief StreamRegistry inline non-template implementation */

#include "StreamRegistry.ih"

// Custom includes
#include <senf/Utils/TypeInfo.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::log::StreamRegistry

prefix_ senf::log::StreamRegistry::StreamRegistry()
{}

prefix_ senf::log::StreamRegistry::iterator senf::log::StreamRegistry::begin()
{
    return boost::make_transform_iterator(registry_.begin(),
                                          ::__gnu_cxx::select1st<Registry::value_type>());
}

prefix_ senf::log::StreamRegistry::iterator senf::log::StreamRegistry::end()
{
    return boost::make_transform_iterator(registry_.end(),
                                          ::__gnu_cxx::select1st<Registry::value_type>());
}

prefix_ void senf::log::StreamRegistry::registerStream(detail::StreamBase const & stream)
{
    registry_.insert( std::make_pair(stream.v_name(), &stream) );
}

prefix_ senf::log::detail::StreamBase const *
senf::log::StreamRegistry::lookup(std::string const & name)
{
    Registry::iterator i (registry_.find(name));
    return i == registry_.end() ? 0 : i->second;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::log::detail::StreamBase

prefix_ senf::log::detail::StreamBase::StreamBase()
    : index( nStreams++ )
{}

prefix_ std::string senf::log::detail::StreamBase::fullName()
    const
{
    return prettyName(typeid(*this));
}

prefix_ std::string senf::log::detail::StreamBase::v_name()
    const
{
    return fullName();
}

prefix_ void senf::log::detail::StreamBase::init()
{
    senf::log::StreamRegistry::instance().registerStream(*this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
