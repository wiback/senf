// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief SyslogUDPTarget inline non-template implementation */

//#include "SyslogUDPTarget.ih"

// Custom includes
#include <senf/Socket/Protocols/INet/ConnectedUDPSocketHandle.hh>
#include <senf/Utils/String.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet4Address const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv4ClientSocketHandle(INet4SocketAddress(target, 514u)) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet4SocketAddress const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv4ClientSocketHandle(target) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet6Address const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv6ClientSocketHandle(INet6SocketAddress(target, 514u)) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet6SocketAddress const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv6ClientSocketHandle(target) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ bool senf::log::SyslogUDPTarget::syslog()
    const
{
    return syslogFormat_;
}

prefix_ void senf::log::SyslogUDPTarget::syslog(bool enabled)
{
    syslogFormat_ = enabled;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
