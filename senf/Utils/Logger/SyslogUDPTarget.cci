// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SyslogUDPTarget inline non-template implementation */

//#include "SyslogUDPTarget.ih"

// Custom includes
#include <senf/Socket/Protocols/INet/ConnectedUDPSocketHandle.hh>
#include <senf/Utils/String.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet4Address const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv4ClientSocketHandle(INet4SocketAddress(target, 514u)) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet4SocketAddress const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv4ClientSocketHandle(target) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet6Address const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv6ClientSocketHandle(INet6SocketAddress(target, 514u)) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ senf::log::SyslogUDPTarget::SyslogUDPTarget(INet6SocketAddress const & target, int facility)
    : Target("udp-" + senf::str(target)), LogFormat(consoleDir()), facility_ (facility),
      handle_ ( ConnectedUDPv6ClientSocketHandle(target) ),
      syslogFormat_ (true)
{
    init();
}

prefix_ bool senf::log::SyslogUDPTarget::syslog()
    const
{
    return syslogFormat_;
}

prefix_ void senf::log::SyslogUDPTarget::syslog(bool enabled)
{
    syslogFormat_ = enabled;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
