// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Target inline template implementation */

#include "Target.ih"

// Custom includes
#include "Levels.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::log::Target

// senf::log::Target::route

#ifndef DOXYGEN

template <class A1>
prefix_ void senf::log::Target::route(action_t action, int index)
{
    route<A1,mpl::nil,mpl::nil>(action, index);
}

template <class A1, class A2>
prefix_ void senf::log::Target::route(action_t action, int index)
{
    route<A1,A2,mpl::nil>(action, index);
}

template <class A1, class A2, class A3>
prefix_ void senf::log::Target::route(action_t action, int index)
{
    typedef detail::RouteParameters<A1,A2,A3> Params;
    route( detail::InstanceP<typename Params::Stream, detail::StreamBase>::value(),
           detail::InstanceP<typename Params::Area, detail::AreaBase>::value(),
           Params::Level::value,
           action, index);
}

template <class A1>
prefix_ void senf::log::Target::unroute(action_t action)
{
    unroute<A1,mpl::nil,mpl::nil>(action);
}

template <class A1, class A2>
prefix_ void senf::log::Target::unroute(action_t action)
{
    unroute<A1,A2,mpl::nil>(action);
}

template <class A1, class A2, class A3>
prefix_ void senf::log::Target::unroute(action_t action)
{
    typedef detail::RouteParameters<A1,A2,A3> Params;
    unroute( detail::InstanceP<typename Params::Stream, detail::StreamBase>::value(),
             detail::InstanceP<typename Params::Area, detail::AreaBase>::value(),
             Params::Level::value,
             action);
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// namespace senf::log::detail members

template <class Stream, class Area, class Level>
prefix_ void senf::log::detail::write(std::string const & msg)
{
    TargetRegistry::instance().write(Stream::instance(), Area::instance(), Level::value, msg);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
