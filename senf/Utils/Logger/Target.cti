//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Target inline template implementation */

#include "Target.ih"

// Custom includes
#include "Levels.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::log::Target

// senf::log::Target::route

#ifndef DOXYGEN

template <class A1>
prefix_ void senf::log::Target::route(action_t action, int index)
{
    route<A1,mpl::nil,mpl::nil>(action, index);
}

template <class A1, class A2>
prefix_ void senf::log::Target::route(action_t action, int index)
{
    route<A1,A2,mpl::nil>(action, index);
}

template <class A1, class A2, class A3>
prefix_ void senf::log::Target::route(action_t action, int index)
{
    typedef detail::RouteParameters<A1,A2,A3> Params;
    route( detail::InstanceP<typename Params::Stream, detail::StreamBase>::value(),
           detail::InstanceP<typename Params::Area, detail::AreaBase>::value(),
           Params::Level::value,
           action, index);
}

template <class A1>
prefix_ void senf::log::Target::unroute(action_t action)
{
    unroute<A1,mpl::nil,mpl::nil>(action);
}

template <class A1, class A2>
prefix_ void senf::log::Target::unroute(action_t action)
{
    unroute<A1,A2,mpl::nil>(action);
}

template <class A1, class A2, class A3>
prefix_ void senf::log::Target::unroute(action_t action)
{
    typedef detail::RouteParameters<A1,A2,A3> Params;
    unroute( detail::InstanceP<typename Params::Stream, detail::StreamBase>::value(),
             detail::InstanceP<typename Params::Area, detail::AreaBase>::value(),
             Params::Level::value,
             action);
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// namespace senf::log::detail members

template <class Stream, class Area, class Level>
prefix_ void senf::log::detail::write(std::string const & msg)
{
    TargetRegistry::instance().write(Stream::instance(), Area::instance(), Level::value, msg);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
