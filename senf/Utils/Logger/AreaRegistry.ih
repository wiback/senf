// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief AreaRegistry internal header */

#ifndef IH_SENF_Utils_Logger_AreaRegistry_
#define IH_SENF_Utils_Logger_AreaRegistry_ 1

// Custom includes
#include <string>
#include <vector>
#include <list>
#include "Levels.hh"
#include "TimeSource.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace log {

    class Target;

namespace detail {

    class StreamBase;

    /** \brief Internal: Area base class */
    struct AreaBase
    {
        AreaBase();
        virtual ~AreaBase();

        std::string fullName() const;
        virtual std::string v_name() const;

        void init();
        bool alive() const;

        unsigned limit(StreamBase const & stream) const;
        void updateRoutingCache(Target & target, StreamBase const & stream, unsigned limit) const;
        void removeRoutingCache(Target & target, StreamBase const & stream) const;
        void write(time_type timestamp, StreamBase const & stream, unsigned level,
                   std::string const & msg) const;

    private:
        struct RouteEntry {
            RouteEntry(unsigned limit_, Target * target_) : limit(limit_), target(target_) {}
            unsigned limit;
            Target * target;
        };
        typedef std::list<RouteEntry> Routes;
        struct CacheEntry {
            CacheEntry() : limit (DISABLED::value), routes() {}
            unsigned limit;
            Routes routes;
        };
        typedef std::vector<CacheEntry> RoutingCache;
        mutable RoutingCache routingCache_;
        bool alive_;
    };

}}}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
