//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief AreaRegistry internal header */

#ifndef IH_SENF_Utils_Logger_AreaRegistry_
#define IH_SENF_Utils_Logger_AreaRegistry_ 1

// Custom includes
#include <string>
#include <vector>
#include <list>
#include "Levels.hh"
#include "TimeSource.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace log {

    class Target;

namespace detail {

    struct StreamBase;

    /** \brief Internal: Area base class */
    struct AreaBase
    {
        AreaBase();
        virtual ~AreaBase();

        std::string fullName() const;
        virtual std::string v_name() const;

        void init();
        bool alive() const;

        unsigned limit(StreamBase const & stream) const;
        void updateRoutingCache(Target & target, StreamBase const & stream, unsigned limit) const;
        void removeRoutingCache(Target & target, StreamBase const & stream) const;
        void write(time_type timestamp, StreamBase const & stream, unsigned level,
                   std::string const & msg) const;

    private:
        struct RouteEntry {
            RouteEntry(unsigned limit_, Target * target_) : limit(limit_), target(target_) {}
            unsigned limit;
            Target * target;
        };
        typedef std::list<RouteEntry> Routes;
        struct CacheEntry {
            CacheEntry() : limit (DISABLED::value), routes() {}
            unsigned limit;
            Routes routes;
        };
        typedef std::vector<CacheEntry> RoutingCache;
        mutable RoutingCache routingCache_;
        bool alive_;
    };

}}}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
