// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief auto_unit_test internal header */

#ifndef IH_SENF_senf_Utils_auto_unit_test_
#define IH_SENF_senf_Utils_auto_unit_test_ 1

// Custom includes
#include <iterator>
#include <boost/iterator/iterator_adaptor.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace test {
namespace detail {

    template <class Type, class Iterator>
    struct ConvertingIterator
        : public boost::iterator_adaptor<
            ConvertingIterator<Type, Iterator>, Iterator, Type, boost::use_default, Type>
    {
        typedef boost::iterator_adaptor<
            ConvertingIterator<Type, Iterator>, Iterator, Type, boost::use_default, Type> Base;
        ConvertingIterator(Iterator i) : Base (i) {}
    };

    template <class Iterator, class vt = typename std::iterator_traits<Iterator>::value_type>
    struct NoCharIterator
    { typedef Iterator type; };

    template <class Iterator>
    struct NoCharIterator<Iterator, char>
    { typedef ConvertingIterator<int,Iterator> type; };

    template <class Iterator>
    struct NoCharIterator<Iterator, signed char>
    { typedef ConvertingIterator<int,Iterator> type; };

    template <class Iterator>
    struct NoCharIterator<Iterator, unsigned char>
    { typedef ConvertingIterator<unsigned,Iterator> type; };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
