//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Algorithm inline template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class InputIterator, class ValueType>
prefix_ bool senf::contains(InputIterator first, InputIterator last, ValueType const & value)
{
    return std::find(first, last, value) != last;
}

template <class Container, class ValueType>
prefix_ bool senf::contains(Container const & container, ValueType const & value)
{
    return senf::contains( boost::begin(container), boost::end(container), value);
}

template <class ValueType>
prefix_ bool senf::contains(std::set<ValueType> const & container, ValueType const & value)
{
    return container.find(value) != container.end();
}

template <typename KeyType, typename ValueType>
prefix_ bool senf::contains(std::map<KeyType, ValueType> const & container, KeyType const & key)
{
    return container.find(key) != container.end();
}

template <typename KeyType, typename ValueType>
prefix_ bool senf::contains(boost::ptr_map<KeyType, ValueType> const & container, KeyType const & key)
{
    return container.find(key) != container.end();
}

template <typename KeyType, typename ValueType>
prefix_ bool senf::contains(boost::ptr_unordered_map<KeyType, ValueType> const & container, KeyType const & key)
{
    return container.find(key) != container.end();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
