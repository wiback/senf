//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief intrusive_refcount inline non-template implementation */

//#include "intrusive_refcount.ih"

// Custom includes
#include "senfassert.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::intrusive_refcount_base::~intrusive_refcount_base()
{}

prefix_ senf::intrusive_refcount_base::refcount_t senf::intrusive_refcount_base::refcount()
    const
{
    return refcount_;
}

prefix_ bool senf::intrusive_refcount_base::is_shared()
    const
{
    return refcount()>1;
}

prefix_ senf::intrusive_refcount_base::intrusive_refcount_base()
    : refcount_(0)
{}

prefix_ void senf::intrusive_refcount_base::add_ref()
{
    ++refcount_;
}

prefix_ bool senf::intrusive_refcount_base::release()
{
    SENF_ASSERT(refcount_>0,
                "senf::intrusive_refcount_base: Internal inconsistency: "
                "Calling release on dead object.");
    return --refcount_ == 0;
}

prefix_ senf::intrusive_refcount::intrusive_refcount()
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
