//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief pimpl_ptr inline template implementation */

//#include "pimpl_ptr.ih"

// Custom includes
#include "IgnoreValue.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::pimpl_ptr<T,CloneAllocator>

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator>::pimpl_ptr(T* pointee)
    : p (pointee)
{
    // Is it fair to assume pointer assignment to be atomic on multi-threaded platforms ?
    doCopy_ = &myCopyFn;
    doDelete_ = &myDeleteFn;
}

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator>::pimpl_ptr(const pimpl_ptr & rhs)
    : p (doCopy_(rhs.p))
{}

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator>::~pimpl_ptr()
    throw()
{
    doDelete_(p);
}

template <typename T, class CloneAllocator>
prefix_ const T* senf::pimpl_ptr<T,CloneAllocator>::get()
    const throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ T* senf::pimpl_ptr<T,CloneAllocator>::get()
    throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ const T* senf::pimpl_ptr<T,CloneAllocator>::operator->()
    const throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ T* senf::pimpl_ptr<T,CloneAllocator>::operator->()
    throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ const T& senf::pimpl_ptr<T,CloneAllocator>::operator*()
    const throw()
{
    return *p;
}

template <typename T, class CloneAllocator>
prefix_ T& senf::pimpl_ptr<T,CloneAllocator>::operator*()
    throw()
{
    return *p;
}

template <typename T, class CloneAllocator>
prefix_ void senf::pimpl_ptr<T,CloneAllocator>::swap(pimpl_ptr & with)
    throw()
{
    std::swap(p, with.p);
}

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator> &
senf::pimpl_ptr<T,CloneAllocator>::operator=(const pimpl_ptr & rhs)
{
    T* pp = doCopy_(rhs.p);
    doDelete_(p);
    p = pp;
    return *this;
}

template <typename T, class CloneAllocator>
prefix_ void senf::pimpl_ptr<T,CloneAllocator>::myDeleteFn(T* p)
{
    return CloneAllocator::deallocate_clone(p);
}

template <typename T, class CloneAllocator>
prefix_ T* senf::pimpl_ptr<T,CloneAllocator>::myCopyFn(const T* p)
{
    return CloneAllocator::allocate_clone(*p);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class T, class CloneAllocator>
prefix_ void std::swap(senf::pimpl_ptr<T,CloneAllocator> & lhs,
                       senf::pimpl_ptr<T,CloneAllocator> & rhs)
    throw()
{
    lhs.swap(rhs);
}

template <class T, class CloneAllocator>
typename senf::pimpl_ptr<T,CloneAllocator>::Copier
    senf::pimpl_ptr<T,CloneAllocator>::doCopy_ (0);

template <class T, class CloneAllocator>
typename senf::pimpl_ptr<T,CloneAllocator>::Deleter
    senf::pimpl_ptr<T,CloneAllocator>::doDelete_ (0);

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
