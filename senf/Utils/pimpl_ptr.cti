// $Id$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief pimpl_ptr inline template implementation */

//#include "pimpl_ptr.ih"

// Custom includes
#include "IgnoreValue.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::pimpl_ptr<T,CloneAllocator>

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator>::pimpl_ptr(T* pointee)
    : p (pointee)
{
    // Is it fair to assume pointer assignment to be atomic on multi-threaded platforms ?
    doCopy_ = &myCopyFn;
    doDelete_ = &myDeleteFn;
}

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator>::pimpl_ptr(const pimpl_ptr & rhs)
    : p (doCopy_(rhs.p))
{}

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator>::~pimpl_ptr()
    throw()
{
    doDelete_(p);
}

template <typename T, class CloneAllocator>
prefix_ const T* senf::pimpl_ptr<T,CloneAllocator>::get()
    const throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ T* senf::pimpl_ptr<T,CloneAllocator>::get()
    throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ const T* senf::pimpl_ptr<T,CloneAllocator>::operator->()
    const throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ T* senf::pimpl_ptr<T,CloneAllocator>::operator->()
    throw()
{
    return p;
}

template <typename T, class CloneAllocator>
prefix_ const T& senf::pimpl_ptr<T,CloneAllocator>::operator*()
    const throw()
{
    return *p;
}

template <typename T, class CloneAllocator>
prefix_ T& senf::pimpl_ptr<T,CloneAllocator>::operator*()
    throw()
{
    return *p;
}

template <typename T, class CloneAllocator>
prefix_ void senf::pimpl_ptr<T,CloneAllocator>::swap(pimpl_ptr & with)
    throw()
{
    std::swap(p, with.p);
}

template <typename T, class CloneAllocator>
prefix_ senf::pimpl_ptr<T,CloneAllocator> &
senf::pimpl_ptr<T,CloneAllocator>::operator=(const pimpl_ptr & rhs)
{
    T* pp = doCopy_(rhs.p);
    doDelete_(p);
    p = pp;
    return *this;
}

template <typename T, class CloneAllocator>
prefix_ void senf::pimpl_ptr<T,CloneAllocator>::myDeleteFn(T* p)
{
    return CloneAllocator::deallocate_clone(p);
}

template <typename T, class CloneAllocator>
prefix_ T* senf::pimpl_ptr<T,CloneAllocator>::myCopyFn(const T* p)
{
    return CloneAllocator::allocate_clone(*p);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class T, class CloneAllocator>
prefix_ void std::swap(senf::pimpl_ptr<T,CloneAllocator> & lhs,
                       senf::pimpl_ptr<T,CloneAllocator> & rhs)
    throw()
{
    lhs.swap(rhs);
}

template <class T, class CloneAllocator>
typename senf::pimpl_ptr<T,CloneAllocator>::Copier
    senf::pimpl_ptr<T,CloneAllocator>::doCopy_ (0);

template <class T, class CloneAllocator>
typename senf::pimpl_ptr<T,CloneAllocator>::Deleter
    senf::pimpl_ptr<T,CloneAllocator>::doDelete_ (0);

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
