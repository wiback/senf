//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Telnet inline non-template implementation */

//#include "Telnet.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::term::BaseTelnetProtocol::OptInfo

prefix_ senf::term::BaseTelnetProtocol::OptInfo::OptInfo()
    : local (false), option (0u), wantState (DISABLED), optionState (NONE), enabled (false)
{}

prefix_ senf::term::BaseTelnetProtocol::OptInfo::OptInfo(bool l, option_type o)
    : local (l), option (o), wantState (DISABLED), optionState (NONE), enabled (false)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::term::BaseTelnetProtocol::TelnetHandler

prefix_ senf::term::BaseTelnetProtocol::TelnetHandler::~TelnetHandler()
{}

prefix_ std::string const & senf::term::telnethandler::TerminalType::terminalType()
    const
{
    return type_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::term::telnethandler::NAWS

prefix_ unsigned senf::term::telnethandler::NAWS::width()
    const
{
    return width_;
}

prefix_ unsigned senf::term::telnethandler::NAWS::height()
    const
{
    return height_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::term::BaseTelnetProtocol

prefix_ senf::term::BaseTelnetProtocol::~BaseTelnetProtocol()
{}

prefix_ senf::term::BaseTelnetProtocol::Handle senf::term::BaseTelnetProtocol::handle()
{
    return handle_;
}

prefix_ bool senf::term::BaseTelnetProtocol::requestsPending()
{
    return pendingRequests_ > 0u;
}

prefix_ void senf::term::BaseTelnetProtocol::sendNOP()
{
    transmit(CMD_IAC);
    transmit(CMD_NOP);
}

prefix_ void senf::term::BaseTelnetProtocol::sendBRK()
{
    transmit(CMD_IAC);
    transmit(CMD_BRK);
}

prefix_ void senf::term::BaseTelnetProtocol::sendIP()
{
    transmit(CMD_IAC);
    transmit(CMD_IP);
}

prefix_ void senf::term::BaseTelnetProtocol::sendAO()
{
    transmit(CMD_IAC);
    transmit(CMD_AO);
}

prefix_ void senf::term::BaseTelnetProtocol::sendAYT()
{
    transmit(CMD_IAC);
    transmit(CMD_AYT);
}

prefix_ void senf::term::BaseTelnetProtocol::sendEC()
{
    transmit(CMD_IAC);
    transmit(CMD_EC);
}

prefix_ void senf::term::BaseTelnetProtocol::sendEL()
{
    transmit(CMD_IAC);
    transmit(CMD_EL);
}

prefix_ void senf::term::BaseTelnetProtocol::sendGA()
{
    transmit(CMD_IAC);
    transmit(CMD_GA);
}

prefix_ void senf::term::BaseTelnetProtocol::requestLocalOption(option_type option,
                                                                           bool enabled)
{
    request(getOption(true, option), enabled);
}

prefix_ void senf::term::BaseTelnetProtocol::acceptLocalOption(option_type option,
                                                                          bool enabled)
{
    getOption(true, option).wantState = OptInfo::ACCEPTED;
}

prefix_ void senf::term::BaseTelnetProtocol::requestPeerOption(option_type option,
                                                                          bool enabled)
{
    request(getOption(false, option), enabled);
}

prefix_ void senf::term::BaseTelnetProtocol::acceptPeerOption(option_type option,
                                                                         bool enabled)
{
    getOption(false, option).wantState = OptInfo::ACCEPTED;
}

prefix_ bool senf::term::BaseTelnetProtocol::localOption(option_type option)
{
    return getOption(true, option).enabled;
}

prefix_ bool senf::term::BaseTelnetProtocol::peerOption(option_type option)
{
    return getOption(false, option).enabled;
}

prefix_ void senf::term::BaseTelnetProtocol::emit(char c)
{
    v_charReceived(c);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
