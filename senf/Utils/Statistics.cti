//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Statistics inline template implementation */

//#include "Statistics.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::StatisticsBase::OutputProxy

template <class Owner>
prefix_ senf::StatisticsBase::OutputProxy<Owner>::OutputProxy(Owner * owner, OutputEntry * entry)
    : owner_ (owner), entry_ (entry)
{}

template <class Owner>
template <class OtherOwner>
prefix_ senf::StatisticsBase::OutputProxy<Owner>::
OutputProxy(Owner * owner, OutputProxy<OtherOwner> const & other)
    : owner_ (owner), entry_ (other.entry_)
{}

template <class Owner>
template <class Target>
prefix_ Owner & senf::StatisticsBase::OutputProxy<Owner>::connect(Target & target, std::string label)
    const
{
    if (label.empty())
        label = prettyName(typeid(Target));
    entry_->signal.connect(boost::ref(target));
    entry_->targets_.push_back(new OutputEntry::Target<Target>(label));
    return * owner_;
}

template <class Owner>
template <class PTarget>
prefix_ Owner &
senf::StatisticsBase::OutputProxy<Owner>::connect(std::unique_ptr<PTarget> target, std::string label)
    const
{
    if (label.empty())
        label = prettyName(typeid(PTarget));
    PTarget * targetp (target.get());
    entry_->targets_.push_back(new OutputEntry::Target<PTarget>(std::move(target),label));
    entry_->signal.connect(boost::ref(*targetp));
    return * owner_;
}

template <class Owner>
prefix_ Owner & senf::StatisticsBase::OutputProxy<Owner>::noconnect()
    const
{
    return * owner_;
}

template <class Owner>
prefix_ senf::console::ScopedDirectory<> & senf::StatisticsBase::OutputProxy<Owner>::dir()
    const
{
    return entry_->dir;
}

///////////////////////////////////////////////////////////////////////////
// senf::Statistics

template <class Value>
prefix_ void senf::Statistics::operator()(unsigned n, StatisticAccumulator<Value> & sa)
{
    enter(n, sa.count(), float(sa.min()), sa.avg(), float(sa.max()), sa.stddev());
    sa.clear();
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
