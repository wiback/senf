// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Statistics inline template implementation */

//#include "Statistics.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::StatisticsBase::OutputProxy

template <class Owner>
prefix_ senf::StatisticsBase::OutputProxy<Owner>::OutputProxy(Owner * owner, OutputEntry * entry)
    : owner_ (owner), entry_ (entry)
{}

template <class Owner>
template <class OtherOwner>
prefix_ senf::StatisticsBase::OutputProxy<Owner>::
OutputProxy(Owner * owner, OutputProxy<OtherOwner> const & other)
    : owner_ (owner), entry_ (other.entry_)
{}

template <class Owner>
template <class Target>
prefix_ Owner & senf::StatisticsBase::OutputProxy<Owner>::connect(Target & target, std::string label)
    const
{
    if (label.empty())
        label = prettyName(typeid(Target));
    entry_->signal.connect(boost::ref(target));
    entry_->targets_.push_back(new OutputEntry::Target<Target>(label));
    return * owner_;
}

template <class Owner>
template <class PTarget>
prefix_ Owner &
senf::StatisticsBase::OutputProxy<Owner>::connect(SENF_SMART_PTR<PTarget> target, std::string label)
    const
{
    if (label.empty())
        label = prettyName(typeid(PTarget));
    PTarget * targetp (target.get());
    entry_->targets_.push_back(new OutputEntry::Target<PTarget>(SENF_MOVE(target),label));
    entry_->signal.connect(boost::ref(*targetp));
    return * owner_;
}

template <class Owner>
prefix_ Owner & senf::StatisticsBase::OutputProxy<Owner>::noconnect()
    const
{
    return * owner_;
}

template <class Owner>
prefix_ senf::console::ScopedDirectory<> & senf::StatisticsBase::OutputProxy<Owner>::dir()
    const
{
    return entry_->dir;
}

///////////////////////////////////////////////////////////////////////////
// senf::Statistics

template <class Value>
prefix_ void senf::Statistics::operator()(unsigned n, StatisticAccumulator<Value> & sa)
{
    enter(n, sa.count(), float(sa.min()), sa.avg(), float(sa.max()), sa.stddev());
    sa.clear();
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
