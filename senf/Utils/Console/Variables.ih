// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Variables internal header */

#ifndef IH_SENF_Scheduler_Console_Variables_
#define IH_SENF_Scheduler_Console_Variables_ 1

// Custom includes
#include <boost/function.hpp>
#include <boost/type_traits/is_const.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace console {

    template <class Variable> class ConstVariableAttributor;
    template <class Variable> class VariableAttributor;

namespace detail {

#ifndef DOXYGEN

    template <class Variable>
    struct QueryVariable
    {
        typedef Variable const & Signature ();
        typedef boost::function<Signature> Function;
        typedef detail::ParsedCommandTraits<Signature> Traits;
        typedef detail::CreateParsedCommandOverload<Traits> CreateOverload;
        typedef Variable const & result_type;

        QueryVariable(Variable const & var);

        static typename Traits::Overload::ptr create(Variable const & var);

        Variable const & operator()()  const;

        Variable const & var_;
    };

    template <class Variable>
    struct SetVariable
    {
        typedef void Signature (Variable &);
        typedef boost::function<Signature> Function;
        typedef detail::ParsedCommandTraits<Signature> Traits;
        typedef detail::CreateParsedCommandOverload<Traits> CreateOverload;
        typedef boost::function<void (Variable const &)> OnChangeHandler;
        typedef void result_type;

        SetVariable(Variable & var, OnChangeHandler handler = OnChangeHandler());

        static typename Traits::Overload::ptr create(Variable & var);

        void operator()(Variable const & value) const;

        Variable & var_;
        OnChangeHandler handler_;
    };

#endif

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
