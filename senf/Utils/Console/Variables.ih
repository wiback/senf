//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Variables internal header */

#ifndef IH_SENF_Scheduler_Console_Variables_
#define IH_SENF_Scheduler_Console_Variables_ 1

// Custom includes
#include <boost/function.hpp>
#include <boost/type_traits/is_const.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace console {

    template <class Variable> class ConstVariableAttributor;
    template <class Variable> class VariableAttributor;

namespace detail {

#ifndef DOXYGEN

    template <class Variable>
    struct QueryVariable
    {
        typedef Variable const & Signature ();
        typedef boost::function<Signature> Function;
        typedef detail::ParsedCommandTraits<Signature> Traits;
        typedef detail::CreateParsedCommandOverload<Traits> CreateOverload;
        typedef Variable const & result_type;

        QueryVariable(Variable const & var);

        static typename Traits::Overload::ptr create(Variable const & var);

        Variable const & operator()()  const;

        Variable const & var_;
    };

    template <class Variable>
    struct SetVariable
    {
        typedef void Signature (Variable &);
        typedef boost::function<Signature> Function;
        typedef detail::ParsedCommandTraits<Signature> Traits;
        typedef detail::CreateParsedCommandOverload<Traits> CreateOverload;
        typedef boost::function<void (Variable const &)> OnChangeHandler;
        typedef void result_type;

        SetVariable(Variable & var, OnChangeHandler handler = OnChangeHandler());

        static typename Traits::Overload::ptr create(Variable & var);

        void operator()(Variable const & value) const;

        Variable & var_;
        OnChangeHandler handler_;
    };

#endif

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
