// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Traits internal header */

#ifndef IH_SENF_Scheduler_Console_Traits_
#define IH_SENF_Scheduler_Console_Traits_ 1

// Custom includes
#include <string>
#include <limits>
#include <boost/preprocessor/seq/for_each.hpp>
#include <boost/preprocessor/stringize.hpp>
#include <boost/preprocessor/facilities/empty.hpp>
#include <boost/bimap.hpp>
#include <boost/assign/list_inserter.hpp>
#include <boost/algorithm/string/case_conv.hpp>
#include <boost/mpl/if.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace console {

    template <class _> struct ArgumentTraits;
    template <class _> struct ReturnValueTraits;

namespace detail {

    template <class CharT>
    struct MatchingShortType
        : public boost::mpl::if_c<std::numeric_limits<CharT>::is_signed,short,unsigned short>
    {};

    template <class CharT>
    struct CharArgumentTraits
        : public ArgumentTraits<typename MatchingShortType<CharT>::type>
    {
        typedef ArgumentTraits<typename MatchingShortType<CharT>::type> base;
        typedef CharT type;
        static void parse(ParseCommandInfo::TokensRange const & tokens, CharT & out);
        static std::string description();
    };

    template <class CharT>
    struct CharReturnValueTraits
        : public ReturnValueTraits<typename MatchingShortType<CharT>::type>
    {
        typedef CharT type;
    };

    template <typename T>
    struct EnumFormatter
    {
        T value;
        EnumFormatter(T v) : value(v) {}
    };
    template <typename T>
    inline std::ostream & operator<<(std::ostream & os, EnumFormatter<T> const & enumFormatter)
    {
        senf_console_format_value(enumFormatter.value, os);
        return os;
    }

#ifndef DOXYGEN
    struct StringILess
    {
        bool operator()(std::string const & left, std::string const & right) const
            { return boost::algorithm::to_lower_copy(left)
                  < boost::algorithm::to_lower_copy(right); }
    };

    typedef boost::bimap<boost::bimaps::set_of<std::string, StringILess>, long> EnumTable;

    long parseEnum(EnumTable const & table, ParseCommandInfo::TokensRange const & tokens);
    std::string formatEnum(EnumTable const & table, long value);

#   define SENF_CONSOLE_REGISTER_ENUM_ELT(r,d,e)                                                  \
        BOOST_PP_IF( SENF_CONSOLE_REGISTER_ENUM_HASKEY(e),                                        \
                     SENF_CONSOLE_REGISTER_ENUM_WITHKEY,                                          \
                     SENF_CONSOLE_REGISTER_ENUM_NOKEY )(d, e)

#   define SENF_CONSOLE_REGISTER_ENUM_GOBBLE__key(k,e)
#   define SENF_CONSOLE_REGISTER_ENUM_GET_KEY__key(k,e) k
#   define SENF_CONSOLE_REGISTER_ENUM_GET_ENUM__key(k,e) e
#   define SENF_CONSOLE_REGISTER_ENUM_HASKEY(e)                                                   \
        BOOST_PP_IS_EMPTY( SENF_CAT_RECURS1(SENF_CONSOLE_REGISTER_ENUM_GOBBLE__, e) )

#   define SENF_CONSOLE_REGISTER_ENUM_KEY_GETENUM(e)                                              \
        SENF_CAT_RECURS2(SENF_CONSOLE_REGISTER_ENUM_GET_ENUM__, e)
#   define SENF_CONSOLE_REGISTER_ENUM_KEY_GETKEY(e)                                               \
        SENF_CAT_RECURS3(SENF_CONSOLE_REGISTER_ENUM_GET_KEY__, e)

#   define SENF_CONSOLE_REGISTER_ENUM_NOKEY(prefix, e)                                            \
        ( BOOST_PP_STRINGIZE(e), static_cast<long>(prefix e) )

#   define SENF_CONSOLE_REGISTER_ENUM_WITHKEY(prefix, e)                                          \
        ( SENF_CONSOLE_REGISTER_ENUM_KEY_GETKEY(e),                                               \
          static_cast<long>(prefix SENF_CONSOLE_REGISTER_ENUM_KEY_GETENUM(e)) )


#   define SENF_CONSOLE_REGISTER_ENUM_(Prefix, Scope, Type, Values)                               \
        inline senf::console::detail::EnumTable & senf_console_enum_table(Prefix Type)            \
        {                                                                                         \
            static senf::console::detail::EnumTable table;                                        \
            if (table.empty())                                                                    \
                boost::assign::insert(table)                                                      \
                    BOOST_PP_SEQ_FOR_EACH(                                                        \
                        SENF_CONSOLE_REGISTER_ENUM_ELT, Prefix Scope, Values );                   \
            return table;                                                                         \
        }                                                                                         \
        inline void senf_console_parse_argument(                                                  \
            senf::console::ParseCommandInfo::TokensRange const & tokens, Prefix Type & out)       \
        {                                                                                         \
            out = static_cast<Prefix Type>(                                                       \
                senf::console::detail::parseEnum(                                                 \
                    senf_console_enum_table( Prefix Type() ), tokens) );                          \
        }                                                                                         \
        inline void senf_console_format_value(Prefix Type value, std::ostream & os)               \
        {                                                                                         \
            os << senf::console::detail::formatEnum(                                              \
                senf_console_enum_table( Prefix Type() ), static_cast<long>(value) );             \
        }                                                                                         \
        inline senf::console::detail::EnumFormatter<Prefix Type>                                  \
        senf_console_format_enum(Prefix Type value)                                               \
        {                                                                                         \
            return senf::console::detail::EnumFormatter<Prefix Type>(value);                      \
        }

#endif

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
