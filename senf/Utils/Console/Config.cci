// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Config inline non-template implementation */

#include "Config.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::RestrictedExecutor

prefix_ bool senf::console::detail::RestrictedExecutor::complete()
    const
{
    return parsedNodes_.size() == 1
        && ! parsedNodes_[0].expired()
        && *parsedNodes_[0].lock() == executor_.chroot();
}

prefix_ void senf::console::detail::RestrictedExecutor::reset()
{
    parsedNodes_.clear();
}

prefix_ senf::console::DirectoryNode & senf::console::detail::RestrictedExecutor::root()
    const
{
    return executor_.chroot();
}

prefix_ void senf::console::detail::RestrictedExecutor::chroot(DirectoryNode & node)
{
    executor_.chroot(node);
}

prefix_ std::ostream & senf::console::detail::RestrictedExecutor::stream()
{
    return stream_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ConfigBundle

prefix_ senf::console::ConfigBundle::ConfigBundle()
{}

prefix_ senf::console::ConfigBundle::ConfigBundle(DirectoryNode & root)
    : executor_ (root)
{}

prefix_ bool senf::console::ConfigBundle::complete()
    const
{
    return executor_.complete();
}

prefix_ bool senf::console::ConfigBundle::parsed(GenericNode & node)
    const
{
    return executor_.parsed(node);
}

prefix_ void senf::console::ConfigBundle::reset()
{
    executor_.reset();
}

prefix_ senf::console::DirectoryNode & senf::console::ConfigBundle::root()
    const
{
    return executor_.root();
}

prefix_ void senf::console::ConfigBundle::chroot(DirectoryNode & node)
{
    executor_.chroot(node);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ConfigSource

prefix_ void senf::console::detail::ConfigSource::parse(RestrictedExecutor & executor)
{
    v_parse(executor);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::BundleMixin

prefix_ senf::console::detail::BundleMixin::BundleMixin()
{}

prefix_ senf::console::detail::BundleMixin::BundleMixin(DirectoryNode & root)
    : bundle_ (root)
{}

prefix_ void senf::console::detail::BundleMixin::parse()
{
    bundle_.parse();
}

prefix_ void senf::console::detail::BundleMixin::parse(DirectoryNode & restrict)
{
    bundle_.parse(restrict);
}

prefix_ bool senf::console::detail::BundleMixin::complete()
    const
{
    return bundle_.complete();
}

prefix_ bool senf::console::detail::BundleMixin::parsed(GenericNode & node)
    const
{
    return bundle_.parsed(node);
}

prefix_ void senf::console::detail::BundleMixin::reset()
{
    bundle_.reset();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
