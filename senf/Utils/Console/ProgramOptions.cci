// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ProgramOptions inline non-template implementation */

#include "ProgramOptions.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource

prefix_ senf::console::detail::ProgramOptionsSource::ptr
senf::console::detail::ProgramOptionsSource::create(int argc, char const ** argv)
{
    return ptr(new ProgramOptionsSource(argc,argv));
}

prefix_ senf::console::detail::ProgramOptionsSource::ProgramOptionsSource(int argc,
                                                                          char const ** argv)
    : argc_ (argc), argv_ (argv)
{}

prefix_ senf::console::detail::ProgramOptionsSource &
senf::console::detail::ProgramOptionsSource::alias(char letter, std::string const & longOpt,
                                                   bool withArg)
{
    shortOptions_.insert(std::make_pair(letter, ShortOption(withArg, longOpt)));
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource::ShortOption

prefix_ senf::console::detail::ProgramOptionsSource::ShortOption::
ShortOption(bool withArg_, std::string const & longOpt_)
    : withArg (withArg_), longOpt (longOpt_)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ProgramOptions

prefix_ senf::console::ProgramOptions::ProgramOptions(int argc, char const ** argv,
                                                      DirectoryNode & root)
    : detail::BundleMixin (root), config_ (add(detail::ProgramOptionsSource::create(argc, argv)))
{}

prefix_ senf::console::ProgramOptions &
senf::console::ProgramOptions::alias(char letter, std::string const & longOpt, bool withArg)
{
    config_.alias(letter, longOpt, withArg);
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::console::detail::ProgramOptionsSource::ptr
senf::console::OptionsConfig(int argc, char const ** argv)
{
    return detail::ProgramOptionsSource::create(argc, argv);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
