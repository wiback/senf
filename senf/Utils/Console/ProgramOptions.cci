//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ProgramOptions inline non-template implementation */

#include "ProgramOptions.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource

prefix_ senf::console::detail::ProgramOptionsSource::ptr
senf::console::detail::ProgramOptionsSource::create(int argc, char const ** argv)
{
    return ptr(new ProgramOptionsSource(argc,argv));
}

prefix_ senf::console::detail::ProgramOptionsSource::ProgramOptionsSource(int argc,
                                                                          char const ** argv)
    : argc_ (argc), argv_ (argv)
{}

prefix_ senf::console::detail::ProgramOptionsSource &
senf::console::detail::ProgramOptionsSource::alias(char letter, std::string const & longOpt,
                                                   bool withArg)
{
    shortOptions_.insert(std::make_pair(letter, ShortOption(withArg, longOpt)));
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource::ShortOption

prefix_ senf::console::detail::ProgramOptionsSource::ShortOption::
ShortOption(bool withArg_, std::string const & longOpt_)
    : withArg (withArg_), longOpt (longOpt_)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ProgramOptions

prefix_ senf::console::ProgramOptions::ProgramOptions(int argc, char const ** argv,
                                                      DirectoryNode & root)
    : detail::BundleMixin (root), config_ (add(detail::ProgramOptionsSource::create(argc, argv)))
{}

prefix_ senf::console::ProgramOptions &
senf::console::ProgramOptions::alias(char letter, std::string const & longOpt, bool withArg)
{
    config_.alias(letter, longOpt, withArg);
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::console::detail::ProgramOptionsSource::ptr
senf::console::OptionsConfig(int argc, char const ** argv)
{
    return detail::ProgramOptionsSource::create(argc, argv);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
