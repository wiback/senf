// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Utility non-inline template implementation  */

//#include "Utility.ih"

// Custom includes
#include <sstream>
#include <limits>
#include <boost/format.hpp>
#include "Traits.hh"

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ArgumentTraits< CharAsString<CharT> >

template <class CharT>
prefix_ void senf::console::ArgumentTraits< senf::console::CharAsString<CharT> >::
parse(ParseCommandInfo::TokensRange const & tokens, CharAsString<CharT> & out)
{
    std::string v;
    console::parse(tokens,v);
    if (v.size() != 1)
        throw SyntaxErrorException("Invalid size of character constant");
    out.value = static_cast<CharT>(v[0]);
}

template <class CharT>
prefix_ std::string
senf::console::ArgumentTraits< senf::console::CharAsString<CharT> >::description()
{
    return std::numeric_limits<CharT>::is_signed ? "char" : "uchar";
}

template <class CharT>
prefix_ std::string senf::console::ArgumentTraits< senf::console::CharAsString<CharT> >::
str(CharAsString<CharT> value)
{
    return console::str(std::string(1,value.value));
}

template <class CharT>
prefix_ void senf::console::ReturnValueTraits< senf::console::CharAsString<CharT> >::
format(CharAsString<CharT> value, std::ostream & os)
{
    console::format(std::string(1,value.value),os);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ArgumentTraits< senf::console::ValueRange<T> >

template <class T>
prefix_ void senf::console::ArgumentTraits< senf::console::ValueRange<T> >::
parse(ParseCommandInfo::TokensRange const & tokens, type & out)
{
    if (tokens.size() != 1)
        throw SyntaxErrorException("parameter syntax error");
    std::string v (tokens.begin()[0].value());
    std::string::size_type i (v.find(':'));
    try {
        if (i == std::string::npos)
            out.low = out.high = boost::lexical_cast<T>(v);
        else {
            out.low = boost::lexical_cast<T>(v.substr(0,i));
            out.high = boost::lexical_cast<T>(v.substr(i+1));
        }
    }
    catch (std::bad_cast & ex) {
        throw SyntaxErrorException("parameter syntax error");
    }
}

template <class T>
prefix_ std::string senf::console::ArgumentTraits< senf::console::ValueRange<T> >::
description()
{
    return (boost::format("range<%s>") % ArgumentTraits<T>::description()).str();
}

template <class T>
prefix_ std::string senf::console::ArgumentTraits< senf::console::ValueRange<T> >::
str(type const & value)
{
    std::stringstream ss;
    senf::console::format(value, ss);
    return ss.str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ReturnValueTraits< senf::console::ValueRange<T> >

template <class T>
prefix_ void senf::console::ReturnValueTraits< senf::console::ValueRange<T> >::
format(type const & value, std::ostream & os)
{
    os << senf::console::str(value.low);
    if (value.low != value.high)
        os << ':' << senf::console::str(value.high);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ArgumentTraits< senf::console::FlagCollection<Enum> >

template <class Enum>
prefix_ void senf::console::ArgumentTraits< senf::console::FlagCollection<Enum> >::
parse(ParseCommandInfo::TokensRange const & tokens, type & out)
{
    CheckedArgumentIteratorWrapper arg (tokens);
    out.value = 0;
    while (arg) {
        Enum v;
        console::parse( *(arg++), v);
        out.value |= v;
    }
}

template <class Enum>
prefix_ std::string
senf::console::ArgumentTraits< senf::console::FlagCollection<Enum> >::description()
{
    return ArgumentTraits<Enum>::description();
}

template <class Enum>
prefix_ std::string
senf::console::ArgumentTraits< senf::console::FlagCollection<Enum> >::str(type const & value)
{
    std::stringstream ss;
    console::format(value, ss);
    return ss.str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ReturnValueTraits< senf::console::FlagCollection<Enum> >

template <class Enum>
prefix_ void senf::console::ReturnValueTraits< senf::console::FlagCollection<Enum> >::
format(type const & value, std::ostream & os)
{
    unsigned n (0);
    std::stringstream ss;
    unsigned long flag (1);
    for (unsigned bit (0); bit<sizeof(value.value)*CHAR_BIT; ++bit, flag<<=1) {
        if (value.value & flag) {
            if (n++) ss << " ";
            console::format(static_cast<Enum>(flag), ss);
        }
    }
    os << (n != 1 ? "(" + ss.str() + ")" : ss.str());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
