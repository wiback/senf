// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Node inline template implementation */

#include "Node.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::DirectoryNode

template <class NodeType>
prefix_ NodeType & senf::console::DirectoryNode::add(std::string const & name,
                                                     boost::shared_ptr<NodeType> node)
{
    SENF_ASSERT( ! node->parent(), "Node can only be added to tree once" );
    node->name(name);
    add(node);
    return *node;
}

template <class NodeType>
prefix_ NodeType & senf::console::DirectoryNode::
add(std::string const & name, NodeType & node,
    typename boost::enable_if< boost::is_convertible<NodeType &, GenericNode &> >::type *)
{
    // This makes objects with implicit conversion operators work (hi, ScopedDirectory ..)
    add(name, static_cast<GenericNode &>(node).thisptr());
    return node;
}

template <class Factory>
prefix_ typename Factory::result_type senf::console::DirectoryNode::
add(std::string const & name, Factory const & factory,
    typename boost::enable_if< boost::is_convertible<Factory const &, detail::NodeFactory const &> >::type *)
{
    return factory.create(*this, name);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
