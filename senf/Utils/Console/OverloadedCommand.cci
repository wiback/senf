//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief OverloadedCommand inline non-template implementation */

//#include "OverloadedCommand.ih"

// Custom includes
#include <iostream>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::OverloadedCommandNode

prefix_ senf::console::OverloadedCommandNode::ptr senf::console::OverloadedCommandNode::create()
{
    return ptr(new OverloadedCommandNode());
}

prefix_ senf::console::OverloadedCommandNode::ptr senf::console::OverloadedCommandNode::thisptr()
{
    return boost::static_pointer_cast<OverloadedCommandNode>(shared_from_this());
}

prefix_ senf::console::OverloadedCommandNode::cptr senf::console::OverloadedCommandNode::thisptr()
    const
{
    return boost::static_pointer_cast<OverloadedCommandNode const>(shared_from_this());
}

prefix_ senf::console::OverloadedCommandNode &
senf::console::OverloadedCommandNode::doc(std::string const & doc)
{
    doc_ = doc;
    return *this;
}

prefix_ senf::console::OverloadedCommandNode &
senf::console::OverloadedCommandNode::shortdoc(std::string const & doc)
{
    shortdoc_ = doc;
    return *this;
}

prefix_ unsigned
senf::console::OverloadedCommandNode::overloadIndex(CommandOverload const & overload)
{
    return find(overloads_.begin(), overloads_.end(), CommandOverload::cptr(&overload))
        - overloads_.begin() + 1;
}

prefix_ senf::console::OverloadedCommandNode::OverloadsRange
senf::console::OverloadedCommandNode::overloads()
    const
{
    return boost::make_iterator_range(overloads_.begin(), overloads_.end());
}

prefix_ senf::console::OverloadedCommandNode::OverloadedCommandNode()
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::SimpleCommandOverload

prefix_ senf::console::SimpleCommandOverload::ptr
senf::console::SimpleCommandOverload::create(Function fn)
{
    return ptr(new SimpleCommandOverload(fn));
}

prefix_ senf::console::SimpleCommandOverload &
senf::console::SimpleCommandOverload::doc(std::string const & doc)
{
    doc_ = doc;
    return *this;
}

prefix_ senf::console::SimpleCommandOverload::SimpleCommandOverload(Function fn)
    : fn_ (fn)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::SimpleOverloadAttributor

prefix_ senf::console::SimpleOverloadAttributor::
SimpleOverloadAttributor(SimpleCommandOverload::Function fn)
    : overload_ (SimpleCommandOverload::create(fn))
{}

prefix_ senf::console::SimpleOverloadAttributor const &
senf::console::SimpleOverloadAttributor::doc(std::string const & doc)
    const
{
    doc_ = doc;
    return *this;
}

prefix_ senf::console::SimpleOverloadAttributor const &
senf::console::SimpleOverloadAttributor::shortdoc(std::string const & doc)
    const
{
    shortdoc_ = doc;
    return *this;
}

prefix_ senf::console::SimpleOverloadAttributor const &
senf::console::SimpleOverloadAttributor::overloadDoc(std::string const & doc)
    const
{
    overload_->doc(doc);
    return *this;
}

prefix_ senf::console::OverloadedCommandNode &
senf::console::SimpleOverloadAttributor::create(DirectoryNode & dir, std::string const & name)
    const
{
    OverloadedCommandNode & node (OverloadedCommandNode::insertOverload(dir, name, overload_));
    if (doc_) node.doc(*doc_);
    if (shortdoc_) node.shortdoc(*shortdoc_);
    return node;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
