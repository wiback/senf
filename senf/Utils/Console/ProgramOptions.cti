//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ProgramOptions inline template implementation */

#include "ProgramOptions.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource

template <class Container>
prefix_ senf::console::detail::ProgramOptionsSource &
senf::console::detail::ProgramOptionsSource::nonOptions(Container & container)
{
    nonOptions_.reset(new NonOptionContainerImpl<Container>(container));
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl

template <class Container>
prefix_
senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl<Container>::
NonOptionContainerImpl(Container & c)
    : c_ (c)
{}

template <class Container>
prefix_ void
senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl<Container>::clear()
{
    c_.clear();
}

template <class Container>
prefix_ void
senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl<Container>::
push_back(std::string const & value)
{
    c_.push_back(value);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ProgramOptions

template <class Container>
prefix_ senf::console::ProgramOptions &
senf::console::ProgramOptions::nonOptions(Container & container)
{
    config_.nonOptions(container);
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
