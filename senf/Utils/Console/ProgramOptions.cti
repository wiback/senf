// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ProgramOptions inline template implementation */

#include "ProgramOptions.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource

template <class Container>
prefix_ senf::console::detail::ProgramOptionsSource &
senf::console::detail::ProgramOptionsSource::nonOptions(Container & container)
{
    nonOptions_.reset(new NonOptionContainerImpl<Container>(container));
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl

template <class Container>
prefix_
senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl<Container>::
NonOptionContainerImpl(Container & c)
    : c_ (c)
{}

template <class Container>
prefix_ void
senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl<Container>::clear()
{
    c_.clear();
}

template <class Container>
prefix_ void
senf::console::detail::ProgramOptionsSource::NonOptionContainerImpl<Container>::
push_back(std::string const & value)
{
    c_.push_back(value);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ProgramOptions

template <class Container>
prefix_ senf::console::ProgramOptions &
senf::console::ProgramOptions::nonOptions(Container & container)
{
    config_.nonOptions(container);
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
