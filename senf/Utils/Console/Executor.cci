// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Executor inline non-template implementation */

//#include "Executor.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::Executor

prefix_ senf::console::Executor::Executor()
    : root_(senf::console::root().thisptr()), cwd_ (), oldCwd_ (),
      autocd_ (false), autocomplete_ (false)
{
    cwd_.push_back(root_);
}

prefix_ void senf::console::Executor::operator()(std::ostream & output,
                                                 ParseCommandInfo const & command)
{
    return execute(output, command);
}

prefix_ void senf::console::Executor::cwd(DirectoryNode & dir)
{
    cwd_.clear();
    cwd_.push_back(dir.thisptr());
    oldCwd_ = cwd_;
    dirstack_.clear();
}


prefix_ bool senf::console::Executor::autocd()
    const
{
    return autocd_;
}

prefix_ senf::console::Executor & senf::console::Executor::autocd(bool v)
{
    autocd_ = v;
    return *this;
}

prefix_ bool senf::console::Executor::autocomplete()
    const
{
    return autocomplete_;
}

prefix_ senf::console::Executor & senf::console::Executor::autocomplete(bool v)
{
    autocomplete_ = true;
    return *this;
}

prefix_ senf::console::DirectoryNode & senf::console::Executor::chroot()
    const
{
    return *root_;
}

prefix_ senf::console::Executor & senf::console::Executor::chroot(DirectoryNode & node)
{
    root_ = node.thisptr();
    cwd_.clear();
    cwd_.push_back(root_);
    oldCwd_ = cwd_;
    return *this;
}

prefix_ senf::console::Executor & senf::console::Executor::policy(SecurityPolicy policy)
{
    policy_ = policy;
    return *this;
}

prefix_ bool senf::console::Executor::skipping()
    const
{
    return cwd_.empty();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
