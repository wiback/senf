//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Executor inline non-template implementation */

//#include "Executor.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::Executor

prefix_ senf::console::Executor::Executor()
    : root_(senf::console::root().thisptr()), cwd_ (), oldCwd_ (),
      autocd_ (false), autocomplete_ (false)
{
    cwd_.push_back(root_);
}

prefix_ void senf::console::Executor::operator()(std::ostream & output,
                                                 ParseCommandInfo const & command)
{
    return execute(output, command);
}

prefix_ void senf::console::Executor::cwd(DirectoryNode & dir)
{
    cwd_.clear();
    cwd_.push_back(dir.thisptr());
    oldCwd_ = cwd_;
    dirstack_.clear();
}


prefix_ bool senf::console::Executor::autocd()
    const
{
    return autocd_;
}

prefix_ senf::console::Executor & senf::console::Executor::autocd(bool v)
{
    autocd_ = v;
    return *this;
}

prefix_ bool senf::console::Executor::autocomplete()
    const
{
    return autocomplete_;
}

prefix_ senf::console::Executor & senf::console::Executor::autocomplete(bool v)
{
    autocomplete_ = true;
    return *this;
}

prefix_ senf::console::DirectoryNode & senf::console::Executor::chroot()
    const
{
    return *root_;
}

prefix_ senf::console::Executor & senf::console::Executor::chroot(DirectoryNode & node)
{
    root_ = node.thisptr();
    cwd_.clear();
    cwd_.push_back(root_);
    oldCwd_ = cwd_;
    return *this;
}

prefix_ senf::console::Executor & senf::console::Executor::policy(SecurityPolicy policy)
{
    policy_ = policy;
    return *this;
}

prefix_ bool senf::console::Executor::skipping()
    const
{
    return cwd_.empty();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
