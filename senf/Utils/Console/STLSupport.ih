//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief STLSupport internal header */

#ifndef IH_SENF_senf_Utils_Console_STLSupport_
#define IH_SENF_senf_Utils_Console_STLSupport_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace console {
namespace detail {

    template <class Collection>
    struct CollectionArgumentTraitsBase
    {
        typedef Collection type;
        static bool const singleToken = false;

        static std::string description();
        static std::string str(Collection const & value);
    };

    template <class Collection, class Adder>
    struct CollectionArgumentTraits
        : detail::CollectionArgumentTraitsBase<Collection>
    {
        static void parse(ParseCommandInfo::TokensRange const & tokens, Collection & out);
    };

    template <class Collection>
    struct CollectionReturnValueTraits
    {
        typedef Collection type;

        static void format(Collection const & value, std::ostream & os);
    };

    struct PushBackFunctor
    {
        template <class Sequence, class ValueType>
        static void add(Sequence & seq, ValueType const & value);
    };

    struct InsertFunctor
    {
        template <class Collection, class ValueType>
        static void add(Collection & seq, ValueType const & value);
    };

    template <class Collection>
    struct MapArgumentTraits
    {
        typedef Collection type;
        static bool const singleToken = false;

        static void parse(ParseCommandInfo::TokensRange const & tokens, Collection & out);
        static std::string description();
        static std::string str(Collection const & value);
    };

    template <class Collection>
    struct MapReturnValueTraits
    {
        typedef Collection type;

        static void format(Collection const & value, std::ostream & os);
    };

#ifdef SENF_CXX11_ENABLED

    template <typename TupleType, std::size_t Index, std::size_t MaxIndex>
    struct TupleHelper
    {
        static void parse(CheckedArgumentIteratorWrapper & arg, TupleType & out);
        static void description(std::stringstream & ss);
        static void format(TupleType const & value, std::ostream & os);
    };

    template <typename TupleType, std::size_t MaxIndex>
    struct TupleHelper<TupleType, MaxIndex, MaxIndex>
    {
        static void parse(CheckedArgumentIteratorWrapper & arg, TupleType & out);
        static void description(std::stringstream & ss);
        static void format(TupleType const & value, std::ostream & os);
    };

#endif

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
