// $Id$
//
// Copyright (C) 2009 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief STLSupport internal header */

#ifndef IH_SENF_senf_Utils_Console_STLSupport_
#define IH_SENF_senf_Utils_Console_STLSupport_ 1

// Custom includes

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace console {
namespace detail {

    template <class Collection>
    struct CollectionArgumentTraitsBase
    {
        typedef Collection type;
        static bool const singleToken = false;

        static std::string description();
        static std::string str(Collection const & value);
    };

    template <class Collection, class Adder>
    struct CollectionArgumentTraits
        : detail::CollectionArgumentTraitsBase<Collection>
    {
        static void parse(ParseCommandInfo::TokensRange const & tokens, Collection  & out);
    };

    template <class Collection>
    struct CollectionReturnValueTraits
    {
        typedef Collection type;

        static void format(Collection const & value, std::ostream & os);
    };

    struct PushBackFunctor
    {
        template <class Sequence, class ValueType>
        static void add(Sequence & seq, ValueType const & value);
    };

    struct InsertFunctor
    {
        template <class Collection, class ValueType>
        static void add(Collection & seq, ValueType const & value);
    };

    template <class Collection>
    struct MapArgumentTraits
    {
        typedef Collection type;
        static bool const singleToken = false;

        static void parse(ParseCommandInfo::TokensRange const & tokens, Collection & out);
        static std::string description();
        static std::string str(Collection const & value);
    };

    template <class Collection>
    struct MapReturnValueTraits
    {
        typedef Collection type;
        
        static void format(Collection const & value, std::ostream & os);
    };

}}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
