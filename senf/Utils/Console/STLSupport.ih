// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief STLSupport internal header */

#ifndef IH_SENF_senf_Utils_Console_STLSupport_
#define IH_SENF_senf_Utils_Console_STLSupport_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace console {
namespace detail {

    template <class Collection>
    struct CollectionArgumentTraitsBase
    {
        typedef Collection type;
        static bool const singleToken = false;

        static std::string description();
        static std::string str(Collection const & value);
    };

    template <class Collection, class Adder>
    struct CollectionArgumentTraits
        : detail::CollectionArgumentTraitsBase<Collection>
    {
        static void parse(ParseCommandInfo::TokensRange const & tokens, Collection  & out);
    };

    template <class Collection>
    struct CollectionReturnValueTraits
    {
        typedef Collection type;

        static void format(Collection const & value, std::ostream & os);
    };

    struct PushBackFunctor
    {
        template <class Sequence, class ValueType>
        static void add(Sequence & seq, ValueType const & value);
    };

    struct InsertFunctor
    {
        template <class Collection, class ValueType>
        static void add(Collection & seq, ValueType const & value);
    };

    template <class Collection>
    struct MapArgumentTraits
    {
        typedef Collection type;
        static bool const singleToken = false;

        static void parse(ParseCommandInfo::TokensRange const & tokens, Collection & out);
        static std::string description();
        static std::string str(Collection const & value);
    };

    template <class Collection>
    struct MapReturnValueTraits
    {
        typedef Collection type;

        static void format(Collection const & value, std::ostream & os);
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
