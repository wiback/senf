// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Variables inline template implementation */

#include "Variables.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::QueryVariable<Variable>

template <class Variable>
prefix_ senf::console::detail::QueryVariable<Variable>::QueryVariable(Variable const & var)
    : var_ (var)
{}

template <class Variable>
prefix_ typename senf::console::detail::QueryVariable<Variable>::Traits::Overload::ptr
senf::console::detail::QueryVariable<Variable>::create(Variable const & var)
{
    return CreateOverload::create(Function(QueryVariable(var)));
}

template <class Variable>
prefix_ Variable const & senf::console::detail::QueryVariable<Variable>::operator()()
    const
{
    return var_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::SetVariable<Variable>

template <class Variable>
prefix_ senf::console::detail::SetVariable<Variable>::SetVariable(Variable & var,
                                                                  OnChangeHandler handler)
    : var_ (var), handler_ (handler)
{}

template <class Variable>
prefix_ typename senf::console::detail::SetVariable<Variable>::Traits::Overload::ptr
senf::console::detail::SetVariable<Variable>::create(Variable & var)
{
    typename Traits::Overload::ptr overload (CreateOverload::create(Function(SetVariable(var))));
    overload->arg(0).name = "new_value";
    return overload;
}

template <class Variable>
prefix_ void senf::console::detail::SetVariable<Variable>::operator()(Variable const & value)
    const
{
    if (handler_) {
        Variable old (var_);
        var_ = value;
        handler_(old);
    }
    else
        var_ = value;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ConstVariableFactory<Variable>

template <class Variable>
prefix_ senf::console::factory::ConstVariableFactory<Variable>
senf::console::factory::ConstVariableFactory<Variable>::doc(std::string const & doc)
{
    doc_ = doc;
    return *this;
}

template <class Variable>
prefix_ senf::console::factory::ConstVariableFactory<Variable>
senf::console::factory::ConstVariableFactory<Variable>::shortdoc(std::string const & doc)
{
    shortdoc_ = doc;
    return *this;
}

template <class Variable>
prefix_ senf::console::factory::ConstVariableFactory<Variable>
senf::console::factory::ConstVariableFactory<Variable>::formatter(Formatter formatter)
{
    queryOverload_->formatter(formatter);
    return *this;
}

template <class Variable>
prefix_ senf::console::OverloadedCommandNode &
senf::console::factory::ConstVariableFactory<Variable>::create(DirectoryNode & dir,
                                                               std::string const & name)
    const
{
    OverloadedCommandNode & node (OverloadedCommandNode::insertOverload(dir, name, queryOverload_));
    if (doc_) node.doc(*doc_);
    if (shortdoc_) node.shortdoc(*shortdoc_);
    return node;
}

template <class Variable>
prefix_ senf::console::factory::ConstVariableFactory<Variable>::
ConstVariableFactory(Variable const & var)
    : queryOverload_ (detail::QueryVariable<Variable>::create(var))
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::VariableFactory<Variable>

template <class Variable>
prefix_ typename senf::console::factory::VariableFactory<Variable>
senf::console::factory::VariableFactory<Variable>::parser(Parser parser)
{
    setOverload_->template arg<0>().parser = parser;
    return *this;
}

template <class Variable>
prefix_ typename senf::console::factory::VariableFactory<Variable>
senf::console::factory::VariableFactory<Variable>::typeName(std::string const & name)
{
    setOverload_->arg(0).type = name;
    return *this;
}

template <class Variable>
prefix_ typename senf::console::factory::VariableFactory<Variable>
senf::console::factory::VariableFactory<Variable>::onChange(OnChangeHandler handler)
{
    setOverload_->function(
        boost::bind(detail::SetVariable<Variable>(var_, handler),_2));
    return *this;
}

template <class Variable>
prefix_ typename senf::console::factory::VariableFactory<Variable>
senf::console::factory::VariableFactory<Variable>::doc(std::string const & doc)
{
    ConstVariableFactory<Variable>::doc(doc);
    return *this;
}

template <class Variable>
prefix_ typename senf::console::factory::VariableFactory<Variable>
senf::console::factory::VariableFactory<Variable>::shortdoc(std::string const & doc)
{
    ConstVariableFactory<Variable>::shortdoc(doc);
    return *this;
}

template <class Variable>
prefix_ typename senf::console::factory::VariableFactory<Variable>
senf::console::factory::VariableFactory<Variable>::formatter(Formatter formatter)
{
    ConstVariableFactory<Variable>::formatter(formatter);
    return *this;
}

template <class Variable>
prefix_ senf::console::OverloadedCommandNode &
senf::console::factory::VariableFactory<Variable>::create(DirectoryNode & dir,
                                                          std::string const & name)
    const
{
    OverloadedCommandNode & node (ConstVariableFactory<Variable>::create(dir,name));
    node.add(setOverload_);
    return node;
}

template <class Variable>
prefix_ senf::console::factory::VariableFactory<Variable>::VariableFactory(Variable & var)
    : ConstVariableFactory<Variable> (var),
      setOverload_ (detail::SetVariable<Variable>::create(var)),
      var_ (var)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Var>
prefix_ senf::console::factory::VariableFactory<Var>
senf::console::factory::Variable(Var & var)
{
    return VariableFactory<Var>(var);
}

template <class Var>
prefix_ senf::console::factory::VariableFactory<Var>
senf::console::factory::Variable(boost::reference_wrapper<Var> var)
{
    return VariableFactory<Var>(var);
}

template <class Var>
prefix_ senf::console::factory::ConstVariableFactory<Var>
senf::console::factory::Variable(Var const & var)
{
    return ConstVariableFactory<Var>(var);
}

template <class Var>
prefix_ senf::console::factory::ConstVariableFactory<Var>
senf::console::factory::Variable(boost::reference_wrapper<Var const> var)
{
    return ConstVariableFactory<Var>(var);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
