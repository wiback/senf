// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief VectorSupport non-inline template implementation  */

//#include "VectorSupport.ih"

// Custom includes
#include <boost/format.hpp>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::CollectionArgumentTraitsBase<Collection>

template <class Collection>
prefix_ std::string
senf::console::detail::CollectionArgumentTraitsBase<Collection>::description()
{
    return senf::prettyBaseName(typeid(Collection)) + "<"
        + ArgumentTraits<typename Collection::value_type>::description() + ">";
}

template <class Collection>
prefix_ std::string
senf::console::detail::CollectionArgumentTraitsBase<Collection>::str(Collection const & value)
{
    std::stringstream ss;
    senf::console::format(value, ss);
    return ss.str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::CollectionArgumentTraits<Collection,Adder>

template <class Collection, class Adder>
prefix_ void senf::console::detail::CollectionArgumentTraits<Collection,Adder>::
parse(ParseCommandInfo::TokensRange const & tokens, Collection & out)
{
    out.clear();
    CheckedArgumentIteratorWrapper arg (tokens);
    while (arg) {
        typename Collection::value_type v;
        senf::console::parse( *(arg++), v );
        Adder::add(out,v);
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::CollectionReturnValueTraits<Collection>

template <class Collection>
prefix_ void
senf::console::detail::CollectionReturnValueTraits<Collection>::format(Collection const & value,
                                                                       std::ostream & os)
{
    os << "(";
    typename type::const_iterator i (value.begin());
    typename type::const_iterator const i_end (value.end());
    if (i != i_end)
        for (;;) {
            os << senf::console::str(*i);
            if (++i == i_end)
                break;
            else
                os << " ";
        }
    os << ")";
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::MapArgumentTraits<Collection>

template <class Collection>
prefix_ void senf::console::detail::MapArgumentTraits<Collection>::
parse(ParseCommandInfo::TokensRange const & tokens, Collection & out)
{
    out.clear();
    CheckedArgumentIteratorWrapper arg (tokens);
    while (arg) {
        typename Collection::key_type key;
        typename Collection::mapped_type data;
        senf::console::parse( *(arg++), key );
        ParseCommandInfo::TokensRange sep (*(arg++));
        if (sep.size() != 1 || sep[0].type() != Token::OtherPunctuation || sep[0].value() != "=")
            throw SyntaxErrorException("'=' expected");
        senf::console::parse( *(arg++), data );
        out.insert(std::make_pair(key,data));
    }
}

template <class Collection>
prefix_ std::string senf::console::detail::MapArgumentTraits<Collection>::description()
{
    return senf::prettyBaseName(typeid(Collection)) + "<"
        + ArgumentTraits<typename Collection::key_type>::description() + ","
        + ArgumentTraits<typename Collection::mapped_type>::description() + ">";
}

template <class Collection>
prefix_ std::string
senf::console::detail::MapArgumentTraits<Collection>::str(Collection const & value)
{
    std::stringstream ss;
    senf::console::format(value, ss);
    return ss.str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::MapReturnValueTraits<Collection>

template <class Collection>
prefix_ void
senf::console::detail::MapReturnValueTraits<Collection>::format(Collection const & value,
                                                                std::ostream & os)
{
    os << "(";
    typename type::const_iterator i (value.begin());
    typename type::const_iterator const i_end (value.end());
    if (i != i_end)
        for (;;) {
            os << senf::console::str(i->first)
               << "="
               << senf::console::str(i->second);
            if (++i == i_end)
                break;
            else
                os << " ";
        }
    os << ")";
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ArgumentTraits< std::pair<T1,T2> >

template <class T1, class T2>
prefix_ void senf::console::ArgumentTraits< std::pair<T1,T2> >::
parse(ParseCommandInfo::TokensRange const & tokens, type & out)
{
    CheckedArgumentIteratorWrapper arg (tokens);
    senf::console::parse( *(arg++), out.first );
    senf::console::parse( *(arg++), out.second );
}

template <class T1, class T2>
prefix_ std::string senf::console::ArgumentTraits< std::pair<T1,T2> >::description()
{
    return (boost::format("pair<%s,%s>")
            % ArgumentTraits<T1>::description()
            % ArgumentTraits<T2>::description()).str();
}

template <class T1, class T2>
prefix_ std::string senf::console::ArgumentTraits< std::pair<T1,T2> >::str(type const & value)
{
    std::stringstream ss;
    senf::console::format(value, ss);
    return ss.str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ReturnValueTraits< std::pair<T1,T2> >

template <class T1, class T2>
prefix_ void senf::console::ReturnValueTraits< std::pair<T1,T2> >::format(type const & value,
                                                                          std::ostream & os)
{
    os << "(" << senf::console::str(value.first)
       << " " << senf::console::str(value.second) << ")";
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
