//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ScopedDirectory inline template implementation */

//#include "ScopedDirectory.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ScopedDirectory<Owner>

template <class Owner>
prefix_ senf::console::ScopedDirectory<Owner>::ScopedDirectory(Owner * owner)
    : owner_ (owner)
{
    SENF_ASSERT(owner_, "ScopedDirectory owner is mandatory");
}

template <class Owner>
template <class NodeType>
prefix_ NodeType & senf::console::ScopedDirectory<Owner>::add(std::string const & name,
                                                              boost::shared_ptr<NodeType> othernode)
{
    return node().add(name, othernode);
}

template <class Owner>
template <class NodeType>
prefix_ NodeType & senf::console::ScopedDirectory<Owner>::
add(std::string const & name, NodeType & othernode,
    typename boost::enable_if< boost::is_convertible<NodeType &, GenericNode &> >::type *)
{
    return node().add(name,othernode);
}

template <class Owner>
template <class Factory>
prefix_ typename Factory::result_type senf::console::ScopedDirectory<Owner>::
add(std::string const & name, Factory const & factory,
    typename boost::enable_if< boost::is_convertible<Factory*, detail::OwnedNodeFactory*> >::type *)
{
    return factory.create(*owner_, name, node());
}

template <class Owner>
template <class Factory>
prefix_ typename Factory::result_type senf::console::ScopedDirectory<Owner>::
add(std::string const & name, Factory const & factory,
    typename boost::enable_if< boost::is_convertible<Factory*, detail::NodeFactory*> >::type *,
    typename boost::disable_if< boost::is_convertible<Factory*, detail::OwnedNodeFactory*> >::type *)
{
    return node().add(name, factory);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ScopedDirectory<void>


template <class NodeType>
prefix_ NodeType & senf::console::ScopedDirectory<void>::add(std::string const & name,
                                                             boost::shared_ptr<NodeType> othernode)
{
    return node().add(name,othernode);
}

template <class NodeType>
prefix_ NodeType & senf::console::ScopedDirectory<void>::
add(std::string const & name, NodeType & othernode,
    typename boost::enable_if< boost::is_convertible<NodeType &, GenericNode &> >::type *)
{
    return node().add(name,othernode);
}

template <class Factory>
prefix_ typename Factory::result_type senf::console::ScopedDirectory<void>::
add(std::string const & name, Factory const & factory,
    typename boost::enable_if< boost::is_convertible<Factory*, detail::NodeFactory*> >::type *)
{
    return node().add(name,factory);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
