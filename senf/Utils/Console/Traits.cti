// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Traits inline template implementation */

#include "Traits.ih"

// Custom includes
#include <sstream>
#include <boost/format.hpp>
#include <senf/Utils/TypeInfo.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ReturnValueTraits<Type>

template <class Type>
prefix_ void senf::console::ReturnValueTraits<Type>::format(Type const & value,
                                                            std::ostream & os)
{
    senf_console_format_value(value, os);
}

template <class Type>
prefix_ void senf::console::senf_console_format_value(Type const & value, std::ostream & os)
{
    os << value;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ArgumentTraits<Type>

template <class Type>
prefix_ void senf::console::ArgumentTraits<Type>::
parse(ParseCommandInfo::TokensRange const & tokens, Type & out)
{
    senf_console_parse_argument(tokens,out);
}

template <class Type>
prefix_ void senf::console::parse(ParseCommandInfo::TokensRange const & tokens, Type & out)
{
    ArgumentTraits<Type>::parse(tokens, out);
}

template <class Type>
prefix_ std::string senf::console::str(Type const & value)
{
    return ArgumentTraits<Type>::str(value);
}

template <class Type>
prefix_ void senf::console::format(Type const & value, std::ostream & os)
{
    ReturnValueTraits<Type>::format(value, os);
}

template <class Type>
prefix_ std::string senf::console::ArgumentTraits<Type>::description()
{
    return prettyBaseName(typeid(Type));
}

template <class Type>
prefix_ std::string senf::console::ArgumentTraits<Type>::str(Type const & value)
{
    std::stringstream ss;
    senf::console::format(value, ss);
    std::string rv (ss.str());

    if (rv.empty() || ! boost::algorithm::all(rv, CommandParser::isWordChar)) {
        for (std::string::size_type i (0); i < rv.size(); ++i)
            if (rv[i] == '"' || rv[i] == '\\')
                rv.insert(i++,"\\");
            else if (rv[i] < ' ' || rv[i] > 126) {
                rv.insert(i+1, (boost::format("x%02x")
                                % unsigned(static_cast<unsigned char>(rv[i]))).str().c_str());
                rv[i] = '\\';
                i += 3;
            }

        rv.insert(0,"\"");
        rv.push_back('"');
        return rv;
    }

    return ss.str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::CharArgumentTraits<CharT>

template <class CharT>
prefix_ void senf::console::detail::CharArgumentTraits<CharT>::
parse(ParseCommandInfo::TokensRange const & tokens, CharT & out)
{
    typename base::type v;
    base::parse(tokens,v);
    out = v;
}

template <class CharT>
prefix_ std::string senf::console::detail::CharArgumentTraits<CharT>::description()
{
    return std::numeric_limits<CharT>::is_signed ? "byte" : "ubyte";
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
