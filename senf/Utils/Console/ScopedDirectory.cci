//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ScopedDirectory inline non-template implementation */

//#include "ScopedDirectory.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ScopedDirectoryBase

prefix_ senf::console::DirectoryNode & senf::console::ScopedDirectoryBase::node()
    const
{
    return *node_;
}

prefix_ senf::console::ScopedDirectoryBase::operator DirectoryNode &()
    const
{
    return node();
}

prefix_ senf::console::GenericNode::ptr
senf::console::ScopedDirectoryBase::remove(std::string const & name)
{
   return node().remove(name);
}

prefix_ bool senf::console::ScopedDirectoryBase::hasChild(std::string const & name)
    const
{
    return node().hasChild(name);
}

prefix_ senf::console::DirectoryNode &
senf::console::ScopedDirectoryBase::getDirectory(std::string const & name)
    const
{
    return node().getDirectory(name);
}

prefix_ senf::console::DirectoryNode &
senf::console::ScopedDirectoryBase::operator[](std::string const & name)
    const
{
    return node()[name];
}

prefix_ senf::console::CommandNode &
senf::console::ScopedDirectoryBase::getCommand(std::string const & name)
    const
{
    return node().getCommand(name);
}

prefix_ senf::console::CommandNode &
senf::console::ScopedDirectoryBase::operator()(std::string const & name)
    const
{
    return node()(name);
}

prefix_ senf::console::GenericNode &
senf::console::ScopedDirectoryBase::get(std::string const & name)
    const
{
    return node().get(name);
}

prefix_ senf::console::DirectoryNode::ChildrenRange
senf::console::ScopedDirectoryBase::children()
    const
{
    return node().children();
}

prefix_ senf::console::DirectoryNode &
senf::console::ScopedDirectoryBase::doc(std::string const & doc)
{
    return node().doc(doc);
}

prefix_ std::string const & senf::console::ScopedDirectoryBase::name()
    const
{
    return node().name();
}

prefix_ bool senf::console::ScopedDirectoryBase::active()
    const
{
    return node().active();
}

prefix_ std::string senf::console::ScopedDirectoryBase::path()
    const
{
    return node().path();
}

prefix_ std::string senf::console::ScopedDirectoryBase::path(DirectoryNode const & root)
    const
{
    return node().path(root);
}

prefix_ boost::shared_ptr<senf::console::DirectoryNode>
senf::console::ScopedDirectoryBase::parent()
    const
{
    return node().parent();
}

prefix_ senf::console::GenericNode::ptr senf::console::ScopedDirectoryBase::unlink()
{
    return node().unlink();
}

prefix_ void senf::console::ScopedDirectoryBase::help(std::ostream & output)
    const
{
    node().help( output);
}

prefix_ std::string senf::console::ScopedDirectoryBase::shorthelp()
    const
{
    return node().shorthelp();
}

prefix_ senf::console::ScopedDirectoryBase::ScopedDirectoryBase()
    : node_ (DirectoryNode::create())
{}

prefix_ senf::console::ScopedDirectoryBase::~ScopedDirectoryBase()
{
    node_->unlink();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
