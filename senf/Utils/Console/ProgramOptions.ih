//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ProgramOptions internal header */

#ifndef IH_SENF_Scheduler_Console_ProgramOptions_
#define IH_SENF_Scheduler_Console_ProgramOptions_ 1

// Custom includes
#include <boost/scoped_ptr.hpp>
#include "Parse.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace console {
namespace detail {

#ifndef DOXYGEN

    class ProgramOptionsSource : public ConfigSource
    {
    public:
        typedef boost::intrusive_ptr<ProgramOptionsSource> ptr;

        static ptr create(int argc, char const ** argv);

        template <class Container>
        ProgramOptionsSource & nonOptions(Container & container);
        ProgramOptionsSource & alias(char letter, std::string const & longOpt, bool withArg=false);

    private:
        ProgramOptionsSource(int argc, char const ** argv);

        virtual void v_parse(RestrictedExecutor & executor);

        void parseLongOption(std::string const & arg, RestrictedExecutor & executor);
        void parseNonOption(std::string const & arg, RestrictedExecutor & executor);

        struct NonOptionContainer
        {
            virtual ~NonOptionContainer();
            virtual void clear() = 0;
            virtual void push_back(std::string const & value) = 0;
        };

        template <class Container>
        struct NonOptionContainerImpl
            : public NonOptionContainer
        {
            NonOptionContainerImpl(Container & c);

            void clear();
            void push_back(std::string const & value);

            Container & c_;
        };

        struct ShortOption
        {
            ShortOption(bool withArg, std::string const & longOpt);
            bool withArg;
            std::string longOpt;
        };

        typedef std::map<char, ShortOption> ShortOptions;

        int argc_;
        char const ** argv_;
        CommandParser parser_;
        ShortOptions shortOptions_;
        boost::scoped_ptr<NonOptionContainer> nonOptions_;
    };

#endif

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
