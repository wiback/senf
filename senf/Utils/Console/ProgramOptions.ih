// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ProgramOptions internal header */

#ifndef IH_SENF_Scheduler_Console_ProgramOptions_
#define IH_SENF_Scheduler_Console_ProgramOptions_ 1

// Custom includes
#include <boost/scoped_ptr.hpp>
#include "Parse.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace console {
namespace detail {

#ifndef DOXYGEN

    class ProgramOptionsSource : public ConfigSource
    {
    public:
        typedef boost::intrusive_ptr<ProgramOptionsSource> ptr;

        static ptr create(int argc, char const ** argv);

        template <class Container>
        ProgramOptionsSource & nonOptions(Container & container);
        ProgramOptionsSource & alias(char letter, std::string const & longOpt, bool withArg=false);

    private:
        ProgramOptionsSource(int argc, char const ** argv);

        virtual void v_parse(RestrictedExecutor & executor);

        void parseLongOption(std::string const & arg, RestrictedExecutor & executor);
        void parseNonOption(std::string const & arg, RestrictedExecutor & executor);

        struct NonOptionContainer
        {
            virtual ~NonOptionContainer();
            virtual void clear() = 0;
            virtual void push_back(std::string const & value) = 0;
        };

        template <class Container>
        struct NonOptionContainerImpl
            : public NonOptionContainer
        {
            NonOptionContainerImpl(Container & c);

            void clear();
            void push_back(std::string const & value);

            Container & c_;
        };

        struct ShortOption
        {
            ShortOption(bool withArg, std::string const & longOpt);
            bool withArg;
            std::string longOpt;
        };

        typedef std::map<char, ShortOption> ShortOptions;

        int argc_;
        char const ** argv_;
        CommandParser parser_;
        ShortOptions shortOptions_;
        boost::scoped_ptr<NonOptionContainer> nonOptions_;
    };

#endif

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
