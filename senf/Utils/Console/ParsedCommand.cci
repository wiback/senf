// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParsedCommand inline non-template implementation */

#include "ParsedCommand.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ArgumentInfoBase

prefix_ senf::console::detail::ArgumentInfoBase::ArgumentInfoBase(std::string const & type_,
                                                                  bool singleToken_)
    : type (type_), name (), hasDefault (false), singleToken (singleToken_)
{}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandOverloadBase

prefix_ senf::console::ParsedCommandOverloadBase::ParsedCommandOverloadBase()
{}

prefix_ senf::console::detail::ArgumentInfoBase &
senf::console::ParsedCommandOverloadBase::arg(unsigned n)
    const
{
    BOOST_ASSERT(n < parameters_.size());
    return * parameters_[n];
}

prefix_ void senf::console::ParsedCommandOverloadBase::doc(std::string const & d)
{
    doc_ = d;
}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandAttributorBase

prefix_ senf::console::OverloadedCommandNode &
senf::console::ParsedCommandAttributorBase::create(DirectoryNode & dir,
                                                   std::string const & name)
    const
{
    OverloadedCommandNode & node (OverloadedCommandNode::insertOverload(dir, name, overload_));
    if (doc_) node.doc(*doc_);
    if (shortdoc_) node.shortdoc(*shortdoc_);
    return node;
}

prefix_ senf::console::ParsedCommandAttributorBase::
ParsedCommandAttributorBase(ParsedCommandOverloadBase::ptr overload, unsigned index)
  : overload_ (overload), index_ (index)
{}

prefix_ senf::console::ParsedCommandAttributorBase::
ParsedCommandAttributorBase(ParsedCommandAttributorBase const & other, unsigned index)
    : overload_ (other.overload_), index_ (index), doc_ (other.doc_), shortdoc_ (other.shortdoc_)
{}

prefix_ senf::console::ParsedCommandOverloadBase &
senf::console::ParsedCommandAttributorBase::overload()
    const
{
    return *overload_;
}

prefix_ void senf::console::ParsedCommandAttributorBase::argName(std::string const & name)
{
    overload().arg(index_).name = name;
}

prefix_ void senf::console::ParsedCommandAttributorBase::argDoc(std::string const & doc)
{
    overload().arg(index_).doc = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::typeName(std::string const & doc)
{
    overload().arg(index_).type = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::defaultDoc(std::string const & doc)
{
    overload().arg(index_).defaultDoc = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::overloadDoc(std::string const & doc)
{
    overload().doc(doc);
}

prefix_ void senf::console::ParsedCommandAttributorBase::nodeDoc(std::string const & doc)
{
    doc_ = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::shortDoc(std::string const & doc)
{
    shortdoc_ = doc;
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
