// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ParsedCommand inline non-template implementation */

#include "ParsedCommand.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ArgumentInfoBase

prefix_ senf::console::detail::ArgumentInfoBase::ArgumentInfoBase(std::string const & type_,
                                                                  bool singleToken_)
    : type (type_), name (), hasDefault (false), singleToken (singleToken_)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandOverloadBase

prefix_ senf::console::ParsedCommandOverloadBase::ParsedCommandOverloadBase()
{}

prefix_ senf::console::detail::ArgumentInfoBase &
senf::console::ParsedCommandOverloadBase::arg(unsigned n)
    const
{
    BOOST_ASSERT(n < parameters_.size());
    return * parameters_[n];
}

prefix_ void senf::console::ParsedCommandOverloadBase::doc(std::string const & d)
{
    doc_ = d;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandAttributorBase

prefix_ senf::console::OverloadedCommandNode &
senf::console::ParsedCommandAttributorBase::create(DirectoryNode & dir,
                                                   std::string const & name)
    const
{
    OverloadedCommandNode & node (OverloadedCommandNode::insertOverload(dir, name, overload_));
    if (doc_) node.doc(*doc_);
    if (shortdoc_) node.shortdoc(*shortdoc_);
    return node;
}

prefix_ senf::console::ParsedCommandAttributorBase::
ParsedCommandAttributorBase(ParsedCommandOverloadBase::ptr overload, unsigned index)
  : overload_ (overload), index_ (index)
{}

prefix_ senf::console::ParsedCommandAttributorBase::
ParsedCommandAttributorBase(ParsedCommandAttributorBase const & other, unsigned index)
    : overload_ (other.overload_), index_ (index), doc_ (other.doc_), shortdoc_ (other.shortdoc_)
{}

prefix_ senf::console::ParsedCommandOverloadBase &
senf::console::ParsedCommandAttributorBase::overload()
    const
{
    return *overload_;
}

prefix_ void senf::console::ParsedCommandAttributorBase::argName(std::string const & name)
{
    overload().arg(index_).name = name;
}

prefix_ void senf::console::ParsedCommandAttributorBase::argDoc(std::string const & doc)
{
    overload().arg(index_).doc = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::typeName(std::string const & doc)
{
    overload().arg(index_).type = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::defaultDoc(std::string const & doc)
{
    overload().arg(index_).defaultDoc = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::overloadDoc(std::string const & doc)
{
    overload().doc(doc);
}

prefix_ void senf::console::ParsedCommandAttributorBase::nodeDoc(std::string const & doc)
{
    doc_ = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::shortDoc(std::string const & doc)
{
    shortdoc_ = doc;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
