//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ParsedCommand inline non-template implementation */

#include "ParsedCommand.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::detail::ArgumentInfoBase

prefix_ senf::console::detail::ArgumentInfoBase::ArgumentInfoBase(std::string const & type_,
                                                                  bool singleToken_)
    : type (type_), name (), hasDefault (false), singleToken (singleToken_)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandOverloadBase

prefix_ senf::console::ParsedCommandOverloadBase::ParsedCommandOverloadBase()
{}

prefix_ senf::console::detail::ArgumentInfoBase &
senf::console::ParsedCommandOverloadBase::arg(unsigned n)
    const
{
    BOOST_ASSERT(n < parameters_.size());
    return * parameters_[n];
}

prefix_ void senf::console::ParsedCommandOverloadBase::doc(std::string const & d)
{
    doc_ = d;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandAttributorBase

prefix_ senf::console::OverloadedCommandNode &
senf::console::ParsedCommandAttributorBase::create(DirectoryNode & dir,
                                                   std::string const & name)
    const
{
    OverloadedCommandNode & node (OverloadedCommandNode::insertOverload(dir, name, overload_));
    if (doc_) node.doc(*doc_);
    if (shortdoc_) node.shortdoc(*shortdoc_);
    return node;
}

prefix_ senf::console::ParsedCommandAttributorBase::
ParsedCommandAttributorBase(ParsedCommandOverloadBase::ptr overload, unsigned index)
  : overload_ (overload), index_ (index)
{}

prefix_ senf::console::ParsedCommandAttributorBase::
ParsedCommandAttributorBase(ParsedCommandAttributorBase const & other, unsigned index)
    : overload_ (other.overload_), index_ (index), doc_ (other.doc_), shortdoc_ (other.shortdoc_)
{}

prefix_ senf::console::ParsedCommandOverloadBase &
senf::console::ParsedCommandAttributorBase::overload()
    const
{
    return *overload_;
}

prefix_ void senf::console::ParsedCommandAttributorBase::argName(std::string const & name)
{
    overload().arg(index_).name = name;
}

prefix_ void senf::console::ParsedCommandAttributorBase::argDoc(std::string const & doc)
{
    overload().arg(index_).doc = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::typeName(std::string const & doc)
{
    overload().arg(index_).type = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::defaultDoc(std::string const & doc)
{
    overload().arg(index_).defaultDoc = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::overloadDoc(std::string const & doc)
{
    overload().doc(doc);
}

prefix_ void senf::console::ParsedCommandAttributorBase::nodeDoc(std::string const & doc)
{
    doc_ = doc;
}

prefix_ void senf::console::ParsedCommandAttributorBase::shortDoc(std::string const & doc)
{
    shortdoc_ = doc;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
