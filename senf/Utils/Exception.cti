//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Exception inline template implementation */

//#include "Exception.ih"

// Custom includes
#include <boost/lexical_cast.hpp>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Exc, class Arg>
prefix_ typename boost::enable_if< boost::is_convertible<Exc*,senf::ExceptionMixin*>, Exc & >::type
senf::operator<<(Exc const & exc, Arg const & arg)
{
    const_cast<Exc &>(exc).append( boost::lexical_cast<std::string>(arg) );
    return const_cast<Exc &>(exc);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::WrapExcecption<BaseException>

template <class BaseException>
prefix_ senf::WrapException<BaseException> senf::make_WrapException(BaseException const & base)
{
    return WrapException<BaseException>(base);
}

template <class BaseException>
prefix_ senf::WrapException<BaseException>::WrapException(BaseException const & base)
    : ExceptionMixin(base.what()), BaseException(base)
{}

template <class BaseException>
prefix_ senf::WrapException<BaseException>::~WrapException()
    throw()
{}

template <class BaseException>
prefix_ char const * senf::WrapException<BaseException>::what()
    const throw()
{
    return what_.c_str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
