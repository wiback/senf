// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Exception inline template implementation */

//#include "Exception.ih"

// Custom includes
#include <boost/lexical_cast.hpp>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Exc, class Arg>
prefix_ typename boost::enable_if< boost::is_convertible<Exc*,senf::ExceptionMixin*>, Exc & >::type
senf::operator<<(Exc const & exc, Arg const & arg)
{
    const_cast<Exc &>(exc).append( boost::lexical_cast<std::string>(arg) );
    return const_cast<Exc &>(exc);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::WrapExcecption<BaseException>

template <class BaseException>
prefix_ senf::WrapException<BaseException>::WrapException(BaseException const & base)
    : ExceptionMixin(base.what()), BaseException(base)
{}

template <class BaseException>
prefix_ senf::WrapException<BaseException>::~WrapException()
    throw()
{}

template <class BaseException>
prefix_ char const * senf::WrapException<BaseException>::what()
    const throw()
{
    return what_.c_str();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
