// $Id$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Mathias Kretschmer <mathias.kretschmer@fokus.fraunhofer.de>
//   Jens Moedeker <jens.moedeker@fokus.fraunhofer.de>

/** \file
    \brief StatisticAccumulator non-inline template implementation  */

// Custom includes
#include <algorithm>
#include <limits>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::StatisticAccumulator<T>

template <class T>
prefix_ senf::StatisticAccumulator<T>::StatisticAccumulator()
    : sum_squared_(0), sum_(0), min_( std::numeric_limits<T>::max()), max_( std::numeric_limits<T>::min()), cnt_(0), last_avg_(0)
{}

template <class T>
prefix_ senf::StatisticAccumulator<T>::StatisticAccumulator(T sum, T sumSquared, T min, T max, unsigned count)
    : sum_squared_(sumSquared), sum_(sum), min_(min), max_(max), cnt_(count), last_avg_(0)
{}

template <class T>
prefix_ float senf::StatisticAccumulator<T>::stddev()
    const
{
    if (cnt_ == 0)
        return NAN;
    if (cnt_ == 1)
        return 0.0f;
    double _avg (avg());
    // std::max avoid rounding errors, that might cause a sqrt(<0)
    return float(sqrt( ( std::max(0.0, double(sum_squared_) / double( cnt_) ) - (_avg * _avg) )));
}

template <class T>
prefix_ void senf::StatisticAccumulator<T>::clear()
{
    if (cnt_ > 0) {
        last_avg_ = avg();
    }
    cnt_ = 0;
    sum_squared_ = 0;
    sum_ = 0;
    min_ = std::numeric_limits<T>::max();
    max_ = std::numeric_limits<T>::min();  
}

template <class T>
prefix_ void senf::StatisticAccumulator<T>::data(StatisticsData & data_)
    const
{
    if (cnt_ == 0) {
        data_.min = data_.avg = data_.max = last_avg_;
        data_.stddev = NAN;
        data_.cnt = 0;
    } else {
        data_.min = (float) min_;
        data_.avg = avg();
        data_.max = (float) max_;
        data_.stddev = stddev();
        data_.cnt = cnt_;
    }
}

template <class T>
prefix_ senf::StatisticsData senf::StatisticAccumulator<T>::data()
    const
{
    StatisticsData tmp;
    data(tmp);
    return tmp;
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_
