// $Id$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Thorsten Horstmann <thorsten.horstmann@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief StatisticAccumulator inline template implementation */

// Custom includes


#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::StatisticAccumulator<T>

template <class T>
prefix_ T senf::StatisticAccumulator<T>::min()
    const
{
    return min_;
}

template <class T>
prefix_ T senf::StatisticAccumulator<T>::max()
    const
{
    return max_;
}

template <class T>
prefix_ float senf::StatisticAccumulator<T>::avg()
    const
{
    return count_ == 0 ? NAN : (sum_ / float(count_));
}

//template <class T>
//prefix_ senf::Statistics & senf::StatisticAccumulator<T>::statistics()
//{
//    return stats_;
//}

template <class T>
prefix_ float senf::StatisticAccumulator<T>::last_avg()
    const
{
    return last_avg_;
}

template <class T>
prefix_ boost::uint32_t senf::StatisticAccumulator<T>::count()
    const
{
    return count_;
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -U"
// End:
