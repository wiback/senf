// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief TypeIdValue inline non-template implementation */

//#include "TypeIdValue.ih"

// Custom includes
#include "TypeInfo.hh"
#include "senfassert.hh"

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::TypeIdValue::TypeIdValue()
    : p_ (&typeid(void))
{}

prefix_ senf::TypeIdValue::TypeIdValue(std::type_info const & v)
    : p_ (&v)
{}

prefix_ bool senf::TypeIdValue::operator==(TypeIdValue const & other)
    const
{
    return (*p_) == (*other.p_);
}

prefix_ bool senf::TypeIdValue::operator<(TypeIdValue const & other)
    const
{
    return p_->before(*other.p_);
}

prefix_ std::string senf::TypeIdValue::name()
    const
{
    return p_->name();
}

prefix_ std::string senf::TypeIdValue::prettyName()
    const
{
    return senf::prettyName(id());
}

prefix_ std::type_info const & senf::TypeIdValue::id()
    const
{
    SENF_ASSERT(
        p_, "Internal failure: Empty TypeIdValue should have p_ point to typeid(void) not 0");
    return *p_;
}

prefix_ senf::TypeIdValue const senf::typeIdValue()
{
    return TypeIdValue();
}

prefix_ std::ostream & senf::operator<<(std::ostream & os, TypeIdValue const & v)
{
    os << v.prettyName();
    return os;
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
