//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief intrusive_refcount inline template implementation */

//#include "intrusive_refcount.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class S>
prefix_ void senf::intrusive_refcount_base::intrusive_ptr_add_ref()
{
    static_cast<S*>(this)->add_ref();
}

template <class S>
prefix_ void senf::intrusive_refcount_base::intrusive_ptr_release()
{
    if (static_cast<S*>(this)->release()) delete this;
}

template <class Self>
prefix_ void senf::intrusive_ptr_add_ref(intrusive_refcount_t<Self> const * p)
{
    const_cast<intrusive_refcount_t<Self>*>(p)->template intrusive_ptr_add_ref<Self>();
}

template <class Self>
prefix_ void senf::intrusive_ptr_release(intrusive_refcount_t<Self> const * p)
{
    const_cast<intrusive_refcount_t<Self>*>(p)->template intrusive_ptr_release<Self>();
}

template <class Self>
prefix_ senf::intrusive_refcount_t<Self>::intrusive_refcount_t()
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
