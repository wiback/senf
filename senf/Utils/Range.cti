// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Range inline template implementation */

//#include "Range.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Range, class Fn>
prefix_ boost::iterator_range<
        boost::transform_iterator< Fn,
                                   typename boost::range_const_iterator<Range>::type > >
senf::make_transform_range(Range const & range, Fn const & fn)
{
    return boost::make_iterator_range(
        boost::make_transform_iterator(boost::begin(range), fn),
        boost::make_transform_iterator(boost::end(range), fn) );
}

template <class Range, class Fn>
prefix_ boost::iterator_range<
        boost::transform_iterator< Fn,
                                   typename boost::range_iterator<Range>::type > >
senf::make_transform_range(Range & range, Fn const & fn)
{
    return boost::make_iterator_range(
        boost::make_transform_iterator(boost::begin(range), fn),
        boost::make_transform_iterator(boost::end(range), fn) );
}

template <class Range, class Iterator>
prefix_ void senf::copy_range(Range const & range, Iterator const & i)
{
    std::copy(boost::begin(range), boost::end(range), i);
}

template <class Range, class Iterator>
prefix_ void senf::copy_range(Range & range, Iterator const & i)
{
    std::copy(boost::begin(range), boost::end(range), i);
}

template <class Range>
prefix_ bool senf::has_one_elt(Range r)
{
    return ! r.empty() && boost::next(r.begin()) == r.end();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
