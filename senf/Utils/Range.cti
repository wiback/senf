//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Range inline template implementation */

//#include "Range.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Range, class Fn>
prefix_ boost::iterator_range<
        boost::transform_iterator< Fn,
                                   typename boost::range_const_iterator<Range>::type > >
senf::make_transform_range(Range const & range, Fn const & fn)
{
    return boost::make_iterator_range(
        boost::make_transform_iterator(boost::begin(range), fn),
        boost::make_transform_iterator(boost::end(range), fn) );
}

template <class Range, class Fn>
prefix_ boost::iterator_range<
        boost::transform_iterator< Fn,
                                   typename boost::range_iterator<Range>::type > >
senf::make_transform_range(Range & range, Fn const & fn)
{
    return boost::make_iterator_range(
        boost::make_transform_iterator(boost::begin(range), fn),
        boost::make_transform_iterator(boost::end(range), fn) );
}

template <class Range, class Iterator>
prefix_ void senf::copy_range(Range const & range, Iterator const & i)
{
    std::copy(boost::begin(range), boost::end(range), i);
}

template <class Range, class Iterator>
prefix_ void senf::copy_range(Range & range, Iterator const & i)
{
    std::copy(boost::begin(range), boost::end(range), i);
}

template <class Range>
prefix_ bool senf::has_one_elt(Range r)
{
    return ! r.empty() && boost::next(r.begin()) == r.end();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
