// $Id:$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Config inline non-template implementation */

//#include "Config.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// wiback::Config

prefix_ void wiback::Config::probeInterval(senf::ClockService::clock_type interval)
{
    probeInterval_ = interval;
}

prefix_ senf::ClockService::clock_type wiback::Config::probeInterval()
    const
{
    return probeInterval_;
}

prefix_ void wiback::Config::quiet(bool q)
{
    quiet_ = q;
}

prefix_ bool wiback::Config::quiet()
    const
{
    return quiet_;
}

prefix_ void wiback::Config::silent(bool s)
{
    silent_ = s;
}

prefix_ bool wiback::Config::silent()
    const
{
    return silent_;
}

prefix_ void wiback::Config::maxPacketDelay(senf::ClockService::clock_type delay)
{
    maxPacketDelay_ = delay;
}

prefix_ senf::ClockService::clock_type wiback::Config::maxPacketDelay()
    const
{
    return maxPacketDelay_;
}

prefix_ void wiback::Config::maxSchedulingDelay(senf::ClockService::clock_type delay)
{
    maxSchedulingDelay_ = delay;
}

prefix_ senf::ClockService::clock_type wiback::Config::maxSchedulingDelay()
    const
{
    return maxSchedulingDelay_;
}

prefix_ void wiback::Config::burnCycles(unsigned cycles)
{
    burnCycles_ = cycles;
}

prefix_ unsigned wiback::Config::burnCycles()
    const
{
    return burnCycles_;
}

prefix_ void wiback::Config::numPackets(unsigned n)
{
    numPackets_=n;
}

prefix_ unsigned wiback::Config::numPackets()
    const
{
    return numPackets_;
}

prefix_ void wiback::Config::consolePort(unsigned n)
{
    consolePort_ = n;
}

prefix_ void wiback::Config::nodeCoordinates(unsigned id, double latitude, double longitude)
{
    coordinates_.insert(std::make_pair(id, std::make_pair(latitude, longitude)));
}

prefix_ std::pair<double,double> const & wiback::Config::nodeCoordinates(unsigned id)
    const
{
    Coordinates::const_iterator i (coordinates_.find(id));
    if (i == coordinates_.end())
        throw InvalidNodeIdException() << " " << id;
    return i->second;
}

prefix_ unsigned wiback::Config::consolePort()
    const
{
    return consolePort_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -U"
// End:
