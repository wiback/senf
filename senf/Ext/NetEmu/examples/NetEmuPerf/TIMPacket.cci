//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


#include <senf/Utils/senflikely.hh>

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::PacketInterpreterBase::factory_t wiback::TIMPacketType::nextPacketType(packet p)
{
    // it is assumed that a TIM header is always followed by a regular Ethernet frame
    return senf::DataPacket::factory();
}

prefix_ void wiback::TIMPacketType::finalize(packet p)
{
    p->oddSize() << p.size() % 2;
}

prefix_ wiback::TIMPacketType::optional_range wiback::TIMPacketType::nextPacketRange(packet const & p)
{
    return SENF_UNLIKELY(p.data().size() < parser::fixed_bytes) ?
            PacketTypeBase::no_range() :
            optional_range( range(
                    p.data().begin() + parser::fixed_bytes,
                    p.data().end() - ((p.size() % 2) ? 0 : p->oddSize()) ));
}

prefix_ std::int32_t wiback::TIMPacketType::timeStampDiff(std::uint32_t current, std::uint32_t last)
{
    static constexpr std::int32_t maxSeq_     = 0x3fff+1;
    static constexpr std::int32_t threshold_  = maxSeq_/10;

    std::int32_t dist (current - last);

    if (SENF_UNLIKELY(dist + threshold_ < 0))
        return dist + maxSeq_;
    if (SENF_UNLIKELY(dist - (maxSeq_ - threshold_) > 0))
        return dist - maxSeq_;

    return dist;
}

prefix_ std::int32_t wiback::TIMPacketType::seqNoDiff(std::uint32_t current, std::uint32_t last)
{
    static constexpr std::int32_t maxSeq_     = 0xffffff+1;
    static constexpr std::int32_t threshold_  = maxSeq_/10;

    std::int32_t dist (current - last);

    if (SENF_UNLIKELY(dist + threshold_ < 0))
        return dist + maxSeq_;
    if (SENF_UNLIKELY(dist - (maxSeq_ - threshold_) > 0))
        return dist - maxSeq_;

    return dist;
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_
