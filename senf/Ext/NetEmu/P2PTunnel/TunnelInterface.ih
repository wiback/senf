//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief TunnelInterface internal header */

#ifndef IH_SENF_Ext_NetEmu_P2PTunnel_TunnelInterface_
#define IH_SENF_Ext_NetEmu_P2PTunnel_TunnelInterface_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace emu {

    class TunnelInterfaceBase;

namespace detail {

    template <class Controller> struct TunnelInterfaceNet;

    template <class Controller>
    class TunnelIOHelper
    {
    public:
        TunnelIOHelper(TunnelControllerBase & ctrl, TunnelInterfaceNet<Controller> const & tif);

        // implement PPI Source-Reader / Sink-Writer API
        typedef TunnelControllerBase::Handle Handle;
        typedef TunnelControllerBase::PacketType PacketType;

        PacketType operator()(Handle & handle);
        bool operator()(Handle & handle, PacketType const & packet);

    private:
        TunnelControllerBase & ctrl_;
        TunnelInterfaceNet<Controller> const & tunnelIface_;
    };


    /** \brief Internal: Tunnel Interface PPI network */
    template <class Controller>
    struct TunnelInterfaceNet
    {
        UDPv6ClientSocketHandle socket;
        Controller tunnelCtrl;

        ppi::module::ActiveSocketSource<TunnelIOHelper<Controller> > source;
        ppi::module::PassiveSocketSink<TunnelIOHelper<Controller> > sink;

        ppi::connector::ActiveOutputJack<EthernetPacket> netOutput;
        ppi::connector::PassiveInputJack<EthernetPacket> netInput;

        unsigned mtu_;
        unsigned maxBurst_;
        bool promisc_;
        bool annotationMode_;

        TunnelInterfaceNet(typename Controller::Interface & interface);

        void assignSocket(UDPv6ClientSocketHandle socket);

        unsigned mtu() const;
        void mtu(unsigned v);

        void _promisc(bool p);
        bool _promisc() const;

        void _annotationMode(bool a);
        bool _annotationMode() const;
        
        unsigned maxBurst() const;
        void maxBurst(unsigned v);

        unsigned rcvBuf();
        void rcvBuf(unsigned);
        unsigned sndBuf();
        void sndBuf(unsigned);
    };

    typedef TunnelInterfaceNet<TunnelServerController> TunnelServerInterfaceNet;
    typedef TunnelInterfaceNet<TunnelClientController> TunnelClientInterfaceNet;

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
