// $Id:$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Mathias Kretschmer <mathias.kretschmer@fokus.fraunhofer.de>

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::PacketInterpreterBase::factory_t senf::emu::TunnelHeaderPacketType::nextPacketType(packet p)
{
    // it is assumed that a TunnelHeader header is always followed by a regular Ethernet frame
    return senf::EthernetPacket::factory();
}

prefix_ void senf::emu::TunnelHeaderPacketType::finalize(packet p)
{
}

prefix_ std::int32_t senf::emu::TunnelHeaderPacketType::seqNoDiff(std::uint32_t current, std::uint32_t last)
{
    static constexpr std::int32_t maxSeq_     = 0x1ffff+1;
    static constexpr std::int32_t threshold_  = maxSeq_/10;
    
    std::int32_t dist(current - last);

    if (SENF_UNLIKELY(dist + threshold_ < 0))
        return dist + maxSeq_;
    if (SENF_UNLIKELY(dist - (maxSeq_ - threshold_) > 0))
        return dist - maxSeq_;
    
    return dist;
}


///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_
