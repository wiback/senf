// $Id:$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Thorsten Horstmann <tho@berlios.de>

/** \file
    \brief REDQueue inline non-template implementation */

//#include "REDQueue.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////
prefix_ bool senf::emu::REDQueue::v_enqueue(senf::Packet const & packet, bool force)
{
    if (!force and (queueSize_ > lowThresh_)) {
        if ( (boost::uint32_t(rand()) % (queueLimit_ - lowThresh_ + 1)) <= (queueSize_ - lowThresh_) ) {
            packetsDroppedTotal_++;
            return false;  // no additional packet added to queue
        }
    }

    queue_.emplace(packet);
    queueSize_ += packet.size();
    return true;
}

prefix_ void senf::emu::REDQueue::v_pop()
{
    if (SENF_LIKELY(frontPktSize_ > 0)) {
        queueSize_ -= frontPktSize_;
        queue_.pop();
        frontPktSize_ = 0;
    }
}

prefix_ unsigned senf::emu::REDQueue::v_peek(unsigned maxSize)
    const
{
    if (!queue_.empty() and (queue_.front().size() <= maxSize))
        return frontPktSize_ = queue_.front().size();
    return 0;
}

prefix_ senf::Packet const & senf::emu::REDQueue::v_front()
    const
{
    return queue_.front();
}

prefix_ bool senf::emu::REDQueue::v_empty()
    const
{
    return queue_.empty();
}

prefix_ unsigned senf::emu::REDQueue::v_size()
    const
{
    return queueSize_;
}

prefix_ void senf::emu::REDQueue::incrDropped()
{
    packetsDroppedTotal_++;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
