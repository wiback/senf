//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief MonitorDataFilter non-inline template implementation */

// Custom includes
#include <linux/filter.h>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <typename BSDSocket>
prefix_ void senf::emu::MonitorDataFilter::filterMonitorTxFrames(BSDSocket sock)
{
    // set up the BPF to tx frames inside the kernel
     // BPF: tcpdump -i wiback-mon2 -dd '(radio[4] & 0x01 != 0)'  (TSFT present ?)
     static struct sock_filter BPF_code[] = {
         { 0x30, 0, 0, 0x00000004 },
         { 0x45, 0, 1, 0x00000001 },
         { 0x06, 0, 0, 0x0000ffff },
         { 0x06, 0, 0, 0x00000000 }
     };
     sock.protocol().attachSocketFilter(BPF_code);
}

template <typename BSDSocket>
prefix_ void senf::emu::MonitorDataFilter::filterMonitorRxFrames(BSDSocket sock)
{
    // set up the BPF to tx frames inside the kernel
     // BPF: tcpdump -i wiback-mon2 -dd '(radio[4] & 0x01 == 0)'  (TSFT NOT present ?)
     static struct sock_filter BPF_code[] = {
         { 0x30, 0, 0, 0x00000004 },
         { 0x45, 0, 1, 0x00000001 },
         { 0x06, 0, 0, 0x00000000 },
         { 0x06, 0, 0, 0x00040000 }
     };
     sock.protocol().attachSocketFilter(BPF_code);
}

template <typename BSDSocket>
prefix_ void senf::emu::MonitorDataFilter::filterMonitorTxAndCtlFrames(BSDSocket sock)
{
    // set up the BPF to filter wlan ctl and tx frames inside the kernel
    // BPF: tcpdump -i wiback-mon2 -dd '(not wlan type ctl) and (radio[4] & 0x01 != 0)'  (TSFT present ?)
    static struct sock_filter BPF_code[] = {
        { 0x30, 0, 0, 0x00000003 },
        { 0x64, 0, 0, 0x00000008 },
        { 0x07, 0, 0, 0x00000000 },
        { 0x30, 0, 0, 0x00000002 },
        { 0x4c, 0, 0, 0x00000000 },
        { 0x07, 0, 0, 0x00000000 },
        { 0x50, 0, 0, 0x00000000 },
        { 0x54, 0, 0, 0x0000000c },
        { 0x15, 3, 0, 0x00000004 },
        { 0x30, 0, 0, 0x00000004 },
        { 0x45, 0, 1, 0x00000001 },
        { 0x06, 0, 0, 0x0000ffff },
        { 0x06, 0, 0, 0x00000000 }
    };
    sock.protocol().attachSocketFilter(BPF_code);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
