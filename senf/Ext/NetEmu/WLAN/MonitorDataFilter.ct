// $Id:$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Stefan Bund <g0dil@berlios.de>

/** \file
    \brief MonitorDataFilter non-inline template implementation */

// Custom includes
#include <linux/filter.h>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <typename BSDSocket>
prefix_ void senf::emu::MonitorDataFilter::filterMonitorTxFrames(BSDSocket sock)
{
    // set up the BPF to tx frames inside the kernel
     // BPF: tcpdump -i wiback-mon2 -dd '(radio[4] & 0x01 != 0)'  (TSFT present ?)
     static struct sock_filter BPF_code[] = {
         { 0x30, 0, 0, 0x00000004 },
         { 0x45, 0, 1, 0x00000001 },
         { 0x06, 0, 0, 0x0000ffff },
         { 0x06, 0, 0, 0x00000000 }
     };
     sock.protocol().attachSocketFilter(BPF_code);
}

template <typename BSDSocket>
prefix_ void senf::emu::MonitorDataFilter::filterMonitorTxAndCtlFrames(BSDSocket sock)
{
    // set up the BPF to filter wlan ctl and tx frames inside the kernel
    // BPF: tcpdump -i wiback-mon2 -dd '(not wlan type ctl) and (radio[4] & 0x01 != 0)'  (TSFT present ?)
    static struct sock_filter BPF_code[] = {
        { 0x30, 0, 0, 0x00000003 },
        { 0x64, 0, 0, 0x00000008 },
        { 0x07, 0, 0, 0x00000000 },
        { 0x30, 0, 0, 0x00000002 },
        { 0x4c, 0, 0, 0x00000000 },
        { 0x07, 0, 0, 0x00000000 },
        { 0x50, 0, 0, 0x00000000 },
        { 0x54, 0, 0, 0x0000000c },
        { 0x15, 3, 0, 0x00000004 },
        { 0x30, 0, 0, 0x00000004 },
        { 0x45, 0, 1, 0x00000001 },
        { 0x06, 0, 0, 0x0000ffff },
        { 0x06, 0, 0, 0x00000000 }
    };
    sock.protocol().attachSocketFilter(BPF_code);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
