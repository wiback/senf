//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EmulatedWLANInterface internal header */

#ifndef IH_SENF_Ext_NetEmu_WLAN_EmulatedWLANInterface_
#define IH_SENF_Ext_NetEmu_WLAN_EmulatedWLANInterface_ 1

// Custom includes
#include <senf/Packets/80211Bundle/RadiotapPacket.hh>
#include <senf/Packets/80211Bundle/WLANPacket.hh>
#include <senf/Ext/NetEmu/Packets.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace emu {

    class EmulatedWLANInterface;

namespace detail {

    /** \brief Internal: Beacon generator for emulated WLAN interface*/
    class EmulatedWLANBeaconGenerator
        : public ppi::module::Module
    {
        SENF_PPI_MODULE(EmulatedWLANBeaconGenerator);
    public:
        ppi::connector::ActiveOutput<> output;

        explicit EmulatedWLANBeaconGenerator(EmulatedWLANInterface & iface);

        void beaconInterval(ClockService::clock_type interval);
        ClockService::clock_type beaconInterval();

    private:
        void tick();
        void init();

        ppi::IntervalTimer timer_;
        EmulatedWLANInterface & iface_;
        WLANPacket_MgtFrame beacon_;
    };

    /** \brief Internal: Input filter of emulated WLAN interface */
    class EmulatedWLANReceiveFilter
        : public ppi::module::Module
    {
        SENF_PPI_MODULE(EmulatedWLANReceiveFilter);
    public:
        ppi::connector::PassiveInput<WLANPacketHeader> input;
        ppi::connector::ActiveOutput<EthernetPacket> output;

        explicit EmulatedWLANReceiveFilter(EmulatedWLANInterface & iface);

    private:
        void request();

        EmulatedWLANInterface & iface_;
    };

    /** \brief Internal: Transmit filter of emulated WLAN interface */
    class EmulatedWLANTransmitFilter
        : public ppi::module::Module
    {
        SENF_PPI_MODULE(EmulatedWLANTransmitFilter);
    public:
        ppi::connector::PassiveInput<EthernetPacket> input;
        ppi::connector::ActiveOutput<WLANPacketHeader> output;
        ppi::connector::PassiveInput<WLANPacket_MgtFrame> beaconInput;

        explicit EmulatedWLANTransmitFilter(EmulatedWLANInterface & iface);

    private:
        void request();
        void beaconRequest();

        EmulatedWLANInterface & iface_;
    };

    /** \brief Internal: Internal PPI Network of emulated WLAN interface */
    struct EmulatedWLANInterfaceNet
    {
        // Input chain
        EmulatedWLANReceiveFilter receiveFilter_;

        // Output chain
        EmulatedWLANTransmitFilter transmitFilter_;
        EmulatedWLANBeaconGenerator beaconGenerator_;

        //-/////////////////////////////////////////////////////////////////////////////////////////

        ppi::connector::PassiveInputJack<WLANPacketHeader> receiveInput;
        ppi::connector::ActiveOutputJack<EthernetPacket> receiveOutput;

        ppi::connector::PassiveInputJack<EthernetPacket> transmitInput;
        ppi::connector::ActiveOutputJack<WLANPacketHeader> transmitOutput;

        EmulatedWLANInterfaceNet();

        EmulatedWLANInterface & self();
        EmulatedWLANInterface const & self() const;

        void beaconInterval(ClockService::clock_type interval);
        ClockService::clock_type beaconInterval();
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
