//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief HardwareWLANInterface internal header */

#ifndef IH_SENF_Ext_NetEmu_WLAN_HardwareWLANInterface_
#define IH_SENF_Ext_NetEmu_WLAN_HardwareWLANInterface_ 1

// Custom includes
#include <senf/Socket/Protocols/Raw/MMapPacketSocketHandle.hh>
#include <senf/Packets/DefaultBundle/EthernetPacket.hh>
#include <senf/Packets/80211Bundle/RadiotapPacket.hh>
#include <senf/PPI/QueueSocketSourceSink.hh>
#include "../Ethernet/EthernetAnnotator.hh"
#include "MonitorDataFilter.hh"
#include "TSFTHistogram.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace emu {

    class HardwareWLANInterface;

namespace detail {

    /** \brief Internal: Hardware WLAN interface PPI network */
    struct HardwareWLANInterfaceNet
    {
        ConnectedMMapPacketSocketHandle socket;
        ppi::module::ActiveQueueSocketSource<EthernetPacket> source;
        ppi::module::PassiveQueueSocketSink<> sink;
        EthernetAnnotator annotatorRx_;
        EthernetAnnotator annotatorTx_;

        ConnectedMMapReadPacketSocketHandle monSocket;
        ppi::module::ActiveQueueSocketSource<RadiotapPacket> monSource;
        MonitorDataFilter monitorDataFilter;

        ppi::connector::ActiveOutputJack<EthernetPacket> netOutput;
        ppi::connector::PassiveInputJack<EthernetPacket> netInput;

        HardwareWLANInterfaceNet();

        HardwareWLANInterface & self();
        HardwareWLANInterface const & self() const;

        void assignDataSocket(ConnectedMMapPacketSocketHandle & socket);
        void assignMonitorSocket(ConnectedMMapReadPacketSocketHandle & monSocket);

        unsigned rcvBuf();
        void rcvBuf(unsigned);
        unsigned sndBuf();
        void sndBuf(unsigned);
        void flush();

        void dataSource(bool on);
        
        TSFTHistogram & tsftHistogram();
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
