// $Id:$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Thorsten Horstmann <thorsten.horstmann@fokus.fraunhofer.de>

/** \file
    \brief WirelessNLController non-inline template implementation  */

// Custom includes
#include <boost/range.hpp>
#include <boost/range/concepts.hpp>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::WirelessNLController::IbssJoinParameters

template <typename ForwardReadableRange>
prefix_ prefix_ senf::emu::WirelessNLController::IbssJoinParameters::ptr senf::emu::WirelessNLController::IbssJoinParameters::informationElements(ForwardReadableRange const & ies)
{
    std::copy( boost::begin(ies), boost::end(ies), back_inserter(ies_));
    return shared_from_this();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::WirelessNLController::MeshJoinParameters

template <typename ForwardReadableRange>
prefix_ prefix_ senf::emu::WirelessNLController::MeshJoinParameters::ptr senf::emu::WirelessNLController::MeshJoinParameters::informationElements(ForwardReadableRange const & ies)
{
    std::copy( boost::begin(ies), boost::end(ies), back_inserter(ies_));
    return shared_from_this();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::WirelessNLController::NetlinkEvent<EventType>

template <typename EventType>
prefix_ senf::emu::WirelessNLController::NetlinkEvent<EventType>::NetlinkEvent(WirelessNLController & wnlc)
    : wnlc_(wnlc)
{}

template <typename EventType>
prefix_ void senf::emu::WirelessNLController::NetlinkEvent<EventType>::enable()
{
    wnlc_.join_multicastGroup(EventType::MCGroup);
}

template <typename EventType>
prefix_ void senf::emu::WirelessNLController::NetlinkEvent<EventType>::disable()
{
    wnlc_.leave_multicastGroup(EventType::MCGroup);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::WirelessNLController

template <typename ForwardReadableRange>
prefix_ void senf::emu::WirelessNLController::trigger_scan(ForwardReadableRange const & frequencies)
{
    std::set<frequency_type> freqs;
    std::copy(boost::begin(frequencies), boost::end(frequencies), std::back_inserter(freqs));
    do_trigger_scan(freqs);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_
