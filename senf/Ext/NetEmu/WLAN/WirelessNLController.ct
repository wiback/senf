//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief WirelessNLController non-inline template implementation  */

// Custom includes
#include <boost/range.hpp>
#include <boost/range/concepts.hpp>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::WirelessNLController::JoinParameters

template <typename ForwardReadableRange>
prefix_ prefix_ senf::emu::WirelessNLController::JoinParameters::ptr senf::emu::WirelessNLController::JoinParameters::informationElements(ForwardReadableRange const & ies)
{
    std::copy( boost::begin(ies), boost::end(ies), back_inserter(ies_));
    return shared_from_this();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::WirelessNLController::NetlinkEvent<EventType>

template <typename EventType>
prefix_ senf::emu::WirelessNLController::NetlinkEvent<EventType>::NetlinkEvent(WirelessNLController & wnlc)
    : wnlc_(wnlc)
{}

template <typename EventType>
prefix_ void senf::emu::WirelessNLController::NetlinkEvent<EventType>::enable()
{
    wnlc_.join_multicastGroup(EventType::MCGroup);
}

template <typename EventType>
prefix_ void senf::emu::WirelessNLController::NetlinkEvent<EventType>::disable()
{
    wnlc_.leave_multicastGroup(EventType::MCGroup);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::WirelessNLController

template <typename ForwardReadableRange>
prefix_ void senf::emu::WirelessNLController::trigger_scan(ForwardReadableRange const & frequencies)
{
    std::set<frequency_type> freqs;
    std::copy(boost::begin(frequencies), boost::end(frequencies), std::back_inserter(freqs));
    do_trigger_scan(freqs);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_
