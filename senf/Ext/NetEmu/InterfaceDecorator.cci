//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief InterfaceDecorator inline non-template implementation */

//#include "InterfaceDecorator.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::ReceiverDecorator

prefix_ senf::emu::ReceiverDecorator::~ReceiverDecorator()
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::TransmitterDecorator

prefix_ senf::emu::TransmitterDecorator::~TransmitterDecorator()
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::InterfaceDecorator

prefix_ senf::emu::InterfaceDecorator::~InterfaceDecorator()
{}

prefix_ senf::emu::Interface & senf::emu::InterfaceDecorator::interface()
{
    return interface_;
}

prefix_ senf::emu::Interface const & senf::emu::InterfaceDecorator::interface()
    const
{
    return interface_;
}

prefix_ senf::emu::Interface * senf::emu::InterfaceDecorator::operator->()
{
    return &interface_;
}

prefix_ senf::emu::Interface const * senf::emu::InterfaceDecorator::operator->()
    const
{
    return &interface_;
}

prefix_ senf::emu::ReceiverDecorator & senf::emu::InterfaceDecorator::receiverDecorator()
{
    try {
        return dynamic_cast<ReceiverDecorator &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

prefix_ senf::emu::ReceiverDecorator const & senf::emu::InterfaceDecorator::receiverDecorator()
    const
{
    try {
        return dynamic_cast<ReceiverDecorator const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

prefix_ senf::emu::TransmitterDecorator & senf::emu::InterfaceDecorator::transmitterDecorator()
{
    try {
        return dynamic_cast<TransmitterDecorator &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

prefix_ senf::emu::TransmitterDecorator const &
senf::emu::InterfaceDecorator::transmitterDecorator()
    const
{
    try {
        return dynamic_cast<TransmitterDecorator const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

prefix_ bool senf::emu::InterfaceDecorator::canReceive()
    const
{
    return dynamic_cast<ReceiverDecorator const *>(this);
}

prefix_ bool senf::emu::InterfaceDecorator::canTransmit()
    const
{
    return dynamic_cast<TransmitterDecorator const *>(this);
}

prefix_ senf::emu::InterfaceDecorator::InterfaceDecorator(Interface & interface)
    : interface_(interface)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
