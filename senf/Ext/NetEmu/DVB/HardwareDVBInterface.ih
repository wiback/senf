//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief HardwareDVBInterface internal header */

#ifndef IH_SENF_Ext_NetEmu_Ethernet_HardwareDVBInterface_
#define IH_SENF_Ext_NetEmu_Ethernet_HardwareDVBInterface_ 1

// Custom includes
#include <senf/Socket/Protocols/Raw/PacketSocketHandle.hh>
#include <senf/Socket/Protocols/DVB.hh>
#include <senf/Packets/MPEGDVBBundle/MPESection.hh>
#include <senf/PPI/SocketSource.hh>
#include <senf/PPI/SocketSink.hh>
#include "ForwardSwitch.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace emu {

    class HardwareDVBSenderInterface;
    class HardwareDVBReceiverInterface;

namespace detail {

    struct HardwareDVBSenderInterfaceNet
    {
        HardwareDVBSenderInterfaceNet(std::string const & iface);

        PacketSocketHandle socket;
        ppi::module::PassiveSocketSink<ppi::TargetDgramWriter<PacketSocketHandle> > sink;
        ForwardSwitch forwardSwitch;
    };


    class ActiveDVBSocketSource
        : public ppi::module::Module
    {
        SENF_PPI_MODULE( ActiveDVBSocketSource );
        SENF_LOG_CLASS_AREA();

    public:
        ppi::connector::ActiveOutput<EthernetPacket> output;

        typedef ppi::DgramReader<MPESection> Reader;
        typedef Reader::Handle Handle;

        ActiveDVBSocketSource(Handle handle);

    private:
        void read(ppi::IOEvent::Event event);
        void outputMPE2Eth(MPESection mpei);

        Handle handle_;
        Reader reader_;
        ppi::IOEvent event_;
    };

    class DVBReceiverInterfaceAnnotator
        : public senf::ppi::module::Module
    {
        SENF_PPI_MODULE(DVBReceiverInterfaceAnnotator);

    public:
        ppi::connector::PassiveInput<> input;
        ppi::connector::ActiveOutput<> output;

        explicit DVBReceiverInterfaceAnnotator(HardwareDVBReceiverInterface const & interface, DVBSocketController const & dvbSocketCtrl);

    private:
        void request();

        HardwareDVBReceiverInterface const & interface_;
        DVBSocketController const & dvbSocketCtrl_;
        senf::ClockService::clock_type lastSNRUpdate_;
        unsigned snr_;
    };


    struct HardwareDVBReceiverInterfaceNet
    {
        HardwareDVBReceiverInterfaceNet();
        void initHandle();

        HardwareDVBReceiverInterface const & self() const;

        DVBDemuxSectionHandle dvbSourceHandle;
        DVBDemuxPESHandle dvbControlHandle;
        DVBDvrHandle dvbStuffingHandle;
        ActiveDVBSocketSource dvbSource;
        DVBReceiverInterfaceAnnotator annotator;
        ForwardSwitch forwardSwitch;
    };


}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif
