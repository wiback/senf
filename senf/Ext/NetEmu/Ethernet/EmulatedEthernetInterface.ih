//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EmulatedEthernetInterface internal header */

#ifndef IH_SENF_Ext_NetEmu_Ethernet_EmulatedEthernetInterface_
#define IH_SENF_Ext_NetEmu_Ethernet_EmulatedEthernetInterface_ 1

// Custom includes
#include <senf/Ext/NetEmu/Packets.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace emu {

    class EmulatedEthernetInterface;

namespace detail {


    /** \brief Internal: Input filter of emulated Ethernet interface */
    class EmulatedEthernetReceiveFilter
        : public ppi::module::Module
    {
        SENF_PPI_MODULE(EmulatedEthernetReceiveFilter);
    public:
        ppi::connector::PassiveInput<EthernetPacketHeader> input;
        ppi::connector::ActiveOutput<EthernetPacket> output;

        explicit EmulatedEthernetReceiveFilter(EmulatedEthernetInterface & iface);

    private:
        void request();
        EmulatedEthernetInterface & iface_;
    };

    /** \brief Internal: Transmit filter of emulated Ethernet interface */
    class EmulatedEthernetTransmitFilter
        : public ppi::module::Module
    {
        SENF_PPI_MODULE(EmulatedEthernetTransmitFilter);
    public:
        ppi::connector::PassiveInput<EthernetPacket> input;
        ppi::connector::ActiveOutput<EthernetPacketHeader> output;

        explicit EmulatedEthernetTransmitFilter(EmulatedEthernetInterface & iface);

    private:
        void request();

        EmulatedEthernetInterface & iface_;
    };

    /** \brief Internal: Internal PPI Network of emulated Ethernet interface */
    struct EmulatedEthernetInterfaceNet
    {
        // Input chain
        EmulatedEthernetReceiveFilter receiveFilter_;

        // Output chain
        EmulatedEthernetTransmitFilter transmitFilter_;

        //-/////////////////////////////////////////////////////////////////////////////////////////

        ppi::connector::PassiveInputJack<EthernetPacketHeader> receiveInput;
        ppi::connector::ActiveOutputJack<EthernetPacket> receiveOutput;

        ppi::connector::PassiveInputJack<EthernetPacket> transmitInput;
        ppi::connector::ActiveOutputJack<EthernetPacketHeader> transmitOutput;

        EmulatedEthernetInterfaceNet();

        EmulatedEthernetInterface & self();
        EmulatedEthernetInterface const & self() const;

    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
