// $Id:$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Stefan Bund <g0dil@berlios.de>

/** \file
    \brief InterfaceAPI inline template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::detail::InterfaceAccess<Interface>

template <class Interface>
prefix_ senf::emu::detail::InterfaceAccess<Interface>::~InterfaceAccess()
{}

template <class Interface>
prefix_ Interface & senf::emu::detail::InterfaceAccess<Interface>::interface()
{
    try {
        return dynamic_cast<Interface &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Interface>
prefix_ Interface const & senf::emu::detail::InterfaceAccess<Interface>::interface()
    const
{
    try {
        return dynamic_cast<Interface const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::detail::CommfaceAccess<Receiver,Transmitter>

template <class Receiver, class Transmitter>
prefix_ senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::~CommfaceAccess()
{}

template <class Receiver, class Transmitter>
prefix_ Receiver & senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::receiver()
{
    try {
        return dynamic_cast<Receiver &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Receiver, class Transmitter>
prefix_ Receiver const & senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::receiver()
    const
{
    try {
        return dynamic_cast<Receiver const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Receiver, class Transmitter>
prefix_ Transmitter & senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::transmitter()
{
    try {
        return dynamic_cast<Transmitter &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Receiver, class Transmitter>
prefix_ Transmitter const &
senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::transmitter()
    const
{
    try {
        return dynamic_cast<Transmitter const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
