//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief InterfaceAPI inline template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::detail::InterfaceAccess<Interface>

template <class Interface>
prefix_ senf::emu::detail::InterfaceAccess<Interface>::~InterfaceAccess()
{}

template <class Interface>
prefix_ Interface & senf::emu::detail::InterfaceAccess<Interface>::interface()
{
    try {
        return dynamic_cast<Interface &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Interface>
prefix_ Interface const & senf::emu::detail::InterfaceAccess<Interface>::interface()
    const
{
    try {
        return dynamic_cast<Interface const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::detail::CommfaceAccess<Receiver,Transmitter>

template <class Receiver, class Transmitter>
prefix_ senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::~CommfaceAccess()
{}

template <class Receiver, class Transmitter>
prefix_ Receiver & senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::receiver()
{
    try {
        return dynamic_cast<Receiver &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Receiver, class Transmitter>
prefix_ Receiver const & senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::receiver()
    const
{
    try {
        return dynamic_cast<Receiver const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Receiver, class Transmitter>
prefix_ Transmitter & senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::transmitter()
{
    try {
        return dynamic_cast<Transmitter &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

template <class Receiver, class Transmitter>
prefix_ Transmitter const &
senf::emu::detail::CommfaceAccess<Receiver,Transmitter>::transmitter()
    const
{
    try {
        return dynamic_cast<Transmitter const &>(*this);
    }
    SENF_WRAP_EXC(std::bad_cast)
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
