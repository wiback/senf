// $Id:$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Packets inline non-template implementation */

// Custom includes
#include <senf/Packets/DefaultBundle/EthernetPacket.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////
//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::EmulatedWirelessPacketHeaderType

prefix_ senf::emu::EmulatedWirelessPacketHeaderType::key_t
senf::emu::EmulatedWirelessPacketHeaderType::nextPacketKey(packet p)
{
    return p->interfaceType();
}

prefix_ void senf::emu::EmulatedWirelessPacketHeaderType::finalize(packet p)
{
    p->interfaceType() << key(p.next(senf::nothrow));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu::PacketHeaderType

prefix_ senf::emu::PacketHeaderType::key_t senf::emu::PacketHeaderType::nextPacketKey(packet p)
{
   return p->interfaceType();
}

prefix_ void senf::emu::PacketHeaderType::finalize(packet p)
{
    p->interfaceType() << key(p.next(senf::nothrow));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu:::DVBPacketHeaderType

prefix_ senf::emu::DVBPacketHeaderType::factory_t
senf::emu::DVBPacketHeaderType::nextPacketType(packet p)
{
    return EthernetPacket::factory();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::emu:::EthernetPacketHeaderType

prefix_ senf::emu::EthernetPacketHeaderType::factory_t
senf::emu::EthernetPacketHeaderType::nextPacketType(packet p)
{
    return EthernetPacket::factory();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
