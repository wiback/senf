// $Id:$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//       Christian Niephaus <cni@berlios.de>

/** \file
    \brief TAPEthernetInterface internal header */

#ifndef IH_SENF_Ext_NetEmu_TAPEthernetInterface_
#define IH_SENF_Ext_NetEmu_TAPEthernetInterface_ 1

// Custom includes
#include <senf/Socket/Protocols/Raw/TunTapSocketHandle.hh>
#include <senf/PPI/SocketSink.hh>
#include <senf/PPI/Jack.hh>
#include <senf/Ext/NetEmu/config.hh>
#include "TAPAnnotator.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace emu {

    class TAPEthernetInterface;

namespace detail {
   
    /** \brief Internal: Hardware Ethernet interface PPI network */
    struct TAPEthernetInterfaceNet
    {
        TapSocketHandle socket;
        TapSocketHandle socketPVID;
        std::string dev_;
        EthernetController ctrl_;
        senf::ppi::module::ActiveSocketSource<senf::ppi::DgramReader<EthernetPacket, SENF_EMU_MAXMTU> > source;
        senf::ppi::module::PassiveSocketSink<> sink;
 
        TAPAnnotator annotator_;
        
        ppi::connector::ActiveOutputJack<EthernetPacket> netOutput;
        ppi::connector::PassiveInputJack<EthernetPacket> netInput;

        TAPEthernetInterfaceNet(std::string const & device);

        TAPEthernetInterface & self();
        TAPEthernetInterface const & self() const;

        void assignSockets(bool on, std::uint16_t pvid = std::uint16_t(-1));
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
