//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief MultiConnectorMixin inline template implementation */

#include "MultiConnectorMixin.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::detail::MultiConnectorWrapper<Module,Connector>

template <class Module, class Connector>
prefix_ void senf::ppi::module::detail::MultiConnectorWrapper<Module, Connector>::v_disconnected()
{
    Connector::v_disconnected();
    static_cast<Module&>(this->module()).disconnected(*this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::connectors()
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ const &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
connectors()
    const
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
connectorDestroy(ConnectorType const &)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::connectors()
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ ContainerType_ const &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::connectors()
    const
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::
connectorDestroy(ConnectorType const &)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,void>

template <class Self_, class ConnectorType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,void>::
disconnected(ConnectorType_ const & c)
{
    static_cast<Self_*>(this)->connectorDestroy(&c);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN

// Include 'Implementation' from MultiConnectorMixin.mpp
#define BOOST_PP_ITERATION_PARAMS_1 (4, ( \
            0, \
            SENF_MULTI_CONNECTOR_MAX_ARGS, \
            SENF_ABSOLUTE_INCLUDE_PATH(PPI/MultiConnectorMixin.mpp), \
            3 ))
#include BOOST_PP_ITERATE()

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
