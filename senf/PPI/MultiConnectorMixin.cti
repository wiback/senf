// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief MultiConnectorMixin inline template implementation */

#include "MultiConnectorMixin.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::detail::MultiConnectorWrapper<Module,Connector>

template <class Module, class Connector>
prefix_ void senf::ppi::module::detail::MultiConnectorWrapper<Module, Connector>::v_disconnected()
{
    Connector::v_disconnected();
    static_cast<Module&>(this->module()).disconnected(*this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::connectors()
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ const &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
connectors()
    const
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
connectorDestroy(ConnectorType const &)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::connectors()
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ ContainerType_ const &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::connectors()
    const
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::
connectorDestroy(ConnectorType const &)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,void>

template <class Self_, class ConnectorType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,void>::
disconnected(ConnectorType_ const & c)
{
    static_cast<Self_*>(this)->connectorDestroy(&c);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN

// Include 'Implementation' from MultiConnectorMixin.mpp
#define BOOST_PP_ITERATION_PARAMS_1 (4, ( \
            0, \
            SENF_MULTI_CONNECTOR_MAX_ARGS, \
            SENF_ABSOLUTE_INCLUDE_PATH(PPI/MultiConnectorMixin.mpp), \
            3 ))
#include BOOST_PP_ITERATE()

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
