// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief MultiConnectorMixin inline template implementation */

#include "MultiConnectorMixin.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::detail::MultiConnectorWrapper<Module,Connector>

template <class Module, class Connector>
prefix_ void senf::ppi::module::detail::MultiConnectorWrapper<Module, Connector>::v_disconnected()
{
    Connector::v_disconnected();
    static_cast<Module&>(this->module()).disconnected(*this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::connectors()
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ const &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
connectors()
    const
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
connectorDestroy(ConnectorType const &)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::connectors()
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ ContainerType_ const &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::connectors()
    const
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::
connectorDestroy(ConnectorType const &)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,void>

template <class Self_, class ConnectorType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,void>::
disconnected(ConnectorType_ const & c)
{
    static_cast<Self_*>(this)->connectorDestroy(&c);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN

// Include 'Implementation' from MultiConnectorMixin.mpp
#define BOOST_PP_ITERATION_PARAMS_1 (4, ( \
            0, \
            SENF_MULTI_CONNECTOR_MAX_ARGS, \
            SENF_ABSOLUTE_INCLUDE_PATH(PPI/MultiConnectorMixin.mpp), \
            3 ))
#include BOOST_PP_ITERATE()

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
