// $Id$
//
// Copyright (C) 2009 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief MultiConnectorMixin inline template implementation */

//#include "MultiConnectorMixin.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::connectors()
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ ContainerType_ const &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
connectors()
    const
{
    return connectors_;
}

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ ContainerType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::connectors()
{
    return connectors_;
}

#ifdef DOXYGEN

// Only for exposition
// Other implementations with 0..SENF_MULTI_CONNECTOR_MAX_ARGS arguments accordingly

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
template <class A1>
prefix_ ConnectorType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
newConnector(A1 const & a1)
{
    std::auto_ptr<ConnectorType_> conn (new ConnectorType_);
    KeyType_ key (static_cast<Self_*>(this)->connectorSetup(*conn, a1));
    return * connectors_.insert(key, conn).first->second;
}

template <class Self_, class ConnectorType_, class ContainerType_>
template <class A1>
prefix_ ConnectorType_ &
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::
newConnector(A1 const & a1)
{
    connectors_.push_back(new ConnectorType_);
    ConnectorType_ & conn (connectors_.back());
    try { static_cast<Self_*>(this)->connectorSetup(conn , a1); }
    catch (...) { connectors_.pop_back(); throw; }
    return conn;
}

template <class Source, class Target , class A1>
typename boost::enable_if<
    boost::is_base_of<senf::ppi::connector::OutputConnector, typename Source::ConnectorType>,
    typename Source::ConnectorType & >::type
senf::ppi::connect(Source & source, Target & target , A1 const & a1)
{
    connect(source.newConnector(a1), target);
}

template <class Source, class Target , class A1>
typename boost::enable_if<
    boost::is_base_of<senf::ppi::connector::InputConnector, typename Target::ConnectorType>,
    typename Target::ConnectorType & >::type
senf::ppi::connect(Source & source, Target & target , A1 const & a1)
{
    connect(source, target.newConnector(a1));
}

#else

// Include 'Implementation' from MultiConnectorMixin.mpp
#define BOOST_PP_ITERATION_PARAMS_1 (4, ( \
            0, \
            SENF_MULTI_CONNECTOR_MAX_ARGS, \
            SENF_ABSOLUTE_INCLUDE_PATH(PPI/MultiConnectorMixin.mpp), \
            3 ))
#include BOOST_PP_ITERATE()

// Include 'senf::ppi::detail implementation' from MultiConnectorMixin.mpp
#define BOOST_PP_ITERATION_PARAMS_1 (4, ( \
            0, \
            SENF_MULTI_CONNECTOR_MAX_ARGS2,                           \
            SENF_ABSOLUTE_INCLUDE_PATH(PPI/MultiConnectorMixin.mpp), \
            7 ))
#include BOOST_PP_ITERATE()

#endif

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
