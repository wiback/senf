// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief MultiConnectorMixin internal header */

#ifndef IH_SENF_PPI_MultiConnectorMixin_
#define IH_SENF_PPI_MultiConnectorMixin_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace ppi {
namespace module {
namespace detail {

    struct MultiConnectorMixinAccess
    {
#       define BOOST_PP_ITERATION_PARAMS_1 (4, ( \
            0, \
            SENF_MULTI_CONNECTOR_MAX_ARGS,                              \
            SENF_ABSOLUTE_INCLUDE_PATH(PPI/MultiConnectorMixin.mpp),    \
            8 ))
#       include BOOST_PP_ITERATE()
    };

    template <class KeyType, class ConnectorType>
    struct MultiConnectorDefaultContainer
    {
        typedef boost::ptr_map<KeyType, ConnectorType> type;
    };

    template <class Module, class Connector>
    class MultiConnectorWrapper
        : public Connector
    {
    private:
        virtual void v_disconnected();
    };

#ifndef DOXYGEN

    template <class ConnectorType>
    struct MultiConnectorDefaultContainer<void,ConnectorType>
    {
        typedef boost::ptr_vector<ConnectorType> type;
    };

#endif

    template <class ConnectorType>
    struct MultiConnectorSelectBase
        : public boost::mpl::if_<
              boost::is_base_of<connector::InputConnector, ConnectorType>,
              ppi::detail::DisableStandardInput, ppi::detail::DisableStandardOutput >
    {};

    template <class T> senf::mpl::rv<0> isMulticonnector(...);
    template <class T> senf::mpl::rv<1> isMulticonnector(
        typename boost::enable_if<boost::is_base_of<connector::OutputConnector,
                                                    typename T::ConnectorType>,
                                  int>::type);
    template <class T> senf::mpl::rv<2> isMulticonnector(
        typename boost::enable_if<boost::is_base_of<connector::InputConnector,
                                                    typename T::ConnectorType>,
                                  int>::type);

    template <class T, unsigned N>
    struct IsMulticonnectorSource_
        : public boost::false_type
    {};

    template <class T>
    struct IsMulticonnectorSource_<T, 1u>
        : public boost::true_type
    {};

    template <class T>
    struct IsMulticonnectorSource
        : public IsMulticonnectorSource_<T, SENF_MPL_RV(isMulticonnector<T>(0))>
    {};

    template <class T, unsigned N>
    struct IsMulticonnectorTarget_
        : public boost::false_type
    {};

    template <class T>
    struct IsMulticonnectorTarget_<T, 2u>
        : public boost::true_type
    {};

    template <class T>
    struct IsMulticonnectorTarget
        : public IsMulticonnectorTarget_<T, SENF_MPL_RV(isMulticonnector<T>(0))>
    {};



}}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
