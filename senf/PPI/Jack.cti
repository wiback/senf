// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Jack inline template implementation */

//#include "Jack.ih"

// Custom includes
#include "Setup.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class PacketType>
prefix_ senf::ppi::connector::ActiveInputJack<PacketType>::
ActiveInputJack(ActiveInput<PacketType> & input)
    : GenericActiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveInputJack<PacketType>::ActiveInputJack(ActiveInput<> & input)
    : GenericActiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveInputJack<PacketType>::ActiveInputJack(ActiveInputJack & input)
    : GenericActiveInputJack (input.connector())
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveInputJack<PacketType>::ActiveInputJack(ActiveInputJack<> & input)
    : GenericActiveInputJack (input.connector())
{}

template <class PacketType>
prefix_ void
senf::ppi::connector::ActiveInputJack<PacketType>::reset(ActiveInput<PacketType> & input)
{
    GenericActiveInputJack::reset(input);
}

template <class PacketType>
prefix_ void senf::ppi::connector::ActiveInputJack<PacketType>::reset(ActiveInput<> & input)
{
    GenericActiveInputJack::reset(input);
}

template <class PacketType>
prefix_ void senf::ppi::connector::ActiveInputJack<PacketType>::reset(ActiveInputJack & input)
{
    GenericActiveInputJack::reset(input);
}

template <class PacketType>
prefix_ void senf::ppi::connector::ActiveInputJack<PacketType>::reset(ActiveInputJack<> & input)
{
    GenericActiveInputJack::reset(input);
}

template <class PacketType>
prefix_ senf::ppi::connector::ActiveOutputJack<PacketType>::
ActiveOutputJack(ActiveOutput<PacketType> & output)
    : GenericActiveOutputJack (output)
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveOutputJack<PacketType>::ActiveOutputJack(ActiveOutput<> & output)
    : GenericActiveOutputJack (output)
{}

template <class PacketType>
prefix_ senf::ppi::connector::ActiveOutputJack<PacketType>::
ActiveOutputJack(ActiveOutputJack & output)
    : GenericActiveOutputJack (output.connector())
{}

template <class PacketType>
prefix_ senf::ppi::connector::ActiveOutputJack<PacketType>::
ActiveOutputJack(ActiveOutputJack<> & output)
    : GenericActiveOutputJack (output.connector())
{}

template <class PacketType>
prefix_ void
senf::ppi::connector::ActiveOutputJack<PacketType>::reset(ActiveOutput<PacketType> & output)
{
    GenericActiveOutputJack::reset(output);
}

template <class PacketType>
prefix_ void senf::ppi::connector::ActiveOutputJack<PacketType>::reset(ActiveOutput<> & output)
{
    GenericActiveOutputJack::reset(output);
}

template <class PacketType>
prefix_ void
senf::ppi::connector::ActiveOutputJack<PacketType>::reset(ActiveOutputJack & output)
{
    GenericActiveOutputJack::reset(output);
}

template <class PacketType>
prefix_ void
senf::ppi::connector::ActiveOutputJack<PacketType>::reset(ActiveOutputJack<> & output)
{
    GenericActiveOutputJack::reset(output);
}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveInputJack<PacketType>::
PassiveInputJack(PassiveInput<PacketType> & input)
    : GenericPassiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::PassiveInputJack<PacketType>::PassiveInputJack(PassiveInput<> & input)
    : GenericPassiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::PassiveInputJack<PacketType>::PassiveInputJack(PassiveInputJack & input)
    : GenericPassiveInputJack (input.connector())
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveInputJack<PacketType>::
PassiveInputJack(PassiveInputJack<> & input)
    : GenericPassiveInputJack (input.connector())
{}

template <class PacketType>
prefix_ void
senf::ppi::connector::PassiveInputJack<PacketType>::reset(PassiveInput<PacketType> & input)
{
    GenericPassiveInputJack::reset(input);
}

template <class PacketType>
prefix_ void senf::ppi::connector::PassiveInputJack<PacketType>::reset(PassiveInput<> & input)
{
    GenericPassiveInputJack::reset(input);
}

template <class PacketType>
prefix_ void senf::ppi::connector::PassiveInputJack<PacketType>::reset(PassiveInputJack & input)
{
    GenericPassiveInputJack::reset(input);
}

template <class PacketType>
prefix_ void
senf::ppi::connector::PassiveInputJack<PacketType>::reset(PassiveInputJack<> & input)
{
    GenericPassiveInputJack::reset(input);
}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutput<PacketType> & output)
    : GenericPassiveOutputJack (output)
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutput<> & output)
    : GenericPassiveOutputJack (output)
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutputJack & output)
    : GenericPassiveOutputJack (output.connector())
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutputJack<> & output)
    : GenericPassiveOutputJack (output.connector())
{}

template <class PacketType>
prefix_ void
senf::ppi::connector::PassiveOutputJack<PacketType>::reset(PassiveOutput<PacketType> & output)
{
    GenericPassiveOutputJack::reset(output);
}

template <class PacketType>
prefix_ void
senf::ppi::connector::PassiveOutputJack<PacketType>::reset(PassiveOutput<> & output)
{
    GenericPassiveOutputJack::reset(output);
}

template <class PacketType>
prefix_ void
senf::ppi::connector::PassiveOutputJack<PacketType>::reset(PassiveOutputJack & output)
{
    GenericPassiveOutputJack::reset(output);
}

template <class PacketType>
prefix_ void
senf::ppi::connector::PassiveOutputJack<PacketType>::reset(PassiveOutputJack<> & output)
{
    GenericPassiveOutputJack::reset(output);
}

template <class T>
prefix_ void
senf::ppi::connect(connector::GenericActiveOutputJack & source, T & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source.connector(), target);
}

template <class T>
prefix_ void
senf::ppi::connect(connector::GenericPassiveOutputJack & source, T & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source.connector(), target);
}

template <class T>
prefix_ void
senf::ppi::connect(T & source, connector::GenericActiveInputJack & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source, target.connector());
}

template <class T>
prefix_ void
senf::ppi::connect(T & source, connector::GenericPassiveInputJack & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source, target.connector());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
