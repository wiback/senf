// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief QueueSocketSourceSink inline template implementation */

//#include "QueueSocketSourceSink.ih"

// Custom includes
#include <senf/Utils/membind.hh>
#include <senf/Packets/PacketInfo.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveQueueSocketSource<Packet>

template <class Packet>
prefix_
senf::ppi::module::ActiveQueueSocketSource<Packet>::ActiveQueueSocketSource(unsigned burst)
    : handle_ ()
    , event_ ()
    , maxBurst_ (burst)
#ifdef SENF_DEBUG
    , burstMax_ (0)
    , sharedPackets_ (0)
#endif
{
    registerEvent(event_, &ActiveQueueSocketSource::read);
    route(event_, output);
}

template <class Packet>
prefix_ senf::ppi::module::ActiveQueueSocketSource<Packet>::
ActiveQueueSocketSource(Handle const & handle, unsigned burst)
    : handle_ (handle)
    , event_ (handle_, IOEvent::Read)
    , maxBurst_ (burst)
#ifdef SENF_DEBUG
    , burstMax_ (0)
    , sharedPackets_ (0)
#endif
{
    registerEvent(event_, &ActiveQueueSocketSource::read);
    route(event_, output);
}

template <class Packet>
prefix_ typename senf::ppi::module::ActiveQueueSocketSource<Packet>::Handle
senf::ppi::module::ActiveQueueSocketSource<Packet>::handle()
    const
{
    return handle_;
}

template <class Packet>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet>::handle(Handle const & handle)
{
    handle_ = handle;
    event_.set(handle_, IOEvent::Read);
}

template <class Packet>
prefix_ unsigned senf::ppi::module::ActiveQueueSocketSource<Packet>::maxBurst()
    const
{
    return maxBurst_;
}

template <class Packet>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet>::maxBurst(unsigned burst)
{
    maxBurst_ = std::max(burst, 1u);
}

template <class Packet>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet>::release()
{
    handle_.release();
}

#ifdef SENF_DEBUG

template <class Packet>
prefix_ unsigned senf::ppi::module::ActiveQueueSocketSource<Packet>::burstMax()
{
    unsigned res (burstMax_);
    burstMax_ = 0;
    return res;
}

template <class Packet>
prefix_ unsigned senf::ppi::module::ActiveQueueSocketSource<Packet>::sharedPackets()
{
    unsigned res (sharedPackets_);
    sharedPackets_ = 0;
    return res;
}

#endif

template <class Packet>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet>::read()
{
    unsigned burst (0);
    for (; burst < maxBurst_; ++ burst) {
        boost::optional<senf::QueueReadPolicy::Buffer> buf (handle_.dequeue());
        if (! buf || buf->size() == 0)
            break;
        PacketInfo ifo;
        {
            Packet pk (Packet::create(
                           buf->spaceBegin(),
                           buf->size(),
                           buf->spaceSize(),
                           buf->spaceFrameOffset()));
            ifo = PacketInfo(pk);
            output(pk);
        }
        if (ifo.is_shared()) {
            ifo.releaseExternalMemory();
#ifdef SENF_DEBUG
            ++ sharedPackets_;
#endif
        }
    }
#ifdef SENF_DEBUG
    if (burst > burstMax_)
        burstMax_ = burst;
#endif
    handle_.release();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
