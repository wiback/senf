//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief QueueSocketSourceSink inline template implementation */

#include "QueueSocketSourceSink.ih"

// Custom includes
#include <senf/Utils/membind.hh>
#include <senf/Packets/PacketInfo.hh>
#include "SocketSource.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveQueueSocketSource<Packet>

template <class Packet, class Connector>
prefix_ unsigned senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::maxBurst()
    const
{
    return maxBurst_;
}

template <class Packet, class Connector>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::maxBurst(unsigned burst)
{
    maxBurst_ = std::max(burst, 1u);
}

template <class Packet, class Connector>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::flush()
{
    if (burst_ == 0) { // not in read() loop
        if(handle_) {
            while (handle_.dequeue());
            handle_.release();
        }
    } else {
        flushPending_ = true;
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveQueueSocketSink

template <class Connector>
prefix_ void senf::ppi::module::PassiveQueueSocketSink<Connector>::flush()
{
    QueueWritePolicy::flush(handle_);
    eventHook_.disable();
    writeEvent_.enabled(false);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
