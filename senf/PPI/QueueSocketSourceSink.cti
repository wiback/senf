// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <senf@g0dil.de>

/** \file
    \brief QueueSocketSourceSink inline template implementation */

#include "QueueSocketSourceSink.ih"

// Custom includes
#include <senf/Utils/membind.hh>
#include <senf/Packets/PacketInfo.hh>
#include "SocketSource.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveQueueSocketSource<Packet>

template <class Packet, class Connector>
prefix_ unsigned senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::maxBurst()
    const
{
    return maxBurst_;
}

template <class Packet, class Connector>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::maxBurst(unsigned burst)
{
    maxBurst_ = std::max(burst, 1u);
}

template <class Packet, class Connector>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::flush()
{
    if (burst_ == 0) { // not in read() loop
        while (handle_.dequeue());
        handle_.release();
    } else {
        flushPending_ = true;
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveQueueSocketSink

template <class Connector>
prefix_ void senf::ppi::module::PassiveQueueSocketSink<Connector>::flush()
{
//    QueueWritePolicy::flush(handle_);
    qAlgo_->clear();
    ioEvent_.enabled(false);
//    eventHook_.disable();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
