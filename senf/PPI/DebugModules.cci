//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief DebugModules inline non-template implementation */

// Custom includes
#include "Setup.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::debug::ActiveSource

prefix_ senf::ppi::module::debug::ActiveSource::ActiveSource()
{
    noroute(output);
}

prefix_ void senf::ppi::module::debug::ActiveSource::submit(Packet const & packet)
{
    output(packet);
}

prefix_ bool senf::ppi::module::debug::ActiveSource::boolean_test()
    const
{
    return bool(output);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::debug::PassiveSource

prefix_ senf::ppi::module::debug::PassiveSource::PassiveSource()
{
    noroute(output);
    output.onRequest(&PassiveSource::request);
}

prefix_ void senf::ppi::module::debug::PassiveSource::throttle()
{
    output.throttle();
}

prefix_ void senf::ppi::module::debug::PassiveSource::unthrottle()
{
    output.unthrottle();
}

prefix_ void senf::ppi::module::debug::PassiveSource::submit(Packet const & packet)
{
    packets_.push_back(packet);
    output.unthrottle();
}

prefix_ bool senf::ppi::module::debug::PassiveSource::empty()
{
    return packets_.empty();
}

prefix_ senf::ppi::module::debug::PassiveSource::size_type
senf::ppi::module::debug::PassiveSource::size()
{
    return packets_.size();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

prefix_ void senf::ppi::module::debug::PassiveSource::v_init()
{
    if (empty())
        output.throttle();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::debug::ActiveSink

prefix_ senf::ppi::module::debug::ActiveSink::ActiveSink()
{
    noroute(input);
}

prefix_ senf::Packet senf::ppi::module::debug::ActiveSink::request()
{
    return input();
}

prefix_ bool senf::ppi::module::debug::ActiveSink::boolean_test()
    const
{
    return bool(input);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::debug::PassiveSink

prefix_ senf::ppi::module::debug::PassiveSink::PassiveSink()
{
    noroute(input);
    input.onRequest(&PassiveSink::request);
}

prefix_ void senf::ppi::module::debug::PassiveSink::throttle()
{
    input.throttle();
}

prefix_ void senf::ppi::module::debug::PassiveSink::unthrottle()
{
    input.unthrottle();
}

prefix_ bool senf::ppi::module::debug::PassiveSink::empty()
{
    return packets_.empty();
}

prefix_ senf::ppi::module::debug::PassiveSink::size_type
senf::ppi::module::debug::PassiveSink::size()
{
    return packets_.size();
}

prefix_ senf::ppi::module::debug::PassiveSink::iterator
senf::ppi::module::debug::PassiveSink::begin()
{
    return packets_.begin();
}

prefix_ senf::ppi::module::debug::PassiveSink::iterator
senf::ppi::module::debug::PassiveSink::end()
{
    return packets_.end();
}

prefix_ senf::Packet senf::ppi::module::debug::PassiveSink::front()
{
    if (empty())
        return Packet();
    else
        return packets_.front();
}

prefix_ senf::Packet senf::ppi::module::debug::PassiveSink::pop_front()
{
    Packet p (front());
    if (p)
        packets_.pop_front();
    return p;
}

prefix_ void senf::ppi::module::debug::PassiveSink::clear()
{
    packets_.erase(packets_.begin(), packets_.end());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::debug::ActiveFeederSource

prefix_ senf::ppi::module::debug::ActiveFeederSource::ActiveFeederSource()
    : output(feeder.output)
{
    ppi::connect(source,feeder);
}

prefix_ void senf::ppi::module::debug::ActiveFeederSource::submit(Packet packet)
{
    source.submit(packet);
}

prefix_ bool senf::ppi::module::debug::ActiveFeederSource::empty()
{
    return source.empty();
}

prefix_ senf::ppi::module::debug::ActiveFeederSource::size_type
senf::ppi::module::debug::ActiveFeederSource::size()
{
    return source.size();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::debug::ActiveFeederSink

prefix_ senf::ppi::module::debug::ActiveFeederSink::ActiveFeederSink()
    : input(feeder.input)
{
    ppi::connect(feeder, sink);
}

prefix_ bool senf::ppi::module::debug::ActiveFeederSink::empty()
{
    return sink.empty();
}

prefix_ senf::ppi::module::debug::ActiveFeederSink::size_type
senf::ppi::module::debug::ActiveFeederSink::size()
{
    return sink.size();
}

prefix_ senf::ppi::module::debug::ActiveFeederSink::iterator
senf::ppi::module::debug::ActiveFeederSink::begin()
{
    return sink.begin();
}

prefix_ senf::ppi::module::debug::ActiveFeederSink::iterator
senf::ppi::module::debug::ActiveFeederSink::end()
{
    return sink.end();
}

prefix_ senf::Packet senf::ppi::module::debug::ActiveFeederSink::front()
{
    return sink.front();
}

prefix_ senf::Packet senf::ppi::module::debug::ActiveFeederSink::pop_front()
{
    return sink.pop_front();
}

prefix_ void senf::ppi::module::debug::ActiveFeederSink::clear()
{
    sink.clear();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
