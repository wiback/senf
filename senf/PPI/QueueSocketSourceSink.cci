//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief QueueSocketSourceSink inline non-template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ std::ostream & senf::ppi::operator<<(std::ostream & os,
                                             QueueBufferAnnotation const & annotation)
{
    os << (annotation.value ? "(buffer)" : "(nil)");
    return os;
}

prefix_ senf::QueueReadPolicy::Buffer const * senf::ppi::QueueBufferAnnotation::operator->()
    const
{
    SENF_ASSERT(value, "dereferencing uninitialized QueueBufferAnnotation");
    return value;
}

prefix_ bool redFilterPass(senf::Packet const & pkt, std::uint32_t usage)
{
    return true;
}

prefix_ bool redFilterDrop(senf::Packet const & pkt, std::uint32_t usage)
{
    return false;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_
