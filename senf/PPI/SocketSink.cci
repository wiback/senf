//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SocketSink inline non-template implementation */

// Custom includes
#include "SocketSink.hh"
#include <senf/Socket/ClientSocketHandle.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::ConnectedDgramWriter

prefix_ bool senf::ppi::ConnectedDgramWriter::operator()(Handle & handle,
                                                         Packet const & packet)
{
    return handle.write(packet.data()) != packet.data().begin();
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::LLSocketWriter

prefix_ bool senf::ppi::LLSocketWriter::operator()(Handle & handle, 
                                                   Packet const & packet)
{
    do {
        if (::write(handle.fd(), packet.data().begin(), packet.size()) >= 0)
            return true;

        switch (errno) {
        case EINTR:
            break;
        case ENOTCONN:
        case ENETDOWN:
        case ENXIO:
            // TODO: The below might not be the best solution for all use cases, but it's ok for WiBACK 
            // Pretend that we have written out such frames
            return true;
        case EAGAIN:
        case ENOBUFS:
            // According to the man page this should not happen, since packets are just silently being dropped.
            // It does happen in NetEmu using small TxQueues on WLAN interfaces 
        case ECONNREFUSED:
            // Writing to a UDP socket seems return this error code if a corresponding ICMP
            // error code has been received before (at least on linux). This is inconsistent
            // since I cannot rely on getting ECONNREFUSED. I therefore ignore this error. TCP
            // sockets will return this error on connect() and not on write(). Therefore we can
            // unconditionally ignore this error here.
            return false;
        default:
            SENF_THROW_SYSTEM_EXCEPTION("::write");
        }
    } while (true);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::TargetLLSocketWriter

prefix_ bool senf::ppi::TargetLLSocketWriter::operator()(Handle & handle, EthernetPacket const & packet)
{
    do {
        target_.protocol(packet->type_length());
        if (::sendto(handle.fd(), packet.data().begin(), packet.size(), 0, target_.sockaddr_p(), target_.socklen()) >= 0)
            return true;

        switch (errno) {
        case EINTR:
            break;
        case ENOTCONN:
        case ENETDOWN:
        case ENXIO:
            // TODO: The below might not be the best solution for all use cases, but it's ok for WiBACK
            // Pretend that we have written out such frames
            return true;
        case EAGAIN:
        case ENOBUFS:
            // According to the man page this should not happen, since packets are just silently being dropped.
            // It does happen in NetEmu using small TxQueues on WLAN interfaces
        case ECONNREFUSED:
            // Writing to a UDP socket seems return this error code if a corresponding ICMP
            // error code has been received before (at least on linux). This is inconsistent
            // since I cannot rely on getting ECONNREFUSED. I therefore ignore this error. TCP
            // sockets will return this error on connect() and not on write(). Therefore we can
            // unconditionally ignore this error here.
            return false;
        default:
            SENF_THROW_SYSTEM_EXCEPTION("::sendto");
        }
    } while (true);
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
