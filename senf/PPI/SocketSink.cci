// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SocketSink inline non-template implementation */

// Custom includes
#include "SocketSink.hh"
#include <senf/Socket/ClientSocketHandle.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::ConnectedDgramWriter

prefix_ bool senf::ppi::ConnectedDgramWriter::operator()(Handle & handle,
                                                         Packet const & packet)
{
    return handle.write(packet.data()) != packet.data().begin();
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::LLSocketWriter

prefix_ bool senf::ppi::LLSocketWriter::operator()(Handle & handle, 
                                                   Packet const & packet)
{
    do {
        if( ::write(handle.fd(), packet.data().begin(), packet.size()) >= 0)
            return true;

        switch (errno) {
        case EINTR:
            break;
        case ENOTCONN:
        case ENETDOWN:
            // TODO: The below might not be the best solution for all use cases, but it's ok for WiBACK 
            // Pretend that we have written out such frames
            return true;
            break;
        case EAGAIN:
        case ENOBUFS:
            // According to the man page this should not happen, since packets are just silently being dropped.
            // It does happen in NetEmu using small TxQueues on WLAN interfaces 
        case ECONNREFUSED:
            // Writing to a UDP socket seems return this error code if a corresponding ICMP
            // error code has been received before (at least on linux). This is inconsistent
            // since I cannot rely on getting ECONNREFUSED. I therefore ignore this error. TCP
            // sockets will return this error on connect() and not on write(). Therefore we can
            // unconditionally ignore this error here.
            return false;
            break;
        default:
            SENF_THROW_SYSTEM_EXCEPTION("::write");
        }
    }while (true);
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
