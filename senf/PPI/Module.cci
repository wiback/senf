//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Module inline non-template implementation */

// Custom includes
#include "Route.hh"
#include "EventManager.hh"
#include <boost/lambda/lambda.hpp>
#include <boost/lambda/bind.hpp>
#include <algorithm>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::Module

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

prefix_ senf::ppi::EventManager & senf::ppi::module::Module::eventManager()
    const
{
    return EventManager::instance();
}

prefix_ senf::ppi::ModuleManager & senf::ppi::module::Module::moduleManager()
    const
{
    return ModuleManager::instance();
}

prefix_ void senf::ppi::module::Module::unregisterEvent(EventDescriptor & event)
{
    routes_.erase_if(boost::bind(&RouteBase::hasEvent, _1, boost::cref(event)));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// public members

prefix_ senf::ppi::module::Module::~Module()
{
    SENF_ASSERT(connectorRegistry_.empty(),
                "Internal failure: connectors still registered in Module destructor ??");
    SENF_ASSERT(routes_.empty(),
                "internal failure: routes still registered in Module destructor ??");

    moduleManager().unregisterModule(*this);
}

prefix_ senf::ClockService::clock_type const & senf::ppi::module::Module::time()
    const
{
    return eventManager().time();
}

prefix_ senf::ClockService::clock_type const & senf::ppi::module::Module::now()
    const
{
    return eventManager().now();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

prefix_ senf::ppi::module::Module::Module()
{
    moduleManager().registerModule(*this);
}

prefix_ void senf::ppi::module::Module::destroy()
{
    if (EventManager::alive())
        eventManager().destroyModule(*this);
}

prefix_ senf::console::DirectoryNode & senf::ppi::module::Module::sysConsoleDir()
    const
{
    return sysConsoleDir_.node();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
