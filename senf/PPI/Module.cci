// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Module inline non-template implementation */

// Custom includes
#include "Route.hh"
#include "Connectors.hh"
#include "EventManager.hh"
#include <boost/lambda/lambda.hpp>
#include <boost/lambda/bind.hpp>
#include <algorithm>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::Module

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

prefix_ senf::ppi::EventManager & senf::ppi::module::Module::eventManager()
    const
{
    return EventManager::instance();
}

prefix_ senf::ppi::ModuleManager & senf::ppi::module::Module::moduleManager()
    const
{
    return ModuleManager::instance();
}

prefix_ void senf::ppi::module::Module::unregisterEvent(EventDescriptor & event)
{
    routes_.erase_if(boost::bind(&RouteBase::hasEvent, _1, boost::cref(event)));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// public members

prefix_ senf::ppi::module::Module::~Module()
{
    SENF_ASSERT(connectorRegistry_.empty(),
                "Internal failure: connectors still registered in Module destructor ??");
    SENF_ASSERT(routes_.empty(),
                "internal failure: routes still registered in Module destructor ??");

    moduleManager().unregisterModule(*this);
}

prefix_ senf::ClockService::clock_type senf::ppi::module::Module::time()
    const
{
    return eventManager().time();
}

prefix_ senf::ClockService::clock_type senf::ppi::module::Module::now()
    const
{
    return eventManager().now();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

prefix_ senf::ppi::module::Module::Module()
    : sysConsoleDir_(this)
{
    moduleManager().registerModule(*this);
}

prefix_ void senf::ppi::module::Module::destroy()
{
    if (EventManager::alive())
        eventManager().destroyModule(*this);
}

prefix_ senf::console::DirectoryNode & senf::ppi::module::Module::sysConsoleDir()
    const
{
    return sysConsoleDir_.node();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
