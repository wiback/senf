//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ModuleManager inline non-template implementation */

// Custom includes
#include <algorithm>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::ModuleManager

prefix_ senf::ppi::ModuleManager & senf::ppi::ModuleManager::instance()
{
    static ModuleManager manager;
    return manager;
}

prefix_ bool senf::ppi::ModuleManager::initializableRegistered(Initializable const & i)
    const
{
    return alive_ ? std::find(initQueue_.begin(), initQueue_.end(), &i) != initQueue_.end() : false;
}

prefix_ bool senf::ppi::ModuleManager::running()
    const
{
    return running_;
}

prefix_ senf::console::DirectoryNode & senf::ppi::ModuleManager::consoleDir()
    const
{
    return consoleDir_.node();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::ModuleManager::Initializable

prefix_ senf::ppi::ModuleManager::Initializable::Initializable()
{
    enqueueInitializable();
}

prefix_ senf::ppi::ModuleManager::Initializable::~Initializable()
{
    dequeueInitializable();
}

prefix_ void senf::ppi::ModuleManager::Initializable::enqueueInitializable()
{
    moduleManager().registerInitializable(*this);
}

prefix_ void senf::ppi::ModuleManager::Initializable::dequeueInitializable()
{
    moduleManager().unregisterInitializable(*this);
}

prefix_ bool senf::ppi::ModuleManager::Initializable::initializationScheduled()
    const
{
    return moduleManager().initializableRegistered(*this);
}

prefix_ senf::ppi::ModuleManager & senf::ppi::ModuleManager::Initializable::moduleManager()
    const
{
    return ModuleManager::instance();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
