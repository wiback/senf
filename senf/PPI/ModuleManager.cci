// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ModuleManager inline non-template implementation */

// Custom includes
#include <algorithm>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::ModuleManager

prefix_ senf::ppi::ModuleManager & senf::ppi::ModuleManager::instance()
{
    static ModuleManager manager;
    return manager;
}

prefix_ void senf::ppi::ModuleManager::registerModule(module::Module & module)
{
    moduleRegistry_.push_back(&module);
}

prefix_ void senf::ppi::ModuleManager::unregisterModule(module::Module & module)
{
    moduleRegistry_.erase(
        std::remove(moduleRegistry_.begin(), moduleRegistry_.end(), & module),
        moduleRegistry_.end());
}

prefix_ void senf::ppi::ModuleManager::registerInitializable(Initializable & i)
{
    initQueue_.push_back(&i);
    initRunner_.enable();
    // This call ensures, that the senf::ppi::init() handler is called as next handler
    // after this handler returns (this works since the senf::ppi::init() handler is registered as
    // PRE hook and thus has very high priority)
    senf::scheduler::yield();
}

prefix_ void senf::ppi::ModuleManager::unregisterInitializable(Initializable & i)
{
    initQueue_.erase(
        std::remove(initQueue_.begin(), initQueue_.end(), & i),
        initQueue_.end());
    if (initQueue_.empty())
        initRunner_.disable();
}

prefix_ bool senf::ppi::ModuleManager::initializableRegistered(Initializable const & i)
    const
{
    return std::find(initQueue_.begin(), initQueue_.end(), &i) != initQueue_.end();
}

prefix_ bool senf::ppi::ModuleManager::running()
    const
{
    return running_;
}

prefix_ senf::console::DirectoryNode & senf::ppi::ModuleManager::consoleDir()
    const
{
    return consoleDir_.node();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::ModuleManager::Initializable

prefix_ senf::ppi::ModuleManager::Initializable::Initializable()
{
    enqueueInitializable();
}

prefix_ senf::ppi::ModuleManager::Initializable::~Initializable()
{
    dequeueInitializable();
}

prefix_ void senf::ppi::ModuleManager::Initializable::enqueueInitializable()
{
    moduleManager().registerInitializable(*this);
}

prefix_ void senf::ppi::ModuleManager::Initializable::dequeueInitializable()
{
    moduleManager().unregisterInitializable(*this);
}

prefix_ bool senf::ppi::ModuleManager::Initializable::initializationScheduled()
    const
{
    return moduleManager().initializableRegistered(*this);
}

prefix_ senf::ppi::ModuleManager & senf::ppi::ModuleManager::Initializable::moduleManager()
    const
{
    return ModuleManager::instance();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
