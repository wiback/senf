// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Callback inline template implementation */

//#include "Callback.ih"

// Custom includes
#include <boost/bind.hpp>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::Callback<Arg>

template <class Arg>
template <class Owner, class FnClass>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(void (FnClass::* memfn )(), Owner & owner)
{
    return boost::bind(memfn,static_cast<FnClass *>(&owner));
}

template <class Arg>
template <class Owner, class FnClass, class FnArg>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(void (FnClass::* memfn )(FnArg arg), Owner & owner)
{
    return boost::bind(memfn,static_cast<FnClass *>(&owner),_1);
}

template <class Arg>
template <class Owner>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(type callable, Owner &)
{
    return callable;
}

template <class Arg>
template <class Owner>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(boost::function<void()> callable, Owner &)
{
    return boost::bind(callable);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::Callback<void>

template <class Owner, class FnClass>
prefix_ typename senf::ppi::detail::Callback<void>::type
senf::ppi::detail::Callback<void>::make(void (FnClass::* memfn )(), Owner & owner)
{
    return boost::bind(memfn,static_cast<FnClass *>(&owner));
}

template <class Owner>
prefix_ typename senf::ppi::detail::Callback<void>::type
senf::ppi::detail::Callback<void>::make(type callable, Owner &)
{
    return callable;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u ../test"
// End:
