//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Callback inline template implementation */

//#include "Callback.ih"

// Custom includes
#include <boost/bind.hpp>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::Callback<Arg>

template <class Arg>
template <class Owner, class FnClass>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(void (FnClass::* memfn )(), Owner & owner)
{
    return boost::bind(memfn,static_cast<FnClass *>(&owner));
}

template <class Arg>
template <class Owner, class FnClass, class FnArg>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(void (FnClass::* memfn )(FnArg arg), Owner & owner)
{
    return boost::bind(memfn,static_cast<FnClass *>(&owner),_1);
}

template <class Arg>
template <class Owner>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(type callable, Owner &)
{
    return callable;
}

template <class Arg>
template <class Owner>
prefix_ typename senf::ppi::detail::Callback<Arg>::type
senf::ppi::detail::Callback<Arg>::make(boost::function<void()> callable, Owner &)
{
    return boost::bind(callable);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::Callback<void>

template <class Owner, class FnClass>
prefix_ typename senf::ppi::detail::Callback<void>::type
senf::ppi::detail::Callback<void>::make(void (FnClass::* memfn )(), Owner & owner)
{
    return boost::bind(memfn,static_cast<FnClass *>(&owner));
}

template <class Owner>
prefix_ typename senf::ppi::detail::Callback<void>::type
senf::ppi::detail::Callback<void>::make(type callable, Owner &)
{
    return callable;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u ../test"
// End:
