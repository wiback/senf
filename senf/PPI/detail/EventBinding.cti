//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EventBinding inline template implementation */

//#include "EventBinding.ih"

// Custom includes
#include <senf/PPI/EventManager.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::EventBindingHelper<EventType,Self>

template <class EventType, class Self>
prefix_ void
senf::ppi::detail::EventBindingHelper<EventType,Self>::callback(EventArg event,
                                                                ClockService::clock_type time)
{
    self().eventTime(time);
    self().callback_(event);
}

template <class EventType, class Self>
prefix_ void senf::ppi::detail::EventBindingHelper<EventType,Self>::callback(EventArg event)
{
    callback(event, self().manager().now());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class EventType, class Self>
prefix_ Self & senf::ppi::detail::EventBindingHelper<EventType,Self>::self()
{
    return * static_cast<Self*>(this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::EventBindingHelper<void,Self>

template <class Self>
prefix_ void
senf::ppi::detail::EventBindingHelper<void,Self>::callback(ClockService::clock_type time)
{
    self().eventTime(time);
    self().callback_();
}

template <class Self>
prefix_ void senf::ppi::detail::EventBindingHelper<void,Self>::callback()
{
    callback(self().manager().now());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Self>
prefix_ Self & senf::ppi::detail::EventBindingHelper<void,Self>::self()
{
    return * static_cast<Self*>(this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::EventBinding<EvImpl>

template <class EventType>
prefix_ senf::ppi::detail::EventBinding<EventType>::EventBinding(EventManager & manager,
                                                                 module::Module & module,
                                                                 Callback callback,
                                                                 EventDescriptor & descriptor)
    : EventBindingBase(manager, module, descriptor), callback_(callback)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u ../test"
// End:
