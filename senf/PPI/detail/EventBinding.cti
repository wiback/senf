// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief EventBinding inline template implementation */

//#include "EventBinding.ih"

// Custom includes
#include <senf/PPI/EventManager.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::EventBindingHelper<EventType,Self>

template <class EventType, class Self>
prefix_ void
senf::ppi::detail::EventBindingHelper<EventType,Self>::callback(EventArg event,
                                                                ClockService::clock_type time)
{
    self().eventTime(time);
    self().callback_(event);
}

template <class EventType, class Self>
prefix_ void senf::ppi::detail::EventBindingHelper<EventType,Self>::callback(EventArg event)
{
    callback(event, self().manager().now());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class EventType, class Self>
prefix_ Self & senf::ppi::detail::EventBindingHelper<EventType,Self>::self()
{
    return * static_cast<Self*>(this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::EventBindingHelper<void,Self>

template <class Self>
prefix_ void
senf::ppi::detail::EventBindingHelper<void,Self>::callback(ClockService::clock_type time)
{
    self().eventTime(time);
    self().callback_();
}

template <class Self>
prefix_ void senf::ppi::detail::EventBindingHelper<void,Self>::callback()
{
    callback(self().manager().now());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Self>
prefix_ Self & senf::ppi::detail::EventBindingHelper<void,Self>::self()
{
    return * static_cast<Self*>(this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::EventBinding<EvImpl>

template <class EventType>
prefix_ senf::ppi::detail::EventBinding<EventType>::EventBinding(EventManager & manager,
                                                                 module::Module & module,
                                                                 Callback callback,
                                                                 EventDescriptor & descriptor)
    : EventBindingBase(manager, module, descriptor), callback_(callback)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u ../test"
// End:
