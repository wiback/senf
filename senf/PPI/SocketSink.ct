//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SocketSink non-inline template implementation  */

//#include "SocketSink.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveSocketSink<Writer>

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink()
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink(Writer const & writer)
    : writer_ (writer)
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink(Handle const &  handle)
    : handle_(handle), event_(handle_, IOEvent::Write), writer_()
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink(Handle const & handle,
                                                                    Writer const & writer)
    : handle_(handle), event_(handle_, IOEvent::Write), writer_(writer)
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Writer>
prefix_ void senf::ppi::module::ActiveSocketSink<Writer>::write()
{
    writer_(handle_,input());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveSocketSink<Writer>

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink()
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink(Writer const & writer)
    : writer_ (writer)
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink(Handle const & handle)
    : handle_(handle), writer_()
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink(Handle const & handle,
                                                                      Writer const & writer)
    : handle_(handle), writer_(writer)
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::write()
{
    if (writer_(handle_,input()))
        txStats_.sent++;
    else
        txStats_.error++;
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::checkThrottle()
{
    if (handle_.valid())
        input.unthrottle();
    else
        input.throttle();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
