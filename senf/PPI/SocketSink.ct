// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SocketSink non-inline template implementation  */

//#include "SocketSink.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveSocketSink<Writer>

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink()
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink(Writer const & writer)
    : writer_ (writer)
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink(Handle const &  handle)
    : handle_(handle), event_(handle_, IOEvent::Write), writer_()
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

template <class Writer>
prefix_ senf::ppi::module::ActiveSocketSink<Writer>::ActiveSocketSink(Handle const & handle,
                                                                    Writer const & writer)
    : handle_(handle), event_(handle_, IOEvent::Write), writer_(writer)
{
    registerEvent( event_, &ActiveSocketSink::write );
    route(input, event_);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Writer>
prefix_ void senf::ppi::module::ActiveSocketSink<Writer>::write()
{
    writer_(handle_,input());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveSocketSink<Writer>

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink()
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink(Writer const & writer)
    : writer_ (writer)
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink(Handle const & handle)
    : handle_(handle), writer_()
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

template <class Writer>
prefix_ senf::ppi::module::PassiveSocketSink<Writer>::PassiveSocketSink(Handle const & handle,
                                                                      Writer const & writer)
    : handle_(handle), writer_(writer)
{
    noroute(input);
    input.onRequest(&PassiveSocketSink::write);
    checkThrottle();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::write()
{
    writer_(handle_,input());
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::checkThrottle()
{
    if (handle_.valid())
        input.unthrottle();
    else
        input.throttle();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
