// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SocketSink inline template implementation */

//#include "SocketSink.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::TargetDgramWriter<HandleType>

template <class HandleType>
prefix_ senf::ppi::TargetDgramWriter<HandleType>::TargetDgramWriter()
{}

template <class HandleType>
prefix_ senf::ppi::TargetDgramWriter<HandleType>::
TargetDgramWriter(typename Handle::Address const & target)
: target_ (target)
{}

template <class HandleType>
prefix_ typename senf::ppi::TargetDgramWriter<HandleType>::Handle::Address
senf::ppi::TargetDgramWriter<HandleType>::target()
    const
{
    return target_;
}

template <class HandleType>
prefix_ void
senf::ppi::TargetDgramWriter<HandleType>::target(typename Handle::Address const & target)
{
    target_ = target;
}

template <class HandleType>
prefix_ bool senf::ppi::TargetDgramWriter<HandleType>::operator()(Handle & handle,
                                                                  Packet const & packet)
{
    if (target_)
        return handle.writeto(target_, packet.data()) != packet.data().begin();
    return false;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveSocketSink<Writer>

template <class Writer>
prefix_ Writer & senf::ppi::module::ActiveSocketSink<Writer>::writer()
{
    return writer_;
}

template <class Writer>
prefix_ typename senf::ppi::module::ActiveSocketSink<Writer>::Handle
senf::ppi::module::ActiveSocketSink<Writer>::handle()
{
    return handle_;
}

template <class Writer>
prefix_ void senf::ppi::module::ActiveSocketSink<Writer>::handle(Handle const & handle)
{
    handle_ = handle;
    event_.set(handle_, IOEvent::Write);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveSocketSink<Writer>

template <class Writer>
prefix_ Writer & senf::ppi::module::PassiveSocketSink<Writer>::writer()
{
    return writer_;
}

template <class Writer>
prefix_ typename Writer::Handle & senf::ppi::module::PassiveSocketSink<Writer>::handle()
{
    return handle_;
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::handle(Handle const & handle)
{
    handle_ = handle;
    checkThrottle();
}

#ifndef DOXYGEN
template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::replaceHandle(Handle newHandle)
{
    handle(newHandle);
}
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
