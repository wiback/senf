// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief SocketSink inline template implementation */

//#include "SocketSink.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::TargetDgramWriter<HandleType>

template <class HandleType>
prefix_ senf::ppi::TargetDgramWriter<HandleType>::TargetDgramWriter()
{}

template <class HandleType>
prefix_ senf::ppi::TargetDgramWriter<HandleType>::
TargetDgramWriter(typename Handle::Address const & target)
: target_ (target)
{}

template <class HandleType>
prefix_ typename senf::ppi::TargetDgramWriter<HandleType>::Handle::Address
senf::ppi::TargetDgramWriter<HandleType>::target()
    const
{
    return target_;
}

template <class HandleType>
prefix_ void
senf::ppi::TargetDgramWriter<HandleType>::target(typename Handle::Address const & target)
{
    target_ = target;
}

template <class HandleType>
prefix_ bool senf::ppi::TargetDgramWriter<HandleType>::operator()(Handle & handle,
                                                                  Packet const & packet)
{
    if (target_)
        return handle.writeto(target_, packet.data()) != packet.data().begin();
    return false;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveSocketSink<Writer>

template <class Writer>
prefix_ Writer & senf::ppi::module::ActiveSocketSink<Writer>::writer()
{
    return writer_;
}

template <class Writer>
prefix_ typename senf::ppi::module::ActiveSocketSink<Writer>::Handle
senf::ppi::module::ActiveSocketSink<Writer>::handle()
{
    return handle_;
}

template <class Writer>
prefix_ void senf::ppi::module::ActiveSocketSink<Writer>::handle(Handle const & handle)
{
    handle_ = handle;
    event_.set(handle_, IOEvent::Write);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveSocketSink<Writer>

template <class Writer>
prefix_ Writer & senf::ppi::module::PassiveSocketSink<Writer>::writer()
{
    return writer_;
}

template <class Writer>
prefix_ typename Writer::Handle & senf::ppi::module::PassiveSocketSink<Writer>::handle()
{
    return handle_;
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::handle(Handle const & handle)
{
    handle_ = handle;
    checkThrottle();
}

#ifndef DOXYGEN
template <class Writer>
prefix_ void senf::ppi::module::PassiveSocketSink<Writer>::replaceHandle(Handle newHandle)
{
    handle(newHandle);
}
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
