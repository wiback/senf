//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief AnnotationRouter non-inline template implementation  */

//#include "AnnotationRouter.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class AnnotationType>
prefix_ senf::ppi::module::AnnotationRouter<AnnotationType>::AnnotationRouter()
{
    noroute(input);
    noroute(defaultOutput);
    input.onRequest(&AnnotationRouter::request);
    input.throttlingDisc( senf::ppi::ThrottlingDiscipline::NONE);
}

template <class AnnotationType>
prefix_ AnnotationType senf::ppi::module::AnnotationRouter<AnnotationType>::
connectorSetup(connector::ActiveOutput<> & conn, AnnotationType const & key)
{
    if (this->connectors().find(key) != this->connectors().end())
        throw DuplicateKeyException(key);
    route(input, conn).autoThrottling( false);
    return key;
}

template <class AnnotationType>
prefix_ void senf::ppi::module::AnnotationRouter<AnnotationType>::request()
{
    Packet const & p (input());
    typename AnnotationRouter::ContainerType::iterator i (
        this->connectors().find(p.annotation<AnnotationType>()));
    if (SENF_UNLIKELY(i == this->connectors().end()))
        defaultOutput.write(p);
    else
        i->second->write(p);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
