// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief AnnotationRouter non-inline template implementation  */

//#include "AnnotationRouter.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class AnnotationType>
prefix_ senf::ppi::module::AnnotationRouter<AnnotationType>::AnnotationRouter()
{
    noroute(input);
    noroute(defaultOutput);
    input.onRequest(&AnnotationRouter::request);
}

template <class AnnotationType>
prefix_ AnnotationType senf::ppi::module::AnnotationRouter<AnnotationType>::
connectorSetup(connector::ActiveOutput<> & conn, AnnotationType const & key)
{
    if (this->connectors().find(key) != this->connectors().end())
        throw DuplicateKeyException(key);
    route(input, conn);
    return key;
}

template <class AnnotationType>
prefix_ void senf::ppi::module::AnnotationRouter<AnnotationType>::request()
{
    Packet const & p (input());
    typename AnnotationRouter::ContainerType::iterator i (
        this->connectors().find(p.annotation<AnnotationType>()));
    if (i == this->connectors().end())
        defaultOutput(p);
    else {
#if BOOST_VERSION >= 103400
        (*i->second)(p);
#else
        (*i)(p);
#endif
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
