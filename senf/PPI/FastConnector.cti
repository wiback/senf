// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief FastConnector inline template implementation */

//#include "FastConnector.ih"

// Custom includes
#include <senf/Utils/type_traits.hh>

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::connector::FastPassiveInput<PacketType>

template <class PacketType>
prefix_ senf::ppi::connector::FastPassiveInput<PacketType>::FastPassiveInput()
{}

template <class PacketType>
prefix_ senf::ppi::connector::FastPassiveInput<PacketType>::~FastPassiveInput()
{
    unregisterConnector();
}

template <class PacketType>
prefix_ senf::ppi::connector::FastActiveOutput<PacketType> &
senf::ppi::connector::FastPassiveInput<PacketType>::peer()
    const
{
    return static_cast<FastActiveOutput<PacketType> &>(Connector::peer());
}

template <class PacketType>
template <class Handler>
prefix_ void senf::ppi::connector::FastPassiveInput<PacketType>::onRequest(Handler handler)
{
    cb_.bind(static_cast<typename senf::member_class<Handler>::type *>(& module()), handler);
}

template <class PacketType>
prefix_ PacketType const & senf::ppi::connector::FastPassiveInput<PacketType>::operator()()
    const
{
    SENF_ASSERT( packet_, "FastPassiveInput::operator() called without being signaled (no packet)" );
    return * packet_;
}

template <class PacketType>
prefix_ void senf::ppi::connector::FastPassiveInput<PacketType>::v_init()
{}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::connector::FastActiveOutput<PacketType>

template <class PacketType>
prefix_ senf::ppi::connector::FastActiveOutput<PacketType>::FastActiveOutput()
{}

template <class PacketType>
prefix_ senf::ppi::connector::FastActiveOutput<PacketType>::~FastActiveOutput()
{
    unregisterConnector();
}

template <class PacketType>
prefix_ senf::ppi::connector::FastPassiveInput<PacketType> &
senf::ppi::connector::FastActiveOutput<PacketType>::peer()
    const
{
    return static_cast<FastPassiveInput<PacketType> &>(Connector::peer());
}

template <class PacketType>
prefix_ void
senf::ppi::connector::FastActiveOutput<PacketType>::operator()(PacketType const & packet)
    const
{
    peer().packet_ = & packet;
    peer().cb_();
    peer().packet_ = 0;
}

template <class PacketType>
prefix_ void senf::ppi::connector::FastActiveOutput<PacketType>::v_init()
{}

///////////////////////////////////////////////////////////////////////////

template <class PacketType>
prefix_ void senf::ppi::connect(connector::FastActiveOutput<PacketType> & source,
                                connector::FastPassiveInput<PacketType> & target)
{
    source.connect(target);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
