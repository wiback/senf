//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief FastConnector inline template implementation */

//#include "FastConnector.ih"

// Custom includes
#include <senf/Utils/type_traits.hh>

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::connector::FastPassiveInput<PacketType>

template <class PacketType>
prefix_ senf::ppi::connector::FastPassiveInput<PacketType>::FastPassiveInput()
{}

template <class PacketType>
prefix_ senf::ppi::connector::FastPassiveInput<PacketType>::~FastPassiveInput()
{
    unregisterConnector();
}

template <class PacketType>
prefix_ senf::ppi::connector::FastActiveOutput<PacketType> &
senf::ppi::connector::FastPassiveInput<PacketType>::peer()
    const
{
    return static_cast<FastActiveOutput<PacketType> &>(Connector::peer());
}

template <class PacketType>
template <class Handler>
prefix_ void senf::ppi::connector::FastPassiveInput<PacketType>::onRequest(Handler handler)
{
    cb_.bind(static_cast<typename senf::member_class<Handler>::type *>(& module()), handler);
}

template <class PacketType>
prefix_ PacketType const & senf::ppi::connector::FastPassiveInput<PacketType>::operator()()
    const
{
    SENF_ASSERT( packet_, "FastPassiveInput::operator() called without being signaled (no packet)" );
    return * packet_;
}

template <class PacketType>
prefix_ void senf::ppi::connector::FastPassiveInput<PacketType>::v_init()
{}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::connector::FastActiveOutput<PacketType>

template <class PacketType>
prefix_ senf::ppi::connector::FastActiveOutput<PacketType>::FastActiveOutput()
{}

template <class PacketType>
prefix_ senf::ppi::connector::FastActiveOutput<PacketType>::~FastActiveOutput()
{
    unregisterConnector();
}

template <class PacketType>
prefix_ senf::ppi::connector::FastPassiveInput<PacketType> &
senf::ppi::connector::FastActiveOutput<PacketType>::peer()
    const
{
    return static_cast<FastPassiveInput<PacketType> &>(Connector::peer());
}

template <class PacketType>
prefix_ void
senf::ppi::connector::FastActiveOutput<PacketType>::operator()(PacketType const & packet)
    const
{
    peer().packet_ = & packet;
    peer().cb_();
    peer().packet_ = 0;
}

template <class PacketType>
prefix_ void senf::ppi::connector::FastActiveOutput<PacketType>::v_init()
{}

///////////////////////////////////////////////////////////////////////////

template <class PacketType>
prefix_ void senf::ppi::connect(connector::FastActiveOutput<PacketType> & source,
                                connector::FastPassiveInput<PacketType> & target)
{
    source.connect(target);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
