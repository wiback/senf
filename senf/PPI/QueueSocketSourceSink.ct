// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.fokus.fraunhofer.de.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <senf@g0dil.de>

/** \file
    \brief QueueSocketSourceSink non-inline template implementation */

#include "QueueSocketSourceSink.ih"

// Custom includes
#include <senf/Utils/membind.hh>
#include <senf/Packets/PacketInfo.hh>
#include <senf/Utils/senflikely.hh>
#include "SocketSource.hh"
#include <senf/Socket/QueueReadWritePolicy.ih>
#include <senf/Socket/Protocols/Raw/MMapPacketSocketHandle.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveQueueSocketSource<Packet>

template <class Packet, class Connector>
prefix_
senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::ActiveQueueSocketSource(unsigned burst)
    : handle_ ()
    , event_ ()
    , redFilterCallback_(redFilterDrop)
    , maxBurst_ (burst)
    , burst_(0)
    , flushPending_(false)
    , red_(0)
#ifdef SENF_DEBUG
    , burstMax_ (0)
#endif
{
    registerEvent(event_, &ActiveQueueSocketSource::read);
    route(event_, output);
}

template <class Packet, class Connector>
prefix_ senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::
ActiveQueueSocketSource(Handle const & handle, unsigned burst)
    : handle_ (handle)
    , event_ (handle_, IOEvent::Read)
    , redFilterCallback_(redFilterDrop)
    , maxBurst_ (burst)
    , burst_(0)
    , flushPending_(false)
    , red_(0)
#ifdef SENF_DEBUG
    , burstMax_ (0)
#endif
{
    registerEvent(event_, &ActiveQueueSocketSource::read);
    noroute(output);
    senf::ppi::detail::RouteConnector<Connector>::route(*this, event_, output);
}

template <class Packet, class Connector>
prefix_ typename senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::Handle
senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::handle()
    const
{
    return handle_;
}

template <class Packet, class Connector>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::handle(Handle const & handle)
{
    burst_ = 0;
    flushPending_ = false;
    red_ = 0;
    handle_ = handle;
    event_.set(handle_, IOEvent::Read);
}

#ifdef SENF_DEBUG

template <class Packet, class Connector>
prefix_ unsigned senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::burstMax()
{
    unsigned res (burstMax_);
    burstMax_ = 0;
    return res;
}

#endif

template <class Packet, class Connector>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::setREDFilterCallback(REDFilterCallback const & cb)
{
    redFilterCallback_ = cb;
}

template <class Packet, class Connector>
prefix_ void senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::read()
{
    if (SENF_UNLIKELY(!handle_))
        return;

    senf::detail::QueueInfo & qi (* senf::detail::QueuePolicyBase::qinfo(handle_));
    unsigned usage (qi.usageRx());

    // simple RED (i.e. due to CPU overload) starting at > 25% usage
    if (SENF_UNLIKELY(usage > (senf::detail::QueueInfo::NUM_SAMPLES/4))) {
        usage = maxBurst_ / usage;
    } else {
        usage = 0;
    }
    
    flushPending_ = false;
    for (burst_ = 1; SENF_LIKELY(handle_ and (burst_ <= maxBurst_) and !flushPending_); burst_++) {
        boost::optional<senf::QueueReadPolicy::Buffer> buf (handle_.dequeue());
        if (SENF_UNLIKELY(!buf))
            break;
            
        PacketInfo ifo;
        {
           Packet pk (Packet::create(
                           buf->frameBegin(),
                           buf->size(),
                           buf->frameSize(),
                           buf->dataOffset()));
            pk.template annotation<senf::ppi::QueueBufferAnnotation>().value = &(*buf);
#ifdef SENF_PPI_READ_TIMESTAMP
            pk.template annotation<senf::ppi::ReadTimestamp>().value = senf::ClockService::now();
#endif
            ifo = PacketInfo(pk);
            
            if (SENF_UNLIKELY((usage > 0) and ((burst_ % usage) == 0) and !redFilterCallback_(pk))) {
                // drop frame
                qi.rxStats.red++;
                red_++;
            } else {
                // process frame
                output(pk);
            }
        }
        
        if (SENF_UNLIKELY(ifo.is_shared() and handle_)) {
            qi.rxStats.extMemory++;
            ifo.releaseExternalMemory();
        }
    }
#ifdef SENF_DEBUG
    if (burst_ > burstMax_)
        burstMax_ = burst_;
#endif

    // we were triggered, but no valid packet was available
    if (SENF_UNLIKELY(burst_ == 1)) {
        qi.rxStats.noop++;
    }

    // this tells flush() that we are done with the for() loop
    burst_ = 0;

    if (SENF_LIKELY(handle_)) {
        if (SENF_UNLIKELY(flushPending_))
            flush();
        else
            handle_.release();
    }
}

template <class Packet, class Connector>
prefix_ std::pair<unsigned,unsigned> senf::ppi::module::ActiveQueueSocketSource<Packet,Connector>::dropped()
{
    unsigned dropped (0);
    if (handle_) {
        try {
            auto & h (reinterpret_cast<ConnectedMMapPacketSocketHandle &>(handle_));
            dropped = h.protocol().rxQueueDropped();
        } catch (...) {};
    }
    std::pair<unsigned,unsigned> tmp (std::make_pair(red_, dropped));
    red_ = 0;
    return tmp;
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveQueueSocketSink

template <class Connector>
prefix_ senf::ppi::module::PassiveQueueSocketSink<Connector>::PassiveQueueSocketSink()
    : handle_ ()
    , eventHook_ ("PassiveQueueSocketSink", senf::membind(&PassiveQueueSocketSink::send, this),
              senf::scheduler::EventHook::POST, false)
    , redFilterCallback_(redFilterDrop)
    , red_(0)
    , dropped_(0)
#ifdef SENF_DEBUG
    , burst_ (0)
    , burstMax_ (0)
#endif
{
    noroute(input);
    input.onRequest(&PassiveQueueSocketSink::write);
    input.throttlingDisc( ThrottlingDiscipline::NONE);
}

template <class Connector>
prefix_ senf::ppi::module::PassiveQueueSocketSink<Connector>::PassiveQueueSocketSink(Handle const & handle)
    : handle_ (handle)
    , eventHook_ ("PassiveQueueSocketSink", senf::membind(&PassiveQueueSocketSink::send, this),
              senf::scheduler::EventHook::POST, false)
    , redFilterCallback_(redFilterDrop)
    , red_(0)
    , dropped_(0)  
#ifdef SENF_DEBUG
    , burst_ (0)
    , burstMax_ (0)
#endif
{
    noroute(input);
    input.onRequest(&PassiveQueueSocketSink::write);
    input.throttlingDisc( ThrottlingDiscipline::NONE);
}

template <class Connector>
prefix_ typename senf::ppi::module::PassiveQueueSocketSink<Connector>::Handle
senf::ppi::module::PassiveQueueSocketSink<Connector>::handle()
    const
{
    return handle_;
}

template <class Connector>
prefix_ void senf::ppi::module::PassiveQueueSocketSink<Connector>::handle(Handle const & handle)
{
    handle_ = handle;
    eventHook_.disable();
    red_ = dropped_ = 0;
}

#ifdef SENF_DEBUG
template <class Connector>
prefix_ unsigned senf::ppi::module::PassiveQueueSocketSink<Connector>::burstMax()
{
    unsigned res (burstMax_);
    burstMax_ = 0;
    return res;
}
#endif

template <class Connector>
prefix_ void senf::ppi::module::PassiveQueueSocketSink<Connector>::setREDFilterCallback(REDFilterCallback const & cb)
{
    redFilterCallback_ = cb;
}

template <class Connector>
prefix_ void senf::ppi::module::PassiveQueueSocketSink<Connector>::send()
{
    if (handle_) {
        handle_.send();
        eventHook_.disable();
    }

#ifdef SENF_DEBUG
    if (burst_ > burstMax_)
        burstMax_ = burst_;
    burst_ = 0;
#endif
}

template <class Connector>
prefix_ void senf::ppi::module::PassiveQueueSocketSink<Connector>::write()
{
    Packet const & packet (input());

    if (SENF_UNLIKELY(!handle_))
        return;

    // simple RED starting at > 25% usage
    senf::detail::QueueInfo & qi (* senf::detail::QueuePolicyBase::qinfo(handle_));
    unsigned usage (qi.usageTx());

    if (SENF_UNLIKELY(usage > (senf::detail::QueueInfo::NUM_SAMPLES/4))) {
        if ((std::uint32_t(rand()) % senf::detail::QueueInfo::NUM_SAMPLES) < usage) {
            if (!redFilterCallback_(packet)) {
                qi.txStats.red++;
                red_++;
                return;
            }
        }
    }

    boost::optional<QueueWritePolicy::Buffer> buf (handle_.enqueue());
    if (SENF_UNLIKELY(!buf)) {
        dropped_++;
        return;
    }
    
    writePacket(packet, *buf);
}

template <class Connector>
prefix_ void senf::ppi::module::PassiveQueueSocketSink<Connector>::writePacket(senf::Packet const & packet, QueueReadPolicy::Buffer & buf)
{
    SENF_ASSERT( packet.data().size(), "cannot send empty packet" );
    unsigned sz (std::min(packet.data().size(), buf.frameSize()));
    buf.resize(sz);
    ::memcpy(buf.begin(), packet.data().begin(), sz);
    eventHook_.enable();
#ifdef SENF_DEBUG
    ++ burst_;
#endif
}

template <class Connector>
prefix_ std::pair<unsigned,unsigned> senf::ppi::module::PassiveQueueSocketSink<Connector>::dropped()
{
    std::pair<unsigned,unsigned> tmp (std::make_pair(red_,dropped_));
    red_ = dropped_ = 0;
    return tmp;
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
