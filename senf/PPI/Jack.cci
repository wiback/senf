//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Jack inline non-template implementation */

//#include "Jack.ih"

// Custom includes
#include "Setup.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::ppi::connector::GenericActiveInputJack::
GenericActiveInputJack(GenericActiveInput & input)
    : input_ (&input)
{}

prefix_ senf::ppi::connector::GenericActiveInput &
senf::ppi::connector::GenericActiveInputJack::connector()
{
    return *input_;
}

prefix_ senf::ppi::connector::GenericActiveInput *
senf::ppi::connector::GenericActiveInputJack::operator->()
{
    return input_;
}

prefix_ senf::ppi::connector::GenericActiveOutputJack::
GenericActiveOutputJack(GenericActiveOutput & output)
    : output_ (&output)
{}

prefix_ senf::ppi::connector::GenericActiveOutput &
senf::ppi::connector::GenericActiveOutputJack::connector()
{
    return *output_;
}

prefix_ senf::ppi::connector::GenericActiveOutput *
senf::ppi::connector::GenericActiveOutputJack::operator->()
{
    return output_;
}

prefix_ senf::ppi::connector::GenericPassiveInputJack::
GenericPassiveInputJack(GenericPassiveInput & input)
    : input_ (&input)
{}

prefix_ senf::ppi::connector::GenericPassiveInput &
senf::ppi::connector::GenericPassiveInputJack::connector()
{
    return *input_;
}

prefix_ senf::ppi::connector::GenericPassiveInput *
senf::ppi::connector::GenericPassiveInputJack::operator->()
{
    return input_;
}

prefix_ senf::ppi::connector::GenericPassiveOutputJack::
GenericPassiveOutputJack(GenericPassiveOutput & output)
    : output_ (&output)
{}

prefix_ senf::ppi::connector::GenericPassiveOutput &
senf::ppi::connector::GenericPassiveOutputJack::connector()
{
    return *output_;
}

prefix_ senf::ppi::connector::GenericPassiveOutput *
senf::ppi::connector::GenericPassiveOutputJack::operator->()
{
    return output_;
}

prefix_ senf::ppi::connector::ActiveInputJack<senf::Packet>::
ActiveInputJack(GenericActiveInput & input)
    : GenericActiveInputJack (input)
{}

prefix_ senf::ppi::connector::ActiveInputJack<senf::Packet>::
ActiveInputJack(GenericActiveInputJack input)
    : GenericActiveInputJack (input.connector())
{}

prefix_ void senf::ppi::connector::ActiveInputJack<senf::Packet>::reset(GenericActiveInput & input)
{
    GenericActiveInputJack::reset(input);
}

prefix_ void senf::ppi::connector::ActiveInputJack<senf::Packet>::reset(GenericActiveInputJack input)
{
    GenericActiveInputJack::reset(input.connector());
}

prefix_ senf::ppi::connector::ActiveOutputJack<senf::Packet>::
ActiveOutputJack(GenericActiveOutput & output)
    : GenericActiveOutputJack (output)
{}

prefix_ senf::ppi::connector::ActiveOutputJack<senf::Packet>::
ActiveOutputJack(GenericActiveOutputJack & output)
    : GenericActiveOutputJack (output.connector())
{}

prefix_ void senf::ppi::connector::ActiveOutputJack<senf::Packet>::reset(GenericActiveOutput & output)
{
    GenericActiveOutputJack::reset(output);
}

prefix_ void
senf::ppi::connector::ActiveOutputJack<senf::Packet>::reset(GenericActiveOutputJack & output)
{
    GenericActiveOutputJack::reset(output.connector());
}

prefix_ senf::ppi::connector::PassiveInputJack<senf::Packet>::
PassiveInputJack(GenericPassiveInput & input)
    : GenericPassiveInputJack (input)
{}

prefix_ senf::ppi::connector::PassiveInputJack<senf::Packet>::
PassiveInputJack(GenericPassiveInputJack & input)
    : GenericPassiveInputJack (input.connector())
{}

prefix_ void senf::ppi::connector::PassiveInputJack<senf::Packet>::reset(GenericPassiveInput & input)
{
    GenericPassiveInputJack::reset(input);
}

prefix_ void
senf::ppi::connector::PassiveInputJack<senf::Packet>::reset(GenericPassiveInputJack & input)
{
    GenericPassiveInputJack::reset(input.connector());
}

prefix_ senf::ppi::connector::PassiveOutputJack<senf::Packet>::
PassiveOutputJack(GenericPassiveOutput & output)
    : GenericPassiveOutputJack (output)
{}

prefix_ senf::ppi::connector::PassiveOutputJack<senf::Packet>::
PassiveOutputJack(GenericPassiveOutputJack & output)
    : GenericPassiveOutputJack (output.connector())
{}

prefix_ void
senf::ppi::connector::PassiveOutputJack<senf::Packet>::reset(GenericPassiveOutput & output)
{
    GenericPassiveOutputJack::reset(output);
}

prefix_ void
senf::ppi::connector::PassiveOutputJack<senf::Packet>::reset(GenericPassiveOutputJack & output)
{
    GenericPassiveOutputJack::reset(output.connector());
}

prefix_ void senf::ppi::connect(connector::GenericActiveOutputJack & source,
                                connector::GenericPassiveInputJack & target)
{
    connect(source.connector(), target.connector());
}

prefix_ void senf::ppi::connect(connector::GenericPassiveOutputJack & source,
                                connector::GenericActiveInputJack & target)
{
    connect(source.connector(), target.connector());
}

prefix_ void senf::ppi::connect(connector::GenericActiveOutputJack & source,
                                connector::GenericPassiveInput & target)
{
    connect(source.connector(), target);
}

prefix_ void senf::ppi::connect(connector::GenericPassiveOutputJack & source,
                                connector::GenericActiveInput & target)
{
    connect(source.connector(), target);
}

prefix_ void senf::ppi::connect(connector::GenericActiveOutput & source,
                                connector::GenericPassiveInputJack & target)
{
    connect(source, target.connector());
}

prefix_ void senf::ppi::connect(connector::GenericPassiveOutput & source,
                                connector::GenericActiveInputJack & target)
{
    connect(source, target.connector());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
