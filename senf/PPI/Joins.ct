//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Joins non-inline template implementation */

#include "Joins.hh"

// Custom includes
#include <algorithm>
#include <boost/bind.hpp>
#include <boost/lambda/lambda.hpp>
#include <boost/lambda/bind.hpp>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveJoin

template <class PacketType>
prefix_ senf::ppi::module::PassiveJoin<PacketType>::PassiveJoin()
{
    noroute(output);
    output.onThrottle(&PassiveJoin::onThrottle);
    output.onUnthrottle(&PassiveJoin::onUnthrottle);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class PacketType>
prefix_ void senf::ppi::module::PassiveJoin<PacketType>::connectorSetup(connector::PassiveInput<PacketType> & conn)
{
    noroute(conn);
    conn.onRequest(boost::bind(&PassiveJoin::request,this,boost::ref(conn)));
    conn.throttlingDisc( ThrottlingDiscipline::NONE);
}

template <class PacketType>
prefix_ void senf::ppi::module::PassiveJoin<PacketType>::onThrottle()
{
    using boost::lambda::_1;
    using boost::lambda::bind;
    std::for_each(this->connectors().begin(), this->connectors().end(),
                  bind(&connector::GenericPassiveInput::throttle, _1));
}

template <class PacketType>
prefix_ void senf::ppi::module::PassiveJoin<PacketType>::onUnthrottle()
{
    using boost::lambda::_1;
    using boost::lambda::bind;
    std::for_each(this->connectors().begin(), this->connectors().end(),
                  bind(&connector::GenericPassiveInput::unthrottle, _1));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
