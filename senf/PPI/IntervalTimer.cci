// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief IntervalTimer inline non-template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::IntervalTimer

prefix_ senf::ppi::IntervalTimer::IntervalTimer(ClockService::clock_type interval,
                                                unsigned eventsPerInterval)
    : interval_ (interval), eventsPerInterval_ (eventsPerInterval),
      timer_ ("senf::ppi::IntervalTimer",  boost::bind(&IntervalTimer::cb,this))
{}

prefix_ senf::ppi::IntervalTimer::IntervalTimer()
    : interval_ (0), eventsPerInterval_ (0),
      timer_ ("senf::ppi::IntervalTimer",  boost::bind(&IntervalTimer::cb,this))
{}

prefix_ void senf::ppi::IntervalTimer::interval(ClockService::clock_type interval,
                                                unsigned eventsPerInterval)
{
    enabled(false);
    interval_ = interval;
    eventsPerInterval_ = eventsPerInterval;
    enabled(true);
}

prefix_ std::pair<senf::ClockService::clock_type, unsigned> senf::ppi::IntervalTimer::interval()
    const
{
    return std::make_pair(interval_, eventsPerInterval_);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
