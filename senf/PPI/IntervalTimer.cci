// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief IntervalTimer inline non-template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::IntervalTimer

prefix_ senf::ppi::IntervalTimer::IntervalTimer(ClockService::clock_type interval,
                                                unsigned eventsPerInterval)
    : interval_ (interval), eventsPerInterval_ (eventsPerInterval),
      timer_ ("senf::ppi::IntervalTimer",  boost::bind(&IntervalTimer::cb,this))
{}

prefix_ senf::ppi::IntervalTimer::IntervalTimer()
    : interval_ (0), eventsPerInterval_ (0),
      timer_ ("senf::ppi::IntervalTimer",  boost::bind(&IntervalTimer::cb,this))
{}

prefix_ void senf::ppi::IntervalTimer::interval(ClockService::clock_type interval,
                                                unsigned eventsPerInterval)
{
    enabled(false);
    interval_ = interval;
    eventsPerInterval_ = eventsPerInterval;
    enabled(true);
}

prefix_ std::pair<senf::ClockService::clock_type, unsigned> senf::ppi::IntervalTimer::interval()
    const
{
    return std::make_pair(interval_, eventsPerInterval_);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
