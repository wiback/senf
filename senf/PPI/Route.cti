// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Route inline template implementation */

#include "Route.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::Route<Source,Target>

template <class Source, class Target>
prefix_ senf::ppi::Route<Source,Target>::Route(module::Module & module, Source & source,
                                               Target & target)
    : Base(module,source,target)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::ForwardingRoute

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class T>
prefix_ void senf::ppi::ForwardingRoute::registerRoute(T & ob)
{
    ob.registerRoute(*this);
}

template <class T>
prefix_ void senf::ppi::ForwardingRoute::unregisterRoute(T & ob)
{
    ob.unregisterRoute(*this);
}

template <class T>
prefix_ void senf::ppi::ForwardingRoute::notifyThrottle(T & ob)
{
    ob.notifyThrottle();
}

template <class T>
prefix_ void senf::ppi::ForwardingRoute::notifyUnthrottle(T & ob)
{
    ob.notifyUnthrottle();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>

template <class Source, class Target, class Base>
prefix_ Source & senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::source()
    const
{
    return *source_;
}

template <class Source, class Target, class Base>
prefix_ Target & senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::target()
    const
{
    return *target_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class Source, class Target, class Base>
prefix_ senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::
BaseRouteImplementation(module::Module & module, Source & source, Target & target)
    : Base(module), source_(&source), target_(&target)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Source, class Target, class Base>
prefix_ bool senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::
v_hasConnector(connector::Connector const & conn)
    const
{
    return isSame(conn, source()) || isSame(conn, target());
}

template <class Source, class Target, class Base>
prefix_ bool senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::
v_hasEvent(EventDescriptor const & event)
    const
{
    return isSame(event, source()) || isSame(event, target());
}

template <class Source, class Target, class Base>
prefix_ bool senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::
isSame(connector::Connector const & conn, connector::Connector const & other)
    const
{
    return &conn == &other;
}

template <class Source, class Target, class Base>
prefix_ bool senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::
isSame(connector::Connector const & conn, EventDescriptor const & other)
    const
{
    return false;
}

template <class Source, class Target, class Base>
prefix_ bool senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::
isSame(EventDescriptor const & event, connector::Connector const & other)
    const
{
    return false;
}

template <class Source, class Target, class Base>
prefix_ bool senf::ppi::detail::BaseRouteImplementation<Source,Target,Base>::
isSame(EventDescriptor const & event, EventDescriptor const & other)
    const
{
    return &event == &other;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::ForwardingRouteImplementation<Source,Target>

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class Source, class Target>
prefix_
senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
ForwardingRouteImplementation(module::Module & module, Source & source, Target & target)
    : Base(module,source,target)
{
    registerRoute(source);
    registerRoute(target);
}

template <class Source, class Target>
prefix_
senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
~ForwardingRouteImplementation()
{
    unregisterRoute(this->source());
    unregisterRoute(this->target());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Source, class Target>
template <class T>
prefix_ void senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
notifyThrottle(T & ob, boost::mpl::bool_<true> const &)
{
    ForwardingRoute::notifyThrottle(ob);
}

template <class Source, class Target>
template <class T>
prefix_ void senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
notifyThrottle(T & ob, boost::mpl::bool_<false> const &)
{}

template <class Source, class Target>
template <class T>
prefix_ void senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
notifyUnthrottle(T & ob, boost::mpl::bool_<true> const &)
{
    ForwardingRoute::notifyUnthrottle(ob);
}

template <class Source, class Target>
template <class T>
prefix_ void senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
notifyUnthrottle(T & ob, boost::mpl::bool_<false> const &)
{}

template <class Source, class Target>
template <class T>
prefix_ bool senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
throttled(T & ob, boost::mpl::bool_<true> const &)
    const
{
    return ob.throttled();
}

template <class Source, class Target>
template <class T>
prefix_ bool senf::ppi::detail::ForwardingRouteImplementation<Source,Target>::
throttled(T & ob, boost::mpl::bool_<false> const &)
    const
{
    return false;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::RouteImplementation2<Source,Target>

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class Source, class Target>
prefix_ senf::ppi::detail::RouteImplementation2<Source,Target>::
RouteImplementation2(module::Module & module, Source & source, Target & target)
    : Base(module,source,target)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::RouteImplementation<Source,Target>

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class Source, class Target>
prefix_ senf::ppi::detail::RouteImplementation<Source,Target>::
RouteImplementation(module::Module & module, Source & source, Target & target)
    : Base(module,source,target)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
