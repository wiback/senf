//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief QueueingAlgorithm inline template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::QueueingAlgorithmRegistry::RegistrationProxy<QAlgorithm>

template <class QAlgorithm>
prefix_ senf::ppi::QueueingAlgorithmRegistry::RegistrationProxy<QAlgorithm>::RegistrationProxy(std::string const & key)
{
    QueueingAlgorithmRegistry::instance().registerQAlgorithm<QAlgorithm>( key);
};

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::QueueingAlgorithmRegistry

template <class QAlgorithm>
prefix_ void senf::ppi::QueueingAlgorithmRegistry::registerQAlgorithm(std::string key)
{
    if (qAlgoMap_.find( key) == qAlgoMap_.end() )
        qAlgoMap_.insert(key, new detail::QueueingAlgorithmRegistry_Entry<QAlgorithm>() );
    else
        throw Exception("Duplicated QAlgorithm Registration ") << key;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::QueueingAlgorithmRegistry_Entry<QAlgorithm>

template <class QAlgorithm>
prefix_ senf::ppi::QueueingAlgorithm::ptr senf::ppi::detail::QueueingAlgorithmRegistry_Entry<QAlgorithm>::create()
    const
{
    return QAlgorithm::create();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
