// $Id$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Thorsten Horstmann <tho@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief QueueingSocketSink non-inline template implementation  */

//#include "QueueingSocketSink.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::FIFOQueueingAlgorithm<PacketType>

template <typename PacketType>
prefix_ senf::ppi::FIFOQueueingAlgorithm<PacketType>::FIFOQueueingAlgorithm(unsigned size)
    : size_( size)
{ }

template <typename PacketType>
prefix_ PacketType senf::ppi::FIFOQueueingAlgorithm<PacketType>::dequeue()
{
    if (queue_.size() > 0) {
        PacketType const & p = queue_.front();
        queue_.pop();
        return p;
    }
    return PacketType();
}

template <typename PacketType>
prefix_ bool senf::ppi::FIFOQueueingAlgorithm<PacketType>::enqueue(PacketType const & packet)
{
    if (queue_.size() < size_) {
        queue_.push( packet);
        return true;
    }
    return false;
}

template <typename PacketType>
prefix_ void senf::ppi::FIFOQueueingAlgorithm<PacketType>::clear()
{
    while (! queue_.empty())
        queue_.pop();
}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveQueueingSocketSink<Writer>

template <class Writer>
template <class QAlgorithm>
prefix_ senf::ppi::module::PassiveQueueingSocketSink<Writer>::PassiveQueueingSocketSink(Handle handle, QAlgorithm const & qAlgorithm)
    : handle_( handle), writer_( ),
      qAlgo_( new QAlgorithm(qAlgorithm)),
      event_( handle_, IOEvent::Write)
{
    registerEvent( event_, &PassiveQueueingSocketSink::writable );
    event_.enabled( false);
    noroute(input);
    input.onRequest( &PassiveQueueingSocketSink::write);
    checkThrottle();
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::write()
{
    PacketType p ( input.read());
    if (qAlgo_->size() > 0) {
        qAlgo_->enqueue( p);
        return;
    }
    if (! writer_( handle_, p)) {
        if (qAlgo_->enqueue( p) && !event_.enabled()) {
            event_.enabled( true);
        }
    }
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::writable()
{
    PacketType p (qAlgo_->dequeue());
    if (p)
        writer_( handle_, p);
    if (qAlgo_->size() == 0) {
        event_.enabled( false);
    }
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::checkThrottle()
{
    if (handle_.valid())
        input.unthrottle();
    else
        input.throttle();
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
