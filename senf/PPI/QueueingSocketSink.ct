// $Id$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Thorsten Horstmann <tho@berlios.de>

/** \file
    \brief QueueingSocketSink non-inline template implementation  */

//#include "QueueingSocketSink.ih"

// Custom includes
#include <senf/Utils/Console/ParsedCommand.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::QueueingAlgorithmRegistry

template <class QAlgorithm>
prefix_ void senf::ppi::QueueingAlgorithmRegistry::registerQAlgorithm(std::string key)
{
    if (qAlgoMap_.find( key) == qAlgoMap_.end() )
        qAlgoMap_.insert(key, new detail::QueueingAlgorithmRegistry_Entry<QAlgorithm>() );
    else
        throw Exception("Duplicated QAlgorithm Registration ") << key;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::QueueingAlgorithmRegistry_Entry<QAlgorithm>

template <class QAlgorithm>
prefix_ senf::ppi::QueueingAlgorithm::ptr senf::ppi::detail::QueueingAlgorithmRegistry_Entry<QAlgorithm>::create()
    const
{
    return QAlgorithm::create();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveQueueingSocketSink<Writer>

template <class Writer>
prefix_ senf::ppi::module::PassiveQueueingSocketSink<Writer>::PassiveQueueingSocketSink(Handle const & handle, QueueingAlgorithm::ptr qAlgorithm)
    : dir( this),
      handle_( handle), writer_( ),
      qAlgo_( qAlgorithm),
      event_( handle_, IOEvent::Write)
{
    namespace fty = console::factory;
    dir.add( "active", qAlgo_->consoleDir());
    dir.add( "set", fty::Command(
            &PassiveQueueingSocketSink<Writer>::setQAlgorithm, this) );
    dir.add( "list", fty::Command(
            &QueueingAlgorithmRegistry::dump, &QueueingAlgorithmRegistry::instance()));
    registerEvent( event_, &PassiveQueueingSocketSink::writable );
    event_.enabled( false);
    noroute(input);
    input.onRequest( &PassiveQueueingSocketSink::write);
    input.qdisc( QueueingDiscipline::NONE);
    checkThrottle();
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::handle(Handle const & handle)
{
    handle_ = handle;
    event_.set( handle_, IOEvent::Write);
    qAlgo_->clear();
    checkThrottle();
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::write()
{
    PacketType p ( input());
    if (qAlgo_->size() > 0) {
        qAlgo_->enqueue( p);
        return;
    }
    if (! writer_( handle_, p)) {
        if (qAlgo_->enqueue( p) && !event_.enabled()) {
          event_.enabled( true);
        }
    }
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::writable()
{
    PacketType p (qAlgo_->dequeue());
    if (p)
        writer_( handle_, p);
    if (qAlgo_->size() == 0) {
        event_.enabled( false);
    }
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::checkThrottle()
{
    if (handle_.valid())
        input.unthrottle();
    else
        input.throttle();
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::qAlgorithm(QueueingAlgorithm::ptr qAlgorithm)
{
//    dir.remove( "active");
    qAlgo_.reset( qAlgorithm.release());
    dir.add( "active", qAlgo_->consoleDir());
    if (event_.enabled())
        event_.enabled( false);
}

template <class Writer>
prefix_ void senf::ppi::module::PassiveQueueingSocketSink<Writer>::setQAlgorithm(std::string const & key)
{
    qAlgorithm( QueueingAlgorithmRegistry::instance().createQAlgorithm( key));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End::
