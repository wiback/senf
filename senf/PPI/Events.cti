//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Events inline template implementation */

#include "Events.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>
#include "detail/EventBinding.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::EventImplementationHelper<EventType,Self>

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class EventType, class Self>
prefix_ void
senf::ppi::EventImplementationHelper<EventType,Self>::callback(EventArg event,
                                                               ClockService::clock_type time)
{
    binding().callback(event,time);
}

template <class EventType, class Self>
prefix_ void senf::ppi::EventImplementationHelper<EventType,Self>::callback(EventArg event)
{
    binding().callback(event);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class EventType, class Self>
prefix_ senf::ppi::detail::EventBinding<EventType> &
senf::ppi::EventImplementationHelper<EventType,Self>::binding()
{
    SENF_ASSERT( static_cast<Self*>(this)->binding_,
                 "senf::ppi::EventImplementationHelper::binding(): Missing registerEvent()" );
    return * static_cast<Self*>(this)->binding_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::EventImplementationHelper<void,Self>

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class Self>
prefix_ void
senf::ppi::EventImplementationHelper<void,Self>::callback(ClockService::clock_type time)
{
    binding().callback(time);
}

template <class Self>
prefix_ void senf::ppi::EventImplementationHelper<void,Self>::callback()
{
    binding().callback();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class Self>
prefix_ senf::ppi::detail::EventBinding<void> &
senf::ppi::EventImplementationHelper<void,Self>::binding()
{
    SENF_ASSERT( static_cast<Self*>(this)->binding_,
                 "senf::ppi::EventImplementationHelper::binding(): Missing registerEvent()" );
    return * static_cast<Self*>(this)->binding_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::EventImplementation<EventType>

template <class EventType>
prefix_ senf::ppi::module::Module & senf::ppi::EventImplementation<EventType>::module()
    const
{
    return binding_->module();
}

template <class EventType>
prefix_ senf::ppi::EventManager & senf::ppi::EventImplementation<EventType>::manager()
    const
{
    return binding_->manager();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class EventType>
prefix_ senf::ppi::EventImplementation<EventType>::EventImplementation()
    : binding_(nullptr)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

template <class EventType>
prefix_ bool senf::ppi::EventImplementation<EventType>::v_isRegistered()
{
    return binding_;
}

template <class EventType>
prefix_ void
senf::ppi::EventImplementation<EventType>::setBinding(detail::EventBinding<Event> & binding)
{
    binding_ = &binding;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
