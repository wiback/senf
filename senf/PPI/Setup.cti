// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Setup inline template implementation */

//#include "Setup.ih"

// Custom includes
#include "Jack.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN

template <class T, class C>
prefix_ void senf::ppi::
connect(T & source, C & target,
        typename boost::disable_if< boost::is_base_of<connector::Connector, T> >::type *,
        typename boost::enable_if< boost::is_base_of<connector::Connector, C> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardOutput, T> >::type *)
{
    connect(source.output, target);
}

template <class C, class T>
prefix_ void senf::ppi::
connect(C & source, T & target,
        typename boost::enable_if< boost::is_base_of<connector::Connector, C> >::type *,
        typename boost::disable_if< boost::is_base_of<connector::Connector,T> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardInput, T> >::type *)
{
    connect(source, target.input);
}

template <class T1, class T2>
prefix_ void senf::ppi::
connect(T1 & source, T2 & target,
        typename boost::disable_if< boost::is_base_of<connector::Connector, T1> >::type *,
        typename boost::disable_if< boost::is_base_of<connector::Connector, T2> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardOutput, T1> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardInput, T2> >::type *)
{
    connect(source.output, target.input);
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
