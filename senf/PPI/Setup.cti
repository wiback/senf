//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Setup inline template implementation */

//#include "Setup.ih"

// Custom includes
#include "Jack.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN

template <class T, class C>
prefix_ void senf::ppi::connect(T & source, C & target,
        typename boost::disable_if< boost::is_base_of<connector::Connector, T> >::type *,
        typename boost::enable_if< boost::is_base_of<connector::Connector, C> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardOutput, T> >::type *)
{
    connect(source.output, target);
}

template <class C, class T>
prefix_ void senf::ppi::connect(C & source, T & target,
        typename boost::enable_if< boost::is_base_of<connector::Connector, C> >::type *,
        typename boost::disable_if< boost::is_base_of<connector::Connector,T> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardInput, T> >::type *)
{
    connect(source, target.input);
}

template <class T1, class T2>
prefix_ void senf::ppi::connect(T1 & source, T2 & target,
        typename boost::disable_if< boost::is_base_of<connector::Connector, T1> >::type *,
        typename boost::disable_if< boost::is_base_of<connector::Connector, T2> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardOutput, T1> >::type *,
        typename boost::disable_if< boost::is_base_of<detail::DisableStandardInput, T2> >::type *)
{
    connect(source.output, target.input);
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
