//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief QueueingSocketSink inline non-template implementation */

//#include "QueueingSocketSink.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::QueueingAlgorithm

prefix_ unsigned senf::ppi::QueueingAlgorithm::size()
    const
{
    return v_size();
}

prefix_ unsigned senf::ppi::QueueingAlgorithm::peek(unsigned maxSize)
    const
{
    return v_peek(maxSize);
}

prefix_ void senf::ppi::QueueingAlgorithm::clear()
{
    v_clear();
}

prefix_ bool senf::ppi::QueueingAlgorithm::empty()
    const
{
    return v_empty();
}

prefix_ senf::Packet const & senf::ppi::QueueingAlgorithm::front()
    const
{
    return v_front();
}

prefix_ bool senf::ppi::QueueingAlgorithm::enqueue(Packet const & packet, bool force)
{
    return v_enqueue( packet, force);
}

prefix_ void senf::ppi::QueueingAlgorithm::pop()
{
    return v_pop();
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::FIFOQueueingAlgorithm

prefix_ unsigned senf::ppi::FIFOQueueingAlgorithm::v_size()
    const
{
    return queue_.size();
}

prefix_ unsigned senf::ppi::FIFOQueueingAlgorithm::v_peek(unsigned maxSize)
    const
{
    if (!queue_.empty() and (queue_.front().size() <= maxSize))
        return queue_.front().size();
    return 0;
}

prefix_ senf::Packet const & senf::ppi::FIFOQueueingAlgorithm::v_front()
    const
{
    return queue_.front();
}


prefix_ void senf::ppi::FIFOQueueingAlgorithm::v_pop()
{
    queue_.pop();
}

prefix_ bool senf::ppi::FIFOQueueingAlgorithm::v_empty()
    const
{
    return queue_.empty();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::NoneQueueingAlgorithm

prefix_ unsigned senf::ppi::NoneQueueingAlgorithm::v_size()
    const
{
    return 0u;
}

prefix_ unsigned senf::ppi::NoneQueueingAlgorithm::v_peek(unsigned maxSize)
    const
{
    return 0;
}

prefix_ senf::Packet const & senf::ppi::NoneQueueingAlgorithm::v_front()
    const
{
    static senf::Packet _pkt_;
    return _pkt_;
}

prefix_ void senf::ppi::NoneQueueingAlgorithm::v_pop()
{
}

prefix_ void senf::ppi::NoneQueueingAlgorithm::v_clear()
{}

prefix_ bool senf::ppi::NoneQueueingAlgorithm::v_enqueue(Packet const & packet, bool force)
{
    return false;
}

prefix_ bool senf::ppi::NoneQueueingAlgorithm::v_empty()
    const
{
    return true;
}

prefix_ senf::ppi::QueueingAlgorithm::ptr senf::ppi::NoneQueueingAlgorithm::create()
{
    return QueueingAlgorithm::ptr(new NoneQueueingAlgorithm());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
