//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief MultiConnectorMixin non-inline template implementation  */

#include "MultiConnectorMixin.ih"

// Custom includes

#include <boost/lambda/lambda.hpp>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>

template <class Self_, class ConnectorType_, class KeyType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,KeyType_,ContainerType_>::
disconnected(ConnectorType_ const & c)
{
    typename ContainerType::iterator i (
        find_if(connectors_.begin(), connectors_.end(),
                boost::bind(&ContainerType_::value_type::second,_1) == &c));
    if (i != connectors_.end()) {
        static_cast<Self_*>(this)->connectorDestroy(c);
        connectors_.erase(i);
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>

template <class Self_, class ConnectorType_, class ContainerType_>
prefix_ void
senf::ppi::module::MultiConnectorMixin<Self_,ConnectorType_,void,ContainerType_>::
disconnected(ConnectorType_ const & c)
{
    using boost::lambda::_1;

    typename ContainerType::iterator i (
        find_if(connectors_.begin(), connectors_.end(), &_1 == &c));
    if (i != connectors_.end()) {
        static_cast<Self_*>(this)->connectorDestroy(c);
        connectors_.erase(i);
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
