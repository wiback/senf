//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SocketSource non-inline template implementation  */

//#include "SocketSource.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::DgramReader<Packet,MaxSize>

template <class Packet, unsigned MaxSize>
prefix_ Packet senf::ppi::DgramReader<Packet,MaxSize>::operator()(Handle & handle)
{
    Packet packet (Packet::create(senf::noinit));
    handle.read(packet.data(), MaxSize);
#ifdef SENF_PPI_READ_TIMESTAMP
    packet.template annotation<senf::ppi::ReadTimestamp>().value = senf::ClockService::now();
#endif
    return packet;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveSocketSource<Reader>

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource(unsigned max_burst)
    : maxBurst_(max_burst), burst_(0)
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource(Reader reader, unsigned max_burst)
    : reader_(reader), maxBurst_(maxBurst), burst_(0)
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource(Handle const & handle, unsigned max_burst)
    : handle_(handle), event_(handle_, IOEvent::Read), maxBurst_(max_burst), burst_(0)
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource(Handle const & handle,
                                                                          Reader reader, unsigned max_burst)
    : handle_(handle), event_(handle_, IOEvent::Read), reader_(reader), maxBurst_(max_burst), burst_(0)
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ void senf::ppi::module::ActiveSocketSource<Reader>::maxBurst(unsigned max_burst)
{
    maxBurst_ = max_burst;
}

template <class Reader>
prefix_ unsigned senf::ppi::module::ActiveSocketSource<Reader>::maxBurst()
    const
{
    return maxBurst_;
}

template <class Reader>
prefix_ void senf::ppi::module::ActiveSocketSource<Reader>::read()
{
    flush_pending_ = false;
    for (burst_ = 1; handle_ and !flush_pending_ and (burst_ <= maxBurst_); ++burst_) {
        typename Reader::PacketType p (reader_(handle_));
        if (SENF_LIKELY(p and (p.data().size() > 0))) {
            rxStats_.received++;
            output(p);
        }
        else {
            if (burst_ == 1)
                rxStats_.noop++;
            break;
        }
    }

    burst_ = 0;
    if (flush_pending_) {
       flush();
    }
}

template <class Reader>
prefix_ void senf::ppi::module::ActiveSocketSource<Reader>::flush()
{
    if (!handle_)
        return;

    if (burst_ > 0) {
      flush_pending_ = true;
      return;
    }

    try {
        while (handle_ && handle_.readable() && reader_(handle_));
    }
    catch (...) {};
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
