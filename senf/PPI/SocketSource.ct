// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SocketSource non-inline template implementation  */

//#include "SocketSource.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::DgramReader<Packet,MaxSize>

template <class Packet, unsigned MaxSize>
prefix_ Packet senf::ppi::DgramReader<Packet,MaxSize>::operator()(Handle & handle)
{
    Packet packet (Packet::create(senf::noinit));
    handle.read(packet.data(), MaxSize);
    return packet;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveSocketSource<Reader>

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource()
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource(Reader reader)
    : reader_(reader)
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource(Handle const & handle)
    : handle_(handle), event_(handle_, IOEvent::Read)
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketSource<Reader>::ActiveSocketSource(Handle const & handle,
                                                                          Reader reader)
    : handle_(handle), event_(handle_, IOEvent::Read), reader_(reader)
{
    registerEvent( event_, &ActiveSocketSource::read );
    route(event_, output);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveBurstSocketSource<Reader>

template <class Reader>
prefix_ senf::ppi::module::ActiveBurstSocketSource<Reader>::ActiveBurstSocketSource(unsigned max_burst)
    : maxBurst_(max_burst)
{
    registerEvent( event_, &ActiveBurstSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveBurstSocketSource<Reader>::ActiveBurstSocketSource(Reader reader, unsigned max_burst)
    : reader_(reader), maxBurst_(maxBurst)
{
    registerEvent( event_, &ActiveBurstSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveBurstSocketSource<Reader>::ActiveBurstSocketSource(Handle const & handle, unsigned max_burst)
    : handle_(handle), event_(handle_, IOEvent::Read), maxBurst_(max_burst)
{
    registerEvent( event_, &ActiveBurstSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ senf::ppi::module::ActiveBurstSocketSource<Reader>::ActiveBurstSocketSource(Handle const & handle,
                                                                          Reader reader, unsigned max_burst)
    : handle_(handle), event_(handle_, IOEvent::Read), reader_(reader), maxBurst_(max_burst)
{
    registerEvent( event_, &ActiveBurstSocketSource::read );
    route(event_, output);
}

template <class Reader>
prefix_ void senf::ppi::module::ActiveBurstSocketSource<Reader>::maxBurst(unsigned max_burst)
{
    maxBurst_ = max_burst;
}

template <class Reader>
prefix_ unsigned senf::ppi::module::ActiveBurstSocketSource<Reader>::maxBurst()
    const
{
    return maxBurst_;
}

template <class Reader>
prefix_ void senf::ppi::module::ActiveBurstSocketSource<Reader>::read()
{
    output(reader_(handle_));
    for (unsigned int i = 0; i < maxBurst_; ++i) {
        typename Reader::PacketType p (reader_(handle_));
        if (p.data().size() > 0)
            output( p);
        else
            break;
    }
}

template <class Reader>
prefix_ void senf::ppi::module::ActiveBurstSocketSource<Reader>::flush()
{
    try {
        while (true) {
            typename Reader::PacketType p(reader_(handle_));
            if (p.data().size() <= 0)
                break;
        }
    }
    catch (...) {};
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
