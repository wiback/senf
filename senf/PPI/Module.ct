// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Module non-inline template implementation  */

#include "Module.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::Module

#ifndef DOXYGEN

template <class Source, class Target>
prefix_ senf::ppi::Route<Source, Target> &
senf::ppi::module::Module::route(Source & source, Target & target)
{
    detail::RouteHelper<Source,Target>::route(*this, source, target, source, target);
    return static_cast< Route<Source,Target> & >(
        addRoute(std::auto_ptr< RouteBase >(
                     new Route<Source,Target>(*this, source, target))));
}

#else
prefix_ senf::ppi::Route<connector::InputConnector, connector::OutputConnector> &
senf::ppi::module::Module::route(connector::InputConnector & input,
                                 connector::OutputConnector & output)
{}
prefix_ senf::ppi::Route<connector::InputConnector, EventDescriptor> &
senf::ppi::module::Module::route(connector::InputConnector & input, EventDescriptor & output)
{}
#endif

#ifndef DOXYGEN

template <class Descriptor, class Target>
prefix_ void senf::ppi::module::Module::registerEvent(Descriptor & descriptor, Target target)
{
    eventManager().registerEvent(
        *this,
        EventManager::Callback<Descriptor>::make(target,*this),
        descriptor);
    descriptor.enabled(true);
}

#else
template <class Target>
prefix_ void senf::ppi::module::Module::registerEvent(EventDescriptor & descriptor,
                                                      Target target)
{}
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::detail namespace members

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      connector::InputConnector &, connector::OutputConnector &)
{
    module.registerConnector(source);
    module.registerConnector(target);
}

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      connector::InputConnector &, EventDescriptor &)
{
    module.registerConnector(source);
}

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      EventDescriptor &, connector::OutputConnector &)
{
    module.registerConnector(target);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
