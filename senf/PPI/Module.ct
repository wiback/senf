//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Module non-inline template implementation  */

#include "Module.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::Module

#ifndef DOXYGEN

template <class Descriptor, class Target>
prefix_ void senf::ppi::module::Module::registerEvent(Descriptor & descriptor, Target target)
{
    eventManager().registerEvent(
        *this,
        EventManager::Callback<Descriptor>::make(target,*this),
        descriptor);
    descriptor.enabled(true);
}

#else
template <class Target>
prefix_ void senf::ppi::module::Module::registerEvent(EventDescriptor & descriptor,
                                                      Target target)
{}
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::module::detail namespace members

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      connector::InputConnector &, connector::OutputConnector &)
{
    module.registerConnector(source);
    module.registerConnector(target);
}

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      connector::InputConnector &, EventDescriptor &)
{
    module.registerConnector(source);
}

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      EventDescriptor &, connector::OutputConnector &)
{
    module.registerConnector(target);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
