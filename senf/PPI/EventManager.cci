//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EventManager inline non-template implementation */

//#include "EventManager.ih"

// Custom includes
#include <senf/Scheduler/Scheduler.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ppi::EventManager

prefix_ bool senf::ppi::EventManager::alive()
{
    return alive_;
}

prefix_ senf::ppi::EventManager & senf::ppi::EventManager::instance()
{
    static EventManager manager;
    return manager;
}

prefix_ senf::ClockService::clock_type const & senf::ppi::EventManager::now()
{
    return scheduler::now();
}

prefix_ senf::ClockService::clock_type const & senf::ppi::EventManager::time()
{
    return eventTime_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

prefix_ senf::ppi::EventManager::EventManager()
{
    alive_ = true;
}

prefix_ senf::ppi::EventManager::~EventManager()
{
    alive_ = false;
}

prefix_ void senf::ppi::EventManager::eventTime(ClockService::clock_type const & time)
{
    eventTime_ = time;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
