// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Scheduler inline non-template implementation
 */

//#include "Scheduler.ih"

// Custom includes
#include <boost/format.hpp>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

// public members

prefix_ senf::ClockService::clock_type senf::scheduler::eventTime()
{
    return scheduler::detail::FdManager::instance().eventTime();
}

prefix_ void senf::scheduler::watchdogTimeout(unsigned ms)
{
    scheduler::detail::FIFORunner::instance().taskTimeout(ms);
}

prefix_ unsigned senf::scheduler::watchdogTimeout()
{
    return scheduler::detail::FIFORunner::instance().taskTimeout();
}

prefix_ unsigned senf::scheduler::watchdogEvents()
{
    return scheduler::detail::FIFORunner::instance().hangCount();
}

prefix_ void senf::scheduler::watchdogAbort(bool flag)
{
    scheduler::detail::FIFORunner::instance().abortOnTimeout(flag);
}

prefix_ bool senf::scheduler::watchdogAbort()
{
    return scheduler::detail::FIFORunner::instance().abortOnTimeout();
}

prefix_ void senf::scheduler::loresTimers()
{
    detail::TimerDispatcher::instance().timerSource(
        std::auto_ptr<detail::TimerSource>(new detail::PollTimerSource()));
}

prefix_ bool senf::scheduler::haveScalableHiresTimers()
{
#ifndef HAVE_TIMERFD_CREATE
    return false;
#else
    return detail::TimerFDTimerSource::haveTimerFD();
#endif
}

prefix_ bool senf::scheduler::usingHiresTimers()
{
    return dynamic_cast<detail::PollTimerSource*>(
        detail::TimerDispatcher::instance().timerSource()) == 0;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::BlockSignals

prefix_ senf::scheduler::BlockSignals::~BlockSignals()
{
    unblock();
}

prefix_ bool senf::scheduler::BlockSignals::blocked()
    const
{
    return blocked_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
