//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Scheduler inline non-template implementation
 */

//#include "Scheduler.ih"

// Custom includes
#include <boost/format.hpp>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

// public members

prefix_ senf::ClockService::clock_type const & senf::scheduler::eventTime()
{
    return scheduler::detail::FdManager::instance().eventTime();
}

prefix_ senf::ClockService::clock_type const & senf::scheduler::now()
{
    return scheduler::detail::FdManager::instance().eventTime();
}

prefix_ senf::ClockService::clock_type senf::scheduler::nowDiff(ClockService::clock_type const & older)
{
    return now() - older;
}

prefix_ senf::CyclicTimestamp const & senf::scheduler::eventTimestamp()
{
    return scheduler::detail::FdManager::instance().eventTimestamp();
}

prefix_ void senf::scheduler::watchdogCallback(detail::FIFORunner::WatchdogCallback const & cb)
{
    scheduler::detail::FIFORunner::instance().watchdogCallback(cb);
}

prefix_ void senf::scheduler::watchdogTimeout(unsigned ms)
{
    scheduler::detail::FIFORunner::instance().taskTimeout(ms);
}

prefix_ unsigned senf::scheduler::watchdogTimeout()
{
    return scheduler::detail::FIFORunner::instance().taskTimeout();
}

prefix_ unsigned senf::scheduler::watchdogEvents()
{
    return scheduler::detail::FIFORunner::instance().hangCount();
}

prefix_ void senf::scheduler::watchdogAbort(bool flag)
{
    scheduler::detail::FIFORunner::instance().abortOnTimeout(flag);
}

prefix_ bool senf::scheduler::watchdogAbort()
{
    return scheduler::detail::FIFORunner::instance().abortOnTimeout();
}

prefix_ void senf::scheduler::loresTimers()
{
    detail::TimerDispatcher::instance().timerSource(
            std::unique_ptr<detail::TimerSource>(new detail::PollTimerSource()));
}

prefix_ bool senf::scheduler::haveScalableHiresTimers()
{
#ifndef HAVE_TIMERFD_CREATE
    return false;
#else
    return detail::TimerFDTimerSource::haveTimerFD();
#endif
}

prefix_ bool senf::scheduler::usingHiresTimers()
{
    return dynamic_cast<detail::PollTimerSource*>(
            detail::TimerDispatcher::instance().timerSource()) == nullptr;
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::BlockSignals

prefix_ senf::scheduler::BlockSignals::~BlockSignals()
{
    unblock();
}

prefix_ bool senf::scheduler::BlockSignals::blocked()
    const
{
    return blocked_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
