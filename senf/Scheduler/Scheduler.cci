// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Scheduler inline non-template implementation
 */

//#include "Scheduler.ih"

// Custom includes
#include <boost/format.hpp>

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

// public members

prefix_ senf::ClockService::clock_type senf::scheduler::eventTime()
{
    return scheduler::detail::FdManager::instance().eventTime();
}

prefix_ void senf::scheduler::watchdogTimeout(unsigned ms)
{
    scheduler::detail::FIFORunner::instance().taskTimeout(ms);
}

prefix_ unsigned senf::scheduler::watchdogTimeout()
{
    return scheduler::detail::FIFORunner::instance().taskTimeout();
}

prefix_ unsigned senf::scheduler::watchdogEvents()
{
    return scheduler::detail::FIFORunner::instance().hangCount();
}

prefix_ void senf::scheduler::watchdogAbort(bool flag)
{
    scheduler::detail::FIFORunner::instance().abortOnTimeout(flag);
}

prefix_ bool senf::scheduler::watchdogAbort()
{
    return scheduler::detail::FIFORunner::instance().abortOnTimeout();
}

prefix_ void senf::scheduler::loresTimers()
{
    detail::TimerDispatcher::instance().timerSource(
        std::auto_ptr<detail::TimerSource>(new detail::PollTimerSource()));
}

prefix_ bool senf::scheduler::haveScalableHiresTimers()
{
#ifndef HAVE_TIMERFD_CREATE
    return false;
#else
    return detail::TimerFDTimerSource::haveTimerFD();
#endif
}

prefix_ bool senf::scheduler::usingHiresTimers()
{
    return dynamic_cast<detail::PollTimerSource*>(
        detail::TimerDispatcher::instance().timerSource()) == 0;
}

///////////////////////////////////////////////////////////////////////////
// senf::scheduler::BlockSignals

prefix_ senf::scheduler::BlockSignals::~BlockSignals()
{
    unblock();
}

prefix_ bool senf::scheduler::BlockSignals::blocked()
    const
{
    return blocked_;
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
