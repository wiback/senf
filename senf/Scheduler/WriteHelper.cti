//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief WriteHelper inline template implementation */

//#include "WriteHelper.ih"

// Custom includes
#include <senf/Utils/Exception.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Handle>
prefix_ typename senf::WriteHelper<Handle>::ptr
senf::WriteHelper<Handle>::dispatch(Handle handle, std::string const & data, Callback callback)
{
    return ptr(new WriteHelper(handle, data, callback));
}

template <class Handle>
prefix_ Handle senf::WriteHelper<Handle>::handle()
    const
{
    return handle_;
}

template <class Handle>
prefix_ bool senf::WriteHelper<Handle>::complete()
    const
{
    return data_.empty();
}

template <class Handle>
prefix_ bool senf::WriteHelper<Handle>::error()
    const
{
    return errno_ != 0;
}

template <class Handle>
prefix_ void senf::WriteHelper<Handle>::throw_error()
    const
{
    if (errno_ != 0)
        throw SystemException(errno_ SENF_EXC_DEBUGINFO);
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
