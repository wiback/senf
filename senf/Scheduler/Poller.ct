// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Poller non-inline template implementation  */

//#include "Poller.ih"

// Custom includes
#include <errno.h>
#include <senf/Utils/Exception.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Value>
prefix_ bool senf::scheduler::detail::Poller<Value>::set(int fd, int events, Value * data)
{
    struct epoll_event ev = { uint32_t(events), { data } };
    if (epoll_ctl(epollFd_, EPOLL_CTL_ADD, fd, &ev) != -1)
        return true;
    if (errno == EEXIST)
        if (epoll_ctl(epollFd_, EPOLL_CTL_MOD, fd, &ev) != -1)
            return true;
    if (errno == EPERM)
        return false;
    SENF_THROW_SYSTEM_EXCEPTION("epolll_ctl()");
}

template <class Value>
prefix_ void senf::scheduler::detail::Poller<Value>::remove(int fd)
{
    if (epoll_ctl(epollFd_, EPOLL_CTL_DEL, fd, 0) == -1)
        if (errno != ENOENT && errno != EBADF && errno != EPERM)
            // Calling remove() on a file descriptor which is not registered
            // is no error, it shall be ignored:
            // ENOENT: Not part of the poller but a valid (open) fd
            // EBADF: The fd has been closed already. The kernel automatically removes such fds
            //     from epoll structures
            // EPERM: The fd does not support epoll and thus can never have been added
            SENF_THROW_SYSTEM_EXCEPTION("epoll_ctl()");
}

template <class Value>
prefix_ typename senf::scheduler::detail::Poller<Value>::range senf::scheduler::detail::Poller<Value>::wait()
{
    static epoll_event events[NumEvents];
    int rv (0);
    rv = epoll_wait(epollFd_, events, NumEvents, timeout_);
    if (rv == -1) {
        if (errno == EINTR)
            rv = 0;
        else
            SENF_THROW_SYSTEM_EXCEPTION("epoll_wait()");
    }
    return boost::make_iterator_range(
        boost::make_transform_iterator(events, GetPollResult()),
        boost::make_transform_iterator(events+rv, GetPollResult()) );
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
