// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ClockService inline non-template implementation */

// Custom includes
#include <time.h>
#include <boost/date_time/posix_time/posix_time_types.hpp>
#include <senf/Utils/Exception.hh>

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ClockService

prefix_ senf::ClockService::clock_type senf::ClockService::now()
{
    struct timespec spec;
    if (clock_gettime(CLOCK_MONOTONIC, &spec) < 0)
        SENF_THROW_SYSTEM_EXCEPTION("clock_gettime()");
    return spec.tv_sec * 1000000000LL + spec.tv_nsec;
}

////////////////////////////////////////
// private members

namespace senf { namespace scheduler { ClockService::clock_type now(); } }

prefix_ senf::ClockService::clock_type senf::ClockService::clock_m(abstime_type time)
{
    if (scheduler::now() - baseClock_ > 1000000000ll)
        restart_m();
    boost::posix_time::time_duration delta (time - baseAbstime_);
    return baseClock_ + clock_type( delta.ticks() )
        * clock_type( 1000000000UL / boost::posix_time::time_duration::ticks_per_second() );
}

prefix_ senf::ClockService::abstime_type senf::ClockService::abstime_m(clock_type clock)
{
    if (clock == 0)
        return abstime_type();
    if (scheduler::now() - baseClock_ > 1000000000ll)
        restart_m();
#ifdef BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG
    return baseAbstime_ + boost::posix_time::nanoseconds(clock-baseClock_);
#else
    return baseAbstime_ + boost::posix_time::microseconds((clock-baseClock_+500)/1000);
#endif
}

prefix_ senf::ClockService::ClockService()
{
    restart_m();
}

prefix_ void senf::ClockService::restart_m()
{
    baseAbstime_ = boost::posix_time::microsec_clock::universal_time();
    baseClock_ = now();
}

// public members

prefix_ senf::ClockService::abstime_type senf::ClockService::abstime(clock_type clock)
{
    return instance().abstime_m(clock);
}

prefix_ senf::ClockService::reltime_type senf::ClockService::reltime(clock_type clock)
{
#ifdef BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG
    return boost::posix_time::nanoseconds(clock);
#else
    return  boost::posix_time::microseconds((clock+500)/1000);
#endif
}

prefix_ senf::ClockService::clock_type senf::ClockService::clock(abstime_type time)
{
    return instance().clock_m(time);
}

prefix_ senf::ClockService::clock_type senf::ClockService::from_time_t(time_t const & time)
{
    return clock( boost::posix_time::from_time_t(time) );
}

prefix_ senf::ClockService::clock_type senf::ClockService::nanoseconds(int64_type v)
{
    return v;
}

prefix_ senf::ClockService::clock_type senf::ClockService::microseconds(int64_type v)
{
    return v * nanoseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::milliseconds(int64_type v)
{
    return v * microseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::seconds(int64_type v)
{
    return v * milliseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::minutes(int64_type v)
{
    return v * seconds(60);
}

prefix_ senf::ClockService::clock_type senf::ClockService::hours(int64_type v)
{
    return v * minutes(60);
}

prefix_ senf::ClockService::clock_type senf::ClockService::days(int64_type v)
{
    return v * hours(24);
}

prefix_ senf::ClockService::clock_type senf::ClockService::in_nanoseconds(int64_type v)
{
    return v;
}

prefix_ senf::ClockService::clock_type senf::ClockService::in_microseconds(int64_type v)
{
    return v / nanoseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::in_milliseconds(int64_type v)
{
    return v / microseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::in_seconds(int64_type v)
{
    return v / milliseconds(1000);
}

prefix_ senf::ClockService::clock_type senf::ClockService::in_minutes(int64_type v)
{
    return v / seconds(60);
}

prefix_ senf::ClockService::clock_type senf::ClockService::in_hours(int64_type v)
{
    return v / minutes(60);
}

prefix_ senf::ClockService::clock_type senf::ClockService::in_days(int64_type v)
{
    return v / hours(24);
}

prefix_ senf::ClockService::clock_type senf::ClockService::from_timeval(timeval const & time)
{
    return from_time_t(time.tv_sec) + microseconds(time.tv_usec);
}

prefix_ void senf::ClockService::restart()
{
    instance().restart_m();
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
