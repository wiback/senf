//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ClockService inline non-template implementation */

// Custom includes
#include <time.h>
#include <boost/date_time/posix_time/posix_time_types.hpp>
#include <senf/Utils/Exception.hh>
#include <senf/Utils/senflikely.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef SENF_DEBUG
#   define SENF_CLOCKTYPEVAL(clock) (clock).value()
#else
#   define SENF_CLOCKTYPEVAL(clock) (clock)
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ClockService

prefix_ senf::ClockService::clock_type senf::ClockService::now()
{
    struct timespec spec;
    clock_gettime(CLOCK_MONOTONIC, &spec);
    return clock_type(spec.tv_sec * 1000000000LL + spec.tv_nsec);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

//namespace senf { namespace scheduler { ClockService::clock_type now(); } }





prefix_ senf::ClockService::ClockService()
{
    restart_m();
}

prefix_ void senf::ClockService::restart_m()
{
    baseAbstime_ = boost::posix_time::microsec_clock::universal_time();
    baseClock_ = now();
}

// public members

prefix_ senf::ClockService::abstime_type senf::ClockService::abstime(clock_type const & clock)
{
    return instance().abstime_m(clock);
}

prefix_ senf::ClockService::reltime_type senf::ClockService::reltime(clock_type const & clock)
{
#ifdef BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG
    return boost::posix_time::nanoseconds(
            SENF_CLOCKTYPEVAL( clock));
#else
    return  boost::posix_time::microseconds(
            SENF_CLOCKTYPEVAL( (clock + clock_type(500))/1000));
#endif
}

prefix_ senf::ClockService::clock_type senf::ClockService::clock(abstime_type const & time)
{
    return instance().clock_m(time);
}

prefix_ senf::ClockService::clock_type senf::ClockService::from_time_t(time_t const & time)
{
    return clock( boost::posix_time::from_time_t(time) );
}

prefix_ time_t senf::ClockService::to_time_t(senf::ClockService::clock_type const & time)
{
    return  (abstime(time) -  boost::posix_time::from_time_t(0)).total_seconds();
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::clock_type senf::ClockService::nanoseconds(int64_type const & v)
{
    return clock_type(v);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::clock_type senf::ClockService::microseconds(int64_type const & v)
{
    return v * nanoseconds(1000);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::clock_type senf::ClockService::milliseconds(int64_type const & v)
{
    return v * microseconds(1000);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::clock_type senf::ClockService::seconds(int64_type const & v)
{
    return v * milliseconds(1000);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::clock_type senf::ClockService::minutes(int64_type const & v)
{
    return v * seconds(60);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::clock_type senf::ClockService::hours(int64_type const & v)
{
    return v * minutes(60);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::clock_type senf::ClockService::days(int64_type const & v)
{
    return v * hours(24);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::int64_type senf::ClockService::in_nanoseconds(clock_type const & v)
{
    return SENF_CLOCKTYPEVAL( v);
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::int64_type senf::ClockService::in_microseconds(clock_type const & v)
{
    return SENF_CLOCKTYPEVAL( v / nanoseconds(1000));
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::int64_type senf::ClockService::in_milliseconds(clock_type const & v)
{
    return SENF_CLOCKTYPEVAL( v / microseconds(1000));
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::int64_type senf::ClockService::in_seconds(clock_type const & v)
{
    return SENF_CLOCKTYPEVAL( v / milliseconds(1000));
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::int64_type senf::ClockService::in_minutes(clock_type const & v)
{
    return SENF_CLOCKTYPEVAL( v / seconds(60));
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::int64_type senf::ClockService::in_hours(clock_type const & v)
{
    return SENF_CLOCKTYPEVAL( v / minutes(60));
}

prefix_ SENF_CLOCKSERVICE_CONSTEXPR senf::ClockService::int64_type senf::ClockService::in_days(clock_type const & v)
{
    return SENF_CLOCKTYPEVAL( v / hours(24));
}

prefix_ senf::ClockService::clock_type senf::ClockService::from_timeval(timeval const & time)
{
    return from_time_t(time.tv_sec) + microseconds(time.tv_usec);
}

prefix_ void senf::ClockService::restart()
{
    instance().restart_m();
}

#undef SENF_CLOCKTYPEVAL

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
