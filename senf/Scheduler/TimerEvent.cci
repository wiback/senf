//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief TimerDispatcher inline non-template implementation */

#include "TimerEvent.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::TimerEvent

prefix_ senf::scheduler::TimerEvent::TimerEvent(std::string const & name, Callback const & cb,
                                                ClockService::clock_type timeout,
                                                bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), timeout_ (timeout)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::TimerEvent::TimerEvent(std::string const & name, Callback const & cb)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), timeout_(ClockService::clock_type(0))
{}

prefix_ senf::scheduler::TimerEvent::~TimerEvent()
{
    if (detail::TimerDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::TimerEvent::enable()
{
    if (! detail::TimerSetBase::is_linked())
        detail::TimerDispatcher::instance().add(*this);
}

prefix_ void senf::scheduler::TimerEvent::disable()
{
    if (detail::TimerSetBase::is_linked())
        detail::TimerDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::TimerEvent::action(Callback const & cb)
{
    cb_ = cb;
}

prefix_ void senf::scheduler::TimerEvent::timeout(ClockService::clock_type const & timeout,
                                                  bool initiallyEnabled)
{
    disable();
    timeout_ = timeout;
    if (initiallyEnabled)
        enable();
}

prefix_ senf::ClockService::clock_type const & senf::scheduler::TimerEvent::timeout()
    const
{
    return timeout_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::TimerDispatcher

prefix_ void senf::scheduler::detail::TimerDispatcher::enable()
{
    source_->enable();
}

prefix_ void senf::scheduler::detail::TimerDispatcher::disable()
{
    source_->disable();
}

prefix_ bool senf::scheduler::detail::TimerDispatcher::empty()
    const
{
    return timers_.empty();
}

prefix_ void senf::scheduler::detail::TimerDispatcher::
timerSource(std::unique_ptr<TimerSource> timerSource)
{
    source_.reset(timerSource.release());
}

prefix_ senf::scheduler::detail::TimerSource *
senf::scheduler::detail::TimerDispatcher::timerSource()
{
    return source_.get();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
