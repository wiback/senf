// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief TimerDispatcher inline non-template implementation */

#include "TimerEvent.ih"

// Custom includes
#include <unistd.h>

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::scheduler::TimerEvent

prefix_ senf::scheduler::TimerEvent::TimerEvent(std::string const & name, Callback const & cb,
                                                ClockService::clock_type timeout,
                                                bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), timeout_ (timeout)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::TimerEvent::TimerEvent(std::string const & name, Callback const & cb)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), timeout_ (0)
{}

prefix_ senf::scheduler::TimerEvent::~TimerEvent()
{
    if (senf::scheduler::detail::TimerDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::TimerEvent::enable()
{
    if (! detail::TimerSetBase::linked())
        senf::scheduler::detail::TimerDispatcher::instance().add(*this);
}

prefix_ void senf::scheduler::TimerEvent::disable()
{
    if (detail::TimerSetBase::linked())
        senf::scheduler::detail::TimerDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::TimerEvent::action(Callback const & cb)
{
    cb_ = cb;
}

prefix_ void senf::scheduler::TimerEvent::timeout(ClockService::clock_type timeout,
                                                  bool initiallyEnabled)
{
    disable();
    timeout_ = timeout;
    if (initiallyEnabled)
        enable();
}

prefix_ senf::ClockService::clock_type senf::scheduler::TimerEvent::timeout()
    const
{
    return timeout_;
}

///////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::TimerDispatcher

prefix_ void senf::scheduler::detail::TimerDispatcher::enable()
{
    source_->enable();
}

prefix_ void senf::scheduler::detail::TimerDispatcher::disable()
{
    source_->disable();
}

prefix_ bool senf::scheduler::detail::TimerDispatcher::empty()
    const
{
    return timers_.empty();
}

prefix_ void senf::scheduler::detail::TimerDispatcher::
timerSource(std::auto_ptr<TimerSource> timerSource)
{
    source_.reset(timerSource.release());
}

prefix_ senf::scheduler::detail::TimerSource *
senf::scheduler::detail::TimerDispatcher::timerSource()
{
    return source_.get();
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
