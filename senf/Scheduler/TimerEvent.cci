// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief TimerDispatcher inline non-template implementation */

#include "TimerEvent.ih"

// Custom includes
#include <unistd.h>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::TimerEvent

prefix_ senf::scheduler::TimerEvent::TimerEvent(std::string const & name, Callback const & cb,
                                                ClockService::clock_type timeout,
                                                bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), timeout_ (timeout)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::TimerEvent::TimerEvent(std::string const & name, Callback const & cb)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), timeout_ (0)
{}

prefix_ senf::scheduler::TimerEvent::~TimerEvent()
{
    if (detail::TimerDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::TimerEvent::enable()
{
    if (! detail::TimerSetBase::linked())
        detail::TimerDispatcher::instance().add(*this);
}

prefix_ void senf::scheduler::TimerEvent::disable()
{
    if (detail::TimerSetBase::linked())
        detail::TimerDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::TimerEvent::action(Callback const & cb)
{
    cb_ = cb;
}

prefix_ void senf::scheduler::TimerEvent::timeout(ClockService::clock_type timeout,
                                                  bool initiallyEnabled)
{
    disable();
    timeout_ = timeout;
    if (initiallyEnabled)
        enable();
}

prefix_ senf::ClockService::clock_type senf::scheduler::TimerEvent::timeout()
    const
{
    return timeout_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::TimerDispatcher

prefix_ void senf::scheduler::detail::TimerDispatcher::enable()
{
    source_->enable();
}

prefix_ void senf::scheduler::detail::TimerDispatcher::disable()
{
    source_->disable();
}

prefix_ bool senf::scheduler::detail::TimerDispatcher::empty()
    const
{
    return timers_.empty();
}

prefix_ void senf::scheduler::detail::TimerDispatcher::
timerSource(std::auto_ptr<TimerSource> timerSource)
{
    source_.reset(timerSource.release());
}

prefix_ senf::scheduler::detail::TimerSource *
senf::scheduler::detail::TimerDispatcher::timerSource()
{
    return source_.get();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
