//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Poller inline template implementation */

//#include "Poller.ih"

// Custom includes
#include <unistd.h>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Value>
prefix_ senf::scheduler::detail::Poller<Value>::Poller()
    : timeout_ (-1)
{
    epollFd_ = epoll_create(NumEvents);
    if (epollFd_ == -1)
        throw senf::SystemException("epoll_create");
}

template <class Value>
prefix_ senf::scheduler::detail::Poller<Value>::~Poller()
{
    close(epollFd_);
}

template <class Value>
prefix_ void senf::scheduler::detail::Poller<Value>::timeout(int t)
{
    timeout_ = t;
}

template <class Value>
prefix_ int senf::scheduler::detail::Poller<Value>::timeout()
    const
{
    return timeout_;
}

template <class Value>
prefix_ typename senf::scheduler::detail::Poller<Value>::GetPollResult::result_type
senf::scheduler::detail::Poller<Value>::GetPollResult::operator()(epoll_event const & ev)
    const
{
    return std::make_pair(ev.events, static_cast<Value*>(ev.data.ptr));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
