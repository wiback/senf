// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief Poller inline template implementation */

//#include "Poller.ih"

// Custom includes
#include <unistd.h>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Value>
prefix_ senf::scheduler::detail::Poller<Value>::Poller()
    : timeout_ (-1)
{
    epollFd_ = epoll_create(NumEvents);
    if (epollFd_ == -1)
        throw senf::SystemException("epoll_create");
}

template <class Value>
prefix_ senf::scheduler::detail::Poller<Value>::~Poller()
{
    close(epollFd_);
}

template <class Value>
prefix_ void senf::scheduler::detail::Poller<Value>::timeout(int t)
{
    timeout_ = t;
}

template <class Value>
prefix_ int senf::scheduler::detail::Poller<Value>::timeout()
    const
{
    return timeout_;
}

template <class Value>
prefix_ typename senf::scheduler::detail::Poller<Value>::GetPollResult::result_type
senf::scheduler::detail::Poller<Value>::GetPollResult::operator()(epoll_event const & ev)
    const
{
    return std::make_pair(ev.events, static_cast<Value*>(ev.data.ptr));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
