//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EventHook inline non-template implementation */

#include "EventHook.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::EventHook

prefix_ senf::scheduler::EventHook::EventHook(std::string const & name, Callback const & cb,
                                              detail::FIFORunner::TaskInfo::Priority priority,
                                              bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo(name, priority), cb_ (cb)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::EventHook::~EventHook()
{
    if (detail::EventHookDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::EventHook::disable()
{
    if (detail::EventHookDispatcher::alive() && enabled())
        detail::EventHookDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::EventHook::enable()
{
    if (detail::EventHookDispatcher::alive() && !enabled()) {
        detail::EventHookDispatcher::instance().add(*this);
        setRunnable();
    }
}

prefix_ void senf::scheduler::EventHook::action(Callback const & cb)
{
    cb_ = cb;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::EventHookDispatcher

prefix_ void senf::scheduler::detail::EventHookDispatcher::add(EventHook & event)
{
    events_.push_back(event);
    FIFORunner::instance().enqueue(&event);
}

prefix_ bool senf::scheduler::detail::EventHookDispatcher::empty()
    const
{
    return events_.empty();
}

prefix_ senf::scheduler::detail::EventHookDispatcher::EventHookDispatcher()
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
