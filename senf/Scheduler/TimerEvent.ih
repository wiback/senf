// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief TimerDispatcher internal header */

#ifndef IH_SENF_Scheduler_TimerEvent_
#define IH_SENF_Scheduler_TimerEvent_ 1

// Custom includes
#include <boost/scoped_ptr.hpp>
#include <senf/boost_intrusive/iset.hpp>
#include "TimerSource.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace scheduler {

    void restart();

namespace detail {

    struct TimerSetCompare {
        bool operator()(TimerEvent const & a, TimerEvent const & b) const
            { return a.timeout_ < b.timeout_; }
    };

    class TimerDispatcher
        : public singleton<TimerDispatcher>
    {
        SENF_LOG_CLASS_AREA();

    public:
        using singleton<TimerDispatcher>::instance;
        using singleton<TimerDispatcher>::alive;

        void add(TimerEvent & event);
        void remove(TimerEvent & event);

        void enable();
        void disable();

        void prepareRun();
        void reschedule();

        bool empty() const;

        void timerSource(std::auto_ptr<TimerSource> timerSource);
        TimerSource * timerSource();

    protected:

    private:
        TimerDispatcher();
        ~TimerDispatcher();

        typedef boost::intrusive::imultiset< TimerSetBase::value_traits<TimerEvent>,
                                             TimerSetCompare,
                                             false > TimerSet;

        TimerSet timers_;

        boost::scoped_ptr<TimerSource> source_;

        friend void senf::scheduler::restart();
        friend class singleton<TimerDispatcher>;
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
