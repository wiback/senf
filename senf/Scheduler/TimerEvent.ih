//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief TimerDispatcher internal header */

#ifndef IH_SENF_Scheduler_TimerEvent_
#define IH_SENF_Scheduler_TimerEvent_ 1

// Custom includes
#include <boost/scoped_ptr.hpp>
#include <boost/intrusive/set.hpp>
#include "TimerSource.hh"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace scheduler {

    void restart();

namespace detail {

    struct TimerSetCompare {
        bool operator()(TimerEvent const & a, TimerEvent const & b) const
            { return a.timeout_ < b.timeout_; }
    };

    class TimerDispatcher
        : public singleton<TimerDispatcher>
    {
        SENF_LOG_CLASS_AREA();

    public:
        using singleton<TimerDispatcher>::instance;
        using singleton<TimerDispatcher>::alive;

        void add(TimerEvent & event);
        void remove(TimerEvent & event);

        void enable();
        void disable();

        void prepareRun();
        void reschedule();

        bool empty() const;

        void timerSource(std::unique_ptr<TimerSource> timerSource);
        TimerSource * timerSource();

    protected:

    private:
        TimerDispatcher();
        ~TimerDispatcher();

        typedef boost::intrusive::multiset< TimerEvent,
                                            boost::intrusive::constant_time_size<false>,
                                            boost::intrusive::compare<TimerSetCompare>,
                                            boost::intrusive::base_hook<TimerSetBase> > TimerSet;

        TimerSet timers_;

        boost::scoped_ptr<TimerSource> source_;

        friend void senf::scheduler::restart();
        friend class singleton<TimerDispatcher>;
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
