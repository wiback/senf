// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief FdDispatcher internal header */

#ifndef IH_SENF_Scheduler_FdEvent_
#define IH_SENF_Scheduler_FdEvent_ 1

// Custom includes
#include <senf/boost_intrusive/iset.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace scheduler {

    void restart();

namespace detail {

    struct FdSetCompare {
        bool operator()(FdEvent const & a, FdEvent const & b) const
        { return a.fd_ < b.fd_; }
    };

    struct FindFd {
        bool operator()(FdEvent const & a, int b) const
        { return a.fd_ < b; }
        bool operator()(int a, FdEvent const & b) const
        { return a < b.fd_; }
    };

    class FdDispatcher
        : public senf::singleton<FdDispatcher>
    {
    public:
        using senf::singleton<FdDispatcher>::instance;
        using senf::singleton<FdDispatcher>::alive;

        bool add(FdEvent & event);
        void remove(FdEvent & event);

        bool empty() const;

    protected:

    private:
        FdDispatcher();
        ~FdDispatcher();

        typedef boost::intrusive::imultiset< FdSetBase::value_traits<FdEvent>,
                                             FdSetCompare,
                                             false > FdSet;

        FdSet fds_;

        friend void senf::scheduler::restart();
        friend class singleton<FdDispatcher>;
        friend class senf::scheduler::FdEvent;
    };

    class FileDispatcher
        : public senf::singleton<FileDispatcher>
    {
    public:
        using senf::singleton<FileDispatcher>::instance;
        using senf::singleton<FileDispatcher>::alive;

        void add(FdEvent & event);
        void remove(FdEvent & event);

        void prepareRun();

        // Called by IdleEventDispatcher
        void timeout(int t);
        int timeout() const;

        bool empty() const;

    protected:

    private:
        FileDispatcher();
        ~FileDispatcher();

        // We really only need a list here but we need to use the same event structure used by
        // the FdEvent.
        typedef boost::intrusive::imultiset< FdSetBase::value_traits<FdEvent>,
                                             FdSetCompare,
                                             false > FdSet;

        FdSet fds_;
        int managerTimeout_;

        friend void senf::scheduler::restart();
        friend class singleton<FileDispatcher>;
    };

    template <class Handle>
    int get_descriptor(Handle const & handle);

    int retrieve_filehandle(int fd);

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
