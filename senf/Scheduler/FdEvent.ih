//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief FdDispatcher internal header */

#ifndef IH_SENF_Scheduler_FdEvent_
#define IH_SENF_Scheduler_FdEvent_ 1

// Custom includes
#include <boost/intrusive/set.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace scheduler {

    void restart();

namespace detail {

    struct FdSetCompare {
        bool operator()(FdEvent const & a, FdEvent const & b) const
        { return a.fd_ < b.fd_; }
    };

    class FdDispatcher
        : public senf::singleton<FdDispatcher>
    {
    public:
        using senf::singleton<FdDispatcher>::instance;
        using senf::singleton<FdDispatcher>::alive;

        bool add(FdEvent & event);
        void remove(FdEvent & event);

        bool empty() const;

    protected:

    private:
        FdDispatcher();
        ~FdDispatcher();

        typedef boost::intrusive::multiset< FdEvent,
                                            boost::intrusive::constant_time_size<false>,
                                            boost::intrusive::compare<FdSetCompare>,
                                            boost::intrusive::base_hook<FdSetBase> > FdSet;

        FdSet fds_;

        friend void senf::scheduler::restart();
        friend class singleton<FdDispatcher>;
        friend class senf::scheduler::FdEvent;
    };

    class FileDispatcher
        : public senf::singleton<FileDispatcher>
    {
    public:
        using senf::singleton<FileDispatcher>::instance;
        using senf::singleton<FileDispatcher>::alive;

        void add(FdEvent & event);
        void remove(FdEvent & event);

        void prepareRun();

        // Called by IdleEventDispatcher
        void timeout(int t);
        int timeout() const;

        bool empty() const;

    protected:

    private:
        FileDispatcher();
        ~FileDispatcher();

        // We really only need a list here but we need to use the same event structure used by
        // the FdEvent.
        typedef boost::intrusive::multiset< FdEvent,
                                            boost::intrusive::constant_time_size<false>,
                                            boost::intrusive::compare<FdSetCompare>,
                                            boost::intrusive::base_hook<FdSetBase> > FdSet;

        FdSet fds_;
        int managerTimeout_;

        friend void senf::scheduler::restart();
        friend class singleton<FileDispatcher>;
    };

    template <class Handle>
    int get_descriptor(Handle const & handle);

    int retrieve_filehandle(int fd);

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
