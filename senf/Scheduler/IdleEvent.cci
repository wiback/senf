// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief IdleEvent inline non-template implementation */

#include "IdleEvent.ih"

// Custom includes
#include "FdEvent.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::IdleEvent

prefix_ senf::scheduler::IdleEvent::IdleEvent(std::string const & name, Callback const & cb,
                                              bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo(name), cb_ (cb)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::IdleEvent::~IdleEvent()
{
    if (detail::IdleEventDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::IdleEvent::disable()
{
    if (enabled())
        detail::IdleEventDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::IdleEvent::enable()
{
    if (! enabled()) {
        detail::IdleEventDispatcher::instance().add(*this);
        setRunnable();
    }
}

prefix_ void senf::scheduler::IdleEvent::action(Callback const & cb)
{
    cb_ = cb;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::IdleEventDispatcher

prefix_ void senf::scheduler::detail::IdleEventDispatcher::add(IdleEvent & event)
{
    events_.push_back(event);
    FIFORunner::instance().enqueue(&event);
    detail::FileDispatcher::instance().timeout(0);
}

prefix_ void senf::scheduler::detail::IdleEventDispatcher::timeout(int t)
{
    managerTimeout_ = t;
    if (events_.empty())
        detail::FileDispatcher::instance().timeout(managerTimeout_);
}

prefix_ int senf::scheduler::detail::IdleEventDispatcher::timeout()
    const
{
    return managerTimeout_;
}

prefix_ bool senf::scheduler::detail::IdleEventDispatcher::empty()
    const
{
    return events_.empty();
}

prefix_ senf::scheduler::detail::IdleEventDispatcher::IdleEventDispatcher()
    : managerTimeout_ (scheduler::detail::FileDispatcher::instance().timeout())
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
