// $Id$
//
// Copyright (C) 2006 Stefan Bund <g0dil@berlios.de>
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):

// Copyright (C) 2006
/** \file
    \brief ReadHelper inline template implementation */

#include "ReadHelper.ih"

// Custom includes
#include <senf/Utils/Exception.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Handle>
prefix_ typename senf::ReadHelper<Handle>::ptr
senf::ReadHelper<Handle>::dispatch(Handle handle, std::string::size_type maxSize,
                                          Callback callback)
{
    return ptr(new ReadHelper(handle, maxSize, 0, callback));
}

template <class Handle>
template <class Predicate>
prefix_ typename senf::ReadHelper<Handle>::ptr
senf::ReadHelper<Handle>::dispatch(Handle handle, std::string::size_type maxSize,
                                   Predicate const & predicate, Callback callback)
{
    return ptr(new ReadHelper(handle, maxSize,
                              new typename InternalPredicate::template Dispatcher<Predicate>(predicate),
                              callback));
}

template <class Handle>
prefix_ Handle senf::ReadHelper<Handle>::handle()
    const
{
    return handle_;
}

template <class Handle>
prefix_ std::string::size_type senf::ReadHelper<Handle>::maxSize()
    const
{
    return maxSize_;
}

template <class Handle>
prefix_ std::string const & senf::ReadHelper<Handle>::data()
    const
{
    return data_;
}

template <class Handle>
prefix_ std::string const & senf::ReadHelper<Handle>::tail()
    const
{
    return tail_;
}

template <class Handle>
prefix_ bool senf::ReadHelper<Handle>::complete()
    const
{
    return complete_;
}

template <class Handle>
prefix_ bool senf::ReadHelper<Handle>::error()
    const
{
    return errno_ != 0;
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::throw_error()
    const
{
    if (errno_ != 0) throw SystemException(errno_ SENF_EXC_DEBUGINFO);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
