//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ReadHelper inline template implementation */

#include "ReadHelper.ih"

// Custom includes
#include <senf/Utils/Exception.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Handle>
prefix_ typename senf::ReadHelper<Handle>::ptr
senf::ReadHelper<Handle>::dispatch(Handle handle, std::string::size_type maxSize,
                                          Callback callback)
{
    return ptr(new ReadHelper(handle, maxSize, 0, callback));
}

template <class Handle>
template <class Predicate>
prefix_ typename senf::ReadHelper<Handle>::ptr
senf::ReadHelper<Handle>::dispatch(Handle handle, std::string::size_type maxSize,
                                   Predicate const & predicate, Callback callback)
{
    return ptr(new ReadHelper(handle, maxSize,
                              new typename InternalPredicate::template Dispatcher<Predicate>(predicate),
                              callback));
}

template <class Handle>
prefix_ Handle senf::ReadHelper<Handle>::handle()
    const
{
    return handle_;
}

template <class Handle>
prefix_ std::string::size_type senf::ReadHelper<Handle>::maxSize()
    const
{
    return maxSize_;
}

template <class Handle>
prefix_ std::string const & senf::ReadHelper<Handle>::data()
    const
{
    return data_;
}

template <class Handle>
prefix_ std::string const & senf::ReadHelper<Handle>::tail()
    const
{
    return tail_;
}

template <class Handle>
prefix_ bool senf::ReadHelper<Handle>::complete()
    const
{
    return complete_;
}

template <class Handle>
prefix_ bool senf::ReadHelper<Handle>::error()
    const
{
    return errno_ != 0;
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::throw_error()
    const
{
    if (errno_ != 0) throw SystemException(errno_ SENF_EXC_DEBUGINFO);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
