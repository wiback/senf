//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SignalDispatcher inline non-template implementation */

#include "SignalEvent.ih"

// Custom includes
#include <senf/Utils/signalnames.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ void senf::scheduler::detail::SignalDispatcher::blockSignals()
{
    if (blocked_) return;
    sigprocmask(SIG_BLOCK, &sigSet_, 0);
    blocked_ = true;
}

prefix_ void senf::scheduler::detail::SignalDispatcher::unblockSignals()
{
    if (!blocked_) return;
    sigprocmask(SIG_UNBLOCK, &sigSet_, 0);
    blocked_ = false;
}

prefix_ bool senf::scheduler::detail::SignalDispatcher::empty()
    const
{
    return handlers_.empty();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::SignalEvent

prefix_ senf::scheduler::SignalEvent::SignalEvent(int signal, Callback const & cb,
                                                  bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo(signalName(signal)), signal_ (signal), cb_ (cb)
{
    if (initiallyEnabled)
        enable();
}

prefix_ senf::scheduler::SignalEvent::~SignalEvent()
{
    if (senf::scheduler::detail::SignalDispatcher::alive())
        disable();
}

prefix_ void senf::scheduler::SignalEvent::disable()
{
    if (detail::SignalSetBase::is_linked())
        senf::scheduler::detail::SignalDispatcher::instance().remove(*this);
}

prefix_ void senf::scheduler::SignalEvent::enable()
{
    if (! detail::SignalSetBase::is_linked())
        senf::scheduler::detail::SignalDispatcher::instance().add(*this);
}

prefix_ void senf::scheduler::SignalEvent::action(Callback const & cb)
{
    cb_ = cb;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
