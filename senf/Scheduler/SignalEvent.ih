//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SignalDispatcher internal header */

#ifndef IH_SENF_Scheduler_SignalEvent_
#define IH_SENF_Scheduler_SignalEvent_ 1

// Custom includes
#include "FdManager.hh"
#include <boost/intrusive/set.hpp>
#include <senf/Utils/Exception.hh>
#include <senf/Utils/singleton.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace scheduler {

    void restart();

namespace detail {

    struct SignalSetCompare {
        bool operator()(SignalEvent const & a, SignalEvent const & b) const
            { return a.signal_ < b.signal_; }
    };

    struct FindNumericSignal {
        bool operator()(SignalEvent const & a, int b) const
            { return a.signal_ < b; }
        bool operator()(int a, SignalEvent const & b) const
            { return a < b.signal_; }
    };

    class SignalDispatcher
        : public detail::FdManager::Event,
          public singleton<SignalDispatcher>
    {
        typedef boost::intrusive::set< SignalEvent,
                                       boost::intrusive::constant_time_size<false>,
                                       boost::intrusive::compare<SignalSetCompare>,
                                       boost::intrusive::base_hook<SignalSetBase> > SignalSet;

    public:
        using singleton<SignalDispatcher>::instance;
        using singleton<SignalDispatcher>::alive;

        void add(SignalEvent & event);
        void remove(SignalEvent & event);

        void unblockSignals();
        void blockSignals();

        bool empty() const;

        struct DuplicateSignalRegistrationException : public Exception
        { DuplicateSignalRegistrationException()
              : Exception("duplicate signal registration") {} };

    protected:

    private:
        SignalDispatcher();
        ~SignalDispatcher();

        virtual void signal(int events);
        static void sigHandler(int signal, ::siginfo_t * siginfo, void *);

        SignalSet handlers_;

        int sigPipe_[2];

        bool blocked_;
        sigset_t sigSet_;

        friend void senf::scheduler::restart();
        friend class senf::scheduler::SignalEvent;
        friend class singleton<SignalDispatcher>;
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
