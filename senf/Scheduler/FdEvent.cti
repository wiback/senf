//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief FdDispatcher inline template implementation */

#include "FdEvent.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::FdEvent

template <class Handle>
prefix_ senf::scheduler::FdEvent::FdEvent(std::string const & name, Callback const & cb,
                                          Handle const & handle, int events, bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), fd_ (detail::get_descriptor(handle)),
      pollable_ (true), events_ (events), signaledEvents_ (0)
{
    if (initiallyEnabled)
        enable();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Handle>
prefix_ int senf::scheduler::get_descriptor(Handle const & handle)
{
    return detail::get_descriptor(handle);
}

template <class Handle>
prefix_ int senf::scheduler::detail::get_descriptor(Handle const & handle)
{
    return retrieve_filehandle(handle);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
