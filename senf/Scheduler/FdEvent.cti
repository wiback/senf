// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief FdDispatcher inline template implementation */

#include "FdEvent.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::FdEvent

template <class Handle>
prefix_ senf::scheduler::FdEvent::FdEvent(std::string const & name, Callback const & cb,
                                          Handle const & handle, int events,
                                          bool initiallyEnabled)
    : detail::FIFORunner::TaskInfo (name), cb_ (cb), fd_ (detail::get_descriptor(handle)),
      pollable_ (true), events_ (events)
{
    if (initiallyEnabled)
        enable();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Handle>
prefix_ int senf::scheduler::get_descriptor(Handle const & handle)
{
    return detail::get_descriptor(handle);
}

template <class Handle>
prefix_ int senf::scheduler::detail::get_descriptor(Handle const & handle)
{
    return retrieve_filehandle(handle);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
