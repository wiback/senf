// $Id$
//
// Copyright (C) 2006 Stefan Bund <g0dil@berlios.de>
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):

// Copyright (C) 2006
/** \file
    \brief ReadHelper internal header */

#ifndef IH_SENF_Scheduler_ReadHelper_
#define IH_SENF_Scheduler_ReadHelper_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {


    /** \brief Abstract predicate interface
        \internal
     */
    template <class Handle>
    struct ReadHelper<Handle>::InternalPredicate
    {
        virtual ~InternalPredicate() {}

        /** \brief template to runtime polymorphic barrier for the predicate interface
            \internal

            \implementation This class will provide a polymorphic
                wrapper around the non-polymorphic ReadHelper
                predicate. This is used, so the predicate can be
                specified as an arbitrary callable object (even a
                boost::function or a Boost.Lambda expression) without
                imposing any inheritance relationship on the predicate
         */
        template <class Predicate>
        struct Dispatcher;

        virtual std::string::size_type operator()(std::string const & data) = 0;
    };

    template <class Handle>
    template <class Predicate>
    struct ReadHelper<Handle>::InternalPredicate::Dispatcher
        : public ReadHelper<Handle>::InternalPredicate
    {
        Dispatcher(Predicate p) : predicate(p) {}
        virtual std::string::size_type operator()(std::string const & data);
        Predicate predicate;
    };

}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
