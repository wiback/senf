//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ReadHelper internal header */

#ifndef IH_SENF_Scheduler_ReadHelper_
#define IH_SENF_Scheduler_ReadHelper_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {


    /** \brief Abstract predicate interface
        \internal
     */
    template <class Handle>
    struct ReadHelper<Handle>::InternalPredicate
    {
        virtual ~InternalPredicate() {}

        /** \brief template to runtime polymorphic barrier for the predicate interface
            \internal

            \implementation This class will provide a polymorphic
                wrapper around the non-polymorphic ReadHelper
                predicate. This is used, so the predicate can be
                specified as an arbitrary callable object (even a
                boost::function or a Boost.Lambda expression) without
                imposing any inheritance relationship on the predicate
         */
        template <class Predicate>
        struct Dispatcher;

        virtual std::string::size_type operator()(std::string const & data) = 0;
    };

    template <class Handle>
    template <class Predicate>
    struct ReadHelper<Handle>::InternalPredicate::Dispatcher
        : public ReadHelper<Handle>::InternalPredicate
    {
        Dispatcher(Predicate p) : predicate(p) {}
        virtual std::string::size_type operator()(std::string const & data);
        Predicate predicate;
    };

}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
