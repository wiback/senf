// $Id$
//
// Copyright (C) 2006 Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// Copyright (C) 2006

/** \file
    \brief ReadHelper non-inline template implementation */

#include "ReadHelper.ih"

// Custom includes
#include <errno.h>
#include <senf/Utils/membind.hh>
#include <senf/Utils/Exception.hh>
#include "Scheduler.hh"

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class Handle>
prefix_ senf::ReadHelper<Handle>::ReadHelper(Handle handle, std::string::size_type maxSize,
                                                    InternalPredicate * predicate, Callback cb)
    : handle_(handle), 
      fde_("senf::ReadHelper", boost::bind(&ReadHelper::dispatchProcess,ptr(this), handle, _1),
           handle, senf::scheduler::FdEvent::EV_READ),
      maxSize_(maxSize), predicate_(predicate), callback_(cb), errno_(0), complete_(false)
{
    // Here we add a *static* member taking a *smart* pointer as first
    // argumnet instead of a simple bound-member as callback to the
    // scheduler. This ensures, that the refcount is at least 1 as
    // long as the helper is registered with the scheduler.
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::revoke()
{
    ptr guard (this); // To ensure, 'this' is deleted only after this method terminates ...
    fde_.disable();
    fde_.action(0); // Remove smart pointer reference to this
}

template <class Handle>
prefix_ void
senf::ReadHelper<Handle>::dispatchProcess(ptr helper, Handle handle, int event)
{
    // since we have a 'ptr' argument, the instance cannot be deleted
    // before this method returns
    return helper->process(handle,event);
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::process(Handle handle,int event)
{
    try {
        if (event != senf::scheduler::FdEvent::EV_READ)
            throw SystemException(EPIPE SENF_EXC_DEBUGINFO);
        std::string rcv;
        handle.read(rcv, maxSize_ - data_.size());
        data_.append(rcv);
        std::string::size_type n = predicate_ ? (*predicate_)(data_) : std::string::npos;
        if (n != std::string::npos || data_.size() >= maxSize_ || rcv.size() == 0) {
            complete_ = true;
            if (n < data_.size()) {
                tail_.assign(data_,n,std::string::npos);
                data_.erase(n);
            }
        }
    }
    catch (senf::SystemException const & ex) {
        errno_ = ex.errorNumber();
        done();
        return;
    }
    if (complete_)
        done();
}

template <class Handle>
prefix_ void senf::ReadHelper<Handle>::done()
{
    revoke();
    callback_(ptr(this));
}

template <class Handle>
template <class Predicate>
prefix_ std::string::size_type
senf::ReadHelper<Handle>::InternalPredicate::Dispatcher<Predicate>::
operator()(std::string const & data)
{
    return predicate(data);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
