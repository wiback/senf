//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EventManager inline non-template implementation */

//#include "EventManager.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::Event

prefix_ senf::scheduler::detail::Event::Event(std::string const & name)
    : name_ (name), runCount_ (0u)
{
    if (EventManager::alive())
        EventManager::instance().add(*this);
}

prefix_ senf::scheduler::detail::Event::~Event()
{
    if (EventManager::alive())
        EventManager::instance().remove(*this);
}

prefix_ void senf::scheduler::detail::EventManager::add(Event & event)
{
    events_.push_back(event);
}

prefix_ void senf::scheduler::detail::EventManager::remove(Event & event)
{
    events_.erase(EventList::s_iterator_to(event));
}

prefix_ std::string const & senf::scheduler::detail::Event::name()
    const
{
    return name_;
}

prefix_ bool senf::scheduler::detail::Event::enabled()
    const
{
    return v_enabled();
}

prefix_ unsigned senf::scheduler::detail::Event::runCount()
    const
{
    return runCount_;
}

prefix_ char const * senf::scheduler::detail::Event::type()
    const
{
    return v_type();
}

prefix_ std::string senf::scheduler::detail::Event::info()
    const
{
    return v_info();
}

prefix_ void senf::scheduler::detail::Event::countRun()
{
    ++ runCount_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::scheduler::detail::EventManager

prefix_ bool senf::scheduler::detail::EventManager::IteratorFilter::operator()(Event const & e)
{
    return e.type() != nullptr;
}

prefix_ senf::scheduler::detail::EventManager::iterator
senf::scheduler::detail::EventManager::begin()
    const
{
    // We need to filter out elements with e.type() == 0 ... the NullTask temporarily added
    // by the FIFORunner is such an element and must be skipped.
    return boost::make_filter_iterator(
        IteratorFilter(), events_.begin(), events_.end());
}

prefix_ senf::scheduler::detail::EventManager::iterator
senf::scheduler::detail::EventManager::end()
    const
{
    return boost::make_filter_iterator(
        IteratorFilter(), events_.end(), events_.end());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
