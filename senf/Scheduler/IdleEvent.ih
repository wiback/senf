//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief IdleEvent internal header */

#ifndef IH_SENF_Scheduler_IdleEvent_
#define IH_SENF_Scheduler_IdleEvent_ 1

// Custom includes
#include <senf/Utils/singleton.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace scheduler {

    void restart();

namespace detail {

    class IdleEventDispatcher
        : public singleton<IdleEventDispatcher>
    {
    public:
        using singleton<IdleEventDispatcher>::instance;
        using singleton<IdleEventDispatcher>::alive;

        void add(IdleEvent & event);
        void remove(IdleEvent & event);

        void prepareRun();

        // Called by PollTimerSource
        void timeout(int t);
        int timeout() const;

        bool empty() const;

    private:
        IdleEventDispatcher();
        ~IdleEventDispatcher();

        typedef boost::intrusive::list< IdleEvent,
                                        boost::intrusive::constant_time_size<false>,
                                        boost::intrusive::base_hook<IdleEventListBase> > EventList;

        EventList events_;
        int managerTimeout_;

        friend void senf::scheduler::restart();
        friend class singleton<IdleEventDispatcher>;
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
