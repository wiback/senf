// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief IdleEvent internal header */

#ifndef IH_SENF_Scheduler_IdleEvent_
#define IH_SENF_Scheduler_IdleEvent_ 1

// Custom includes
#include <senf/Utils/singleton.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace scheduler {

    void restart();

namespace detail {

    class IdleEventDispatcher
        : public singleton<IdleEventDispatcher>
    {
    public:
        using singleton<IdleEventDispatcher>::instance;
        using singleton<IdleEventDispatcher>::alive;

        void add(IdleEvent & event);
        void remove(IdleEvent & event);

        void prepareRun();

        // Called by PollTimerSource
        void timeout(int t);
        int timeout() const;

        bool empty() const;

    private:
        IdleEventDispatcher();
        ~IdleEventDispatcher();

        typedef boost::intrusive::ilist<
            IdleEventListBase::value_traits<IdleEvent>, false > EventList;

        EventList events_;
        int managerTimeout_;

        friend void senf::scheduler::restart();
        friend class singleton<IdleEventDispatcher>;
    };

}}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
