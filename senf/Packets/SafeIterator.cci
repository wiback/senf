//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SafeIterator inline non-template implementation */

#include "SafeIterator.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::safe_data_iterator

prefix_ senf::safe_data_iterator::safe_data_iterator()
{}

prefix_  senf::safe_data_iterator::safe_data_iterator(PacketData & data)
    : Base(&data)
{}

prefix_ senf::safe_data_iterator::safe_data_iterator(PacketData & data, PacketData::iterator i)
    : Base(&data, std::distance(data.begin(),i))
{}

prefix_  senf::safe_data_iterator::safe_data_iterator(PacketParserBase const & parser)
    : Base(&parser.data(), std::distance(parser.data().begin(),parser.i()))
{}

prefix_ senf::safe_data_iterator & senf::safe_data_iterator::operator=(PacketData::iterator i)
{
    SENF_ASSERT(data_, "Use/dereferencing of empty safe_data_iterator");
    i_ = std::distance(data_->begin(),i);
    return *this;
}

prefix_ senf::safe_data_iterator &
senf::safe_data_iterator::operator=(PacketParserBase const & parser)
{
    data_ = &parser.data();
    i_ = std::distance(data_->begin(),parser.i());
    return *this;
}

prefix_ senf::PacketData & senf::safe_data_iterator::data()
    const
{
    SENF_ASSERT(data_, "Use/dereferencing of empty safe_data_iterator");
    return *data_;
}

prefix_ senf::safe_data_iterator::value_type & senf::safe_data_iterator::dereference()
    const
{
    return * static_cast<PacketData::iterator>(*this);
}

prefix_ bool senf::safe_data_iterator::equal(safe_data_iterator const & other)
    const
{
    SENF_ASSERT(data_ == other.data_, "Comparing iterators of two different containers is invalid");
    return i_ == other.i_;
}

prefix_ senf::safe_data_iterator::difference_type
senf::safe_data_iterator::distance_to(safe_data_iterator const & other)
    const
{
    SENF_ASSERT(data_ == other.data_, "Comparing iterators of two different containers is invalid");
    return other.i_ - i_;
}

prefix_ void senf::safe_data_iterator::increment()
{
    ++i_;
}

prefix_ void senf::safe_data_iterator::decrement()
{
    SENF_ASSERT(i_>0, "Decrementing iterator before beginning of container" );
    --i_;
}

prefix_ void senf::safe_data_iterator::advance(difference_type n)
{
    SENF_ASSERT( -n < difference_type(i_), "Moving iterator to before beginning of container" );
    i_ += n;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
