// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SafeIterator inline non-template implementation */

//#include "SafeIterator.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::safe_data_iterator

prefix_ senf::safe_data_iterator::safe_data_iterator()
    : data_(0), i_(0)
{}

prefix_  senf::safe_data_iterator::safe_data_iterator(PacketData & data)
    : data_(&data), i_(0)
{}

prefix_ senf::safe_data_iterator::safe_data_iterator(PacketData & data, PacketData::iterator i)
    : data_(&data), i_(std::distance(data.begin(),i))
{}

prefix_  senf::safe_data_iterator::safe_data_iterator(PacketParserBase const & parser)
    : data_(&parser.data()), i_(std::distance(data_->begin(),parser.i()))
{}

prefix_ senf::PacketData::iterator senf::safe_data_iterator::i()
    const
{
    SENF_ASSERT(data_, "Use/dereferencing of empty safe_data_iterator");
    return boost::next(data_->begin(),i_);
}

prefix_ senf::safe_data_iterator & senf::safe_data_iterator::operator=(PacketData::iterator i)
{
    SENF_ASSERT(data_, "Use/dereferencing of empty safe_data_iterator");
    i_ = std::distance(data_->begin(),i);
    return *this;
}

prefix_ senf::safe_data_iterator &
senf::safe_data_iterator::operator=(PacketParserBase const & parser)
{
    data_ = &parser.data();
    i_ = std::distance(data_->begin(),parser.i());
    return *this;
}

prefix_ senf::safe_data_iterator::operator senf::PacketData::iterator()
    const
{
    return i();
}

prefix_ bool senf::safe_data_iterator::boolean_test()
    const
{
    return data_;
}

prefix_ senf::PacketData & senf::safe_data_iterator::data()
    const
{
    SENF_ASSERT(data_, "Use/dereferencing of empty safe_data_iterator");
    return *data_;
}

prefix_ senf::safe_data_iterator::value_type & senf::safe_data_iterator::dereference()
    const
{
    return *i();
}

prefix_ bool senf::safe_data_iterator::equal(safe_data_iterator const & other)
    const
{
    SENF_ASSERT(data_ == other.data_, "Comparing iterators of two different containers is invalid");
    return i_ == other.i_;
}

prefix_ senf::safe_data_iterator::difference_type
senf::safe_data_iterator::distance_to(safe_data_iterator const & other)
    const
{
    SENF_ASSERT(data_ == other.data_, "Comparing iterators of two different containers is invalid");
    return other.i_ - i_;
}

prefix_ void senf::safe_data_iterator::increment()
{
    ++i_;
}

prefix_ void senf::safe_data_iterator::decrement()
{
    SENF_ASSERT(i_>0, "Decrementing iterator before beginning of container" );
    --i_;
}

prefix_ void senf::safe_data_iterator::advance(difference_type n)
{
    SENF_ASSERT( -n < difference_type(i_), "Moving iterator to before beginning of container" );
    i_ += n;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
