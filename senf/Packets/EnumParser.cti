//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EnumParser inline template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::EnumParser

template <typename EnumType, typename UnderlyingTypeParser>
prefix_ senf::EnumParser<EnumType, UnderlyingTypeParser>::EnumParser(data_iterator i, state_type s)
    : PacketParserBase(i, s, fixed_bytes)
{}

template <typename EnumType, typename UnderlyingTypeParser>
prefix_ UnderlyingTypeParser senf::EnumParser<EnumType, UnderlyingTypeParser>::underlyingValue()
    const
{
    return parse<UnderlyingTypeParser>( i() );
}

template <typename EnumType, typename UnderlyingTypeParser>
prefix_ void senf::EnumParser<EnumType, UnderlyingTypeParser>::value(EnumType v)
{
    underlyingValue() << static_cast<typename UnderlyingTypeParser::value_type>(v);
}

template <typename EnumType, typename UnderlyingTypeParser>
prefix_ EnumType senf::EnumParser<EnumType, UnderlyingTypeParser>::value()
    const
{
    return static_cast<EnumType>(underlyingValue().value());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_
