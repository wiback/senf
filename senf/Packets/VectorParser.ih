// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief VectorParser internal header */

#ifndef IH_SENF_Packets_VectorParser_
#define IH_SENF_Packets_VectorParser_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

#ifndef DOXYGEN

    template <class ElementParser, class AuxPolicy, class AuxTag>
    struct VectorParserPolicy
    {};

    template <class ElementParser, class AuxPolicy>
    struct VectorParserPolicy<ElementParser, AuxPolicy, senf::detail::auxtag::none>
    {
        typedef AuxPolicy type;
    };

    template <class ElementParser, class AuxPolicy, class Transform>
    struct VectorParserPolicy<ElementParser, AuxPolicy,
                              senf::detail::auxtag::transform<Transform,
                                                              senf::detail::auxtag::none> >
    {
        typedef senf::detail::TransformAuxParserPolicy<AuxPolicy, Transform> type;
    };

    template <unsigned fixedSize>
    struct VectorParserBytesTransform
    {
        typedef PacketParserBase::size_type value_type;
        static value_type get(value_type v) { return v/fixedSize; }
        static value_type set(value_type v) { return v*fixedSize; }
    };

    template <class ElementParser, class AuxPolicy>
    struct VectorParserPolicy<ElementParser, AuxPolicy, senf::detail::auxtag::bytes>
    {
        typedef senf::detail::TransformAuxParserPolicy<
            AuxPolicy,
            VectorParserBytesTransform<ElementParser::fixed_bytes> > type;
    };

    template <class ElementParser>
    struct VectorParserTraits
    {
        template <class AuxPolicy, class AuxTag>
        struct parser {
            typedef senf::VectorParser<
                ElementParser,
                typename VectorParserPolicy<ElementParser, AuxPolicy, AuxTag>::type > type;
        };
    };


#   define SENF_PARSER_VECTOR_I(access, name, size, elt_type)                                     \
        SENF_PARSER_REQUIRE_VAR(vector)                                                           \
        SENF_PARSER_COLLECTION_I( access,                                                         \
                                  name,                                                           \
                                  size,                                                           \
                                  senf::detail::VectorParserTraits<elt_type> )

#endif

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
