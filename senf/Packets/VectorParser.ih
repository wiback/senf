//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief VectorParser internal header */

#ifndef IH_SENF_Packets_VectorParser_
#define IH_SENF_Packets_VectorParser_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

#ifndef DOXYGEN

    template <class ElementParser, class AuxPolicy, class AuxTag>
    struct VectorParserPolicy
    {};

    template <class ElementParser, class AuxPolicy>
    struct VectorParserPolicy<ElementParser, AuxPolicy, senf::detail::auxtag::none>
    {
        typedef AuxPolicy type;
    };

    template <class ElementParser, class AuxPolicy, class Transform>
    struct VectorParserPolicy<ElementParser, AuxPolicy,
                              senf::detail::auxtag::transform<Transform,
                                                              senf::detail::auxtag::none> >
    {
        typedef senf::detail::TransformAuxParserPolicy<AuxPolicy, Transform> type;
    };

    template <unsigned fixedSize>
    struct VectorParserBytesTransform
    {
        typedef PacketParserBase::size_type value_type;
        static value_type get(value_type v) { return v/fixedSize; }
        static value_type set(value_type v) { return v*fixedSize; }
    };

    template <class ElementParser, class AuxPolicy>
    struct VectorParserPolicy<ElementParser, AuxPolicy, senf::detail::auxtag::bytes>
    {
        typedef senf::detail::TransformAuxParserPolicy<
            AuxPolicy,
            VectorParserBytesTransform<ElementParser::fixed_bytes> > type;
    };

    template <class ElementParser>
    struct VectorParserTraits
    {
        template <class AuxPolicy, class AuxTag>
        struct parser {
            typedef senf::VectorParser<
                ElementParser,
                typename VectorParserPolicy<ElementParser, AuxPolicy, AuxTag>::type > type;
        };
    };


#   define SENF_PARSER_VECTOR_I(access, name, size, elt_type)                                     \
        SENF_PARSER_REQUIRE_VAR(vector)                                                           \
        SENF_PARSER_COLLECTION_I( access,                                                         \
                                  name,                                                           \
                                  size,                                                           \
                                  senf::detail::VectorParserTraits<elt_type> )

#endif

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
