// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief PacketRegistry non-inline template implementation */

#include "PacketRegistry.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <senf/Utils/TypeInfo.hh>
#include <senf/Utils/Format.hh>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::detail::PkReg_EntryImpl<PacketType>

template <class PacketType>
prefix_ senf::PacketInterpreterBase::factory_t senf::detail::PkReg_EntryImpl<PacketType>::factory()
    const
{
    return PacketType::factory();
}

template <class PacketType>
prefix_ std::string senf::detail::PkReg_EntryImpl<PacketType>::name()
    const
{
    return prettyName(typeid(PacketType));
}

template <class PacketType>
prefix_ senf::TypeIdValue senf::detail::PkReg_EntryImpl<PacketType>::typeIdValue()
    const
{
    return typeid(PacketType);
}

///////////////////////////////////////////////////////////////////////////
// senf::PacketRegistry<Tag>

template <class Tag>
prefix_ typename senf::PacketRegistry<Tag>::Registry &
senf::PacketRegistry<Tag>::registry()
{
    static Registry registry (prettyName(typeid(Tag)));
    return registry;
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::PacketRegistryImpl<KeyType>:

template <class KeyType>
template <class PacketType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::registerPacket(key_t key)
{
#ifndef SENF_DEBUG
    registry_.insert(std::make_pair(key, Entry_ptr(new detail::PkReg_EntryImpl<PacketType>())));
    reverseRegistry_.insert(std::make_pair(senf::typeIdValue<PacketType>(), key));
#else
    bool isUnique (
        registry_.insert(
            std::make_pair(key, Entry_ptr(new detail::PkReg_EntryImpl<PacketType>()))).second);
    // If this assertion fails, a Packet was registered with an already known key
    SENF_ASSERT( isUnique );
    bool isNew (
        reverseRegistry_.insert(
            std::make_pair(senf::typeIdValue<PacketType>(), key)).second);
    // If this assertion fails, the same Packet was registered with two different keys
    SENF_ASSERT( isNew );
#endif
}

template <class KeyType>
template <class PacketType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::unregisterPacket()
{
    typename PacketMap::iterator i (registry_.find(key(typeIdValue<PacketType>())));
    typename ReversePacketMap::iterator j (reverseRegistry_.find(typeIdValue<PacketType>()));
    if (i != registry_.end())
        registry_.erase(i);
    if (j != reverseRegistry_.end())
        reverseRegistry_.erase(j);
}

template <class KeyType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::unregisterPacket(key_t key)
{
    typename PacketMap::iterator i (registry_.find(key));
    if (i == registry_.end())
        throw PacketTypeNotRegisteredException();
    typename ReversePacketMap::iterator j (reverseRegistry_.find(i->second->typeIdValue()));
    registry_.erase(i);
    if (j != reverseRegistry_.end())
        reverseRegistry_.erase(j);
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::key_t
senf::detail::PacketRegistryImpl<KeyType>::key(senf::TypeIdValue const & type)
{
    typename ReversePacketMap::iterator i (reverseRegistry_.find(type));
    if (i==reverseRegistry_.end())
        throw PacketTypeNotRegisteredException();
    return i->second;
}

template <class KeyType>
prefix_ boost::optional<typename senf::detail::PacketRegistryImpl<KeyType>::key_t>
senf::detail::PacketRegistryImpl<KeyType>::key(senf::TypeIdValue const & type, bool)
{
    typename ReversePacketMap::iterator i (reverseRegistry_.find(type));
    if (i==reverseRegistry_.end())
        return boost::optional<key_t>();
    return i->second;
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::Entry const &
senf::detail::PacketRegistryImpl<KeyType>::lookup(key_t key)
{
    typename PacketMap::iterator i (registry_.find(key));
    if (i==registry_.end())
        throw PacketTypeNotRegisteredException();
    return *(i->second);
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::Entry const *
senf::detail::PacketRegistryImpl<KeyType>::lookup(key_t key, bool)
{
    typename PacketMap::iterator i (registry_.find(key));
    if (i==registry_.end())
        return 0;
    return i->second.get();
}

template <class KeyType>
prefix_ bool senf::detail::PacketRegistryImpl<KeyType>::v_empty()
    const
{
    return registry_.empty();
}

template <class KeyType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::v_dump(std::ostream & os)
    const
{
    typename PacketMap::const_iterator i (registry_.begin());
    typename PacketMap::const_iterator const i_end (registry_.end());
    for (; i != i_end; ++i) {
        std::string n (i->second->name());
        senf::detail::DumpKey<KeyType>::dump(i->first, os);
        os << ' ' << n.substr(21,n.size()-22) << "\n";
    }
}

template <class KeyType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::v_clear()
{
    registry_.clear();
    reverseRegistry_.clear();
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::DumpKey<KeyType,is_integral>

template <class KeyType, bool is_integral>
prefix_ void senf::detail::DumpKey<KeyType,is_integral>::dump(KeyType const & v,
                                                              std::ostream & os)
{
    os << "  " << std::setw(16) << std::left << v << std::setw(0) << std::right;
}

// senf::detail::DumpKey<KeyType, true>

template <class KeyType>
prefix_ void senf::detail::DumpKey<KeyType, true>::dump(KeyType const & v, std::ostream & os)
{
    os << "  " << senf::format::dumpint(v);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
