// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketRegistry non-inline template implementation */

#include "PacketRegistry.ih"

// Custom includes
#include <iostream>
#include <iomanip>
#include <senf/Utils/TypeInfo.hh>
#include <senf/Utils/Format.hh>
#include <senf/Utils/senfassert.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::PacketRegistryImpl<KeyType>::Entry

template <class KeyType>
prefix_ senf::detail::PacketRegistryImpl<KeyType>::Entry::Entry(KeyType const & key_,
                                                                int priority_)
    : key (key_), priority (priority_)
{}

template <class KeyType>
prefix_ senf::detail::PacketRegistryImpl<KeyType>::Entry::~Entry()
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::PacketRegistryImpl<KeyType>::EntryImpl<PacketType>

template <class KeyType>
template <class PacketType>
prefix_ senf::detail::PacketRegistryImpl<KeyType>::EntryImpl<PacketType>::
EntryImpl(KeyType const & key, int priority)
    : Entry (key, priority)
{}

template <class KeyType>
template <class PacketType>
prefix_ senf::Packet::factory_t
senf::detail::PacketRegistryImpl<KeyType>::EntryImpl<PacketType>::factory()
    const
{
    return PacketType::factory();
}

template <class KeyType>
template <class PacketType>
prefix_ std::string senf::detail::PacketRegistryImpl<KeyType>::EntryImpl<PacketType>::name()
    const
{
    return prettyName(typeid(PacketType));
}

template <class KeyType>
template <class PacketType>
prefix_ std::type_info const &
senf::detail::PacketRegistryImpl<KeyType>::EntryImpl<PacketType>::type()
    const
{
    return typeid(PacketType);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::PacketRegistryImpl<KeyType>:

template <class KeyType>
template <class PacketType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::registerPacket(key_t key, int priority)
{
    SENF_ASSERT_EXPRESSION(
        registry_.insert(
            typename Entry::ptr(new EntryImpl<PacketType>(key,priority))).second,
        "Duplicate packet registration");
}

template <class KeyType>
template <class PacketType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::unregisterPacket()
{
    registry_.template get<ByType>().erase(typeid(PacketType));
}

template <class KeyType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::unregisterPacket(key_t key, int priority)
{
    // Why doesn't this work:
    // registry_.erase(boost::make_tuple(key,priority));
    typename Registry::iterator i (registry_.find(boost::make_tuple(key,priority)));
    if (i != registry_.end())
        registry_.erase(i);
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::key_t
senf::detail::PacketRegistryImpl<KeyType>::key(senf::TypeIdValue const & type)
{
    boost::optional<KeyType> k (key(type,true));
    if (! k)
        throw PacketTypeNotRegisteredException();
    return *k;
}

template <class KeyType>
prefix_ boost::optional<typename senf::detail::PacketRegistryImpl<KeyType>::key_t>
senf::detail::PacketRegistryImpl<KeyType>::key(senf::TypeIdValue const & type, bool)
{
    typedef typename Registry::template index<ByType>::type TypeIndex;
    TypeIndex const & typeIndex (registry_.template get<ByType>());
    typename TypeIndex::const_iterator i (typeIndex.find(type.id()));
    if (i == typeIndex.end())
        return boost::optional<key_t>();
    return (*i)->key;
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::Entry const &
senf::detail::PacketRegistryImpl<KeyType>::lookup(key_t key)
{
    Entry const * e (lookup(key, true));
    if (!e)
        throw PacketTypeNotRegisteredException();
    return *e;
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::Entry const *
senf::detail::PacketRegistryImpl<KeyType>::lookup(key_t key, bool)
{
    typedef typename Registry::template index<ByKey>::type KeyIndex;
    KeyIndex const & keyIndex (registry_.template get<ByKey>());
    typename KeyIndex::const_iterator i (keyIndex.lower_bound(key));
    if (i == keyIndex.end() || (*i)->key != key)
        return 0;
    return i->get();
}

template <class KeyType>
prefix_ bool senf::detail::PacketRegistryImpl<KeyType>::v_empty()
    const
{
    return registry_.empty();
}

template <class KeyType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::v_dump(std::ostream & os)
    const
{
    typedef typename Registry::template index<ByKey>::type KeyIndex;
    KeyIndex const & keyIndex (registry_.template get<ByKey>());
    for (typename KeyIndex::iterator i (keyIndex.begin()), i_end (keyIndex.end());
         i != i_end; ++i) {
        std::string n ((*i)->name());
        senf::detail::DumpKey<KeyType>::dump((*i)->key, os);
        os << ' ' << std::setw(6) << (*i)->priority << ' ' << n.substr(21,n.size()-22) << '\n';
    }
}

template <class KeyType>
prefix_ void senf::detail::PacketRegistryImpl<KeyType>::v_clear()
{
    registry_.clear();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::DumpKey<KeyType,is_integral>

template <class KeyType, bool is_integral>
prefix_ void senf::detail::DumpKey<KeyType,is_integral>::dump(KeyType const & v,
                                                              std::ostream & os)
{
    os << "  " << std::setw(16) << std::left << v << std::setw(0) << std::right;
}

// senf::detail::DumpKey<KeyType, true>

template <class KeyType>
prefix_ void senf::detail::DumpKey<KeyType, true>::dump(KeyType const & v, std::ostream & os)
{
    os << "  " << senf::format::dumpint(v);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
