// $Id$
//
// Copyright (C) 2012
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SafeIterator internal header */

#ifndef IH_SENF_SafeIterator_
#define IH_SENF_SafeIterator_ 1

// Custom includes

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {
namespace packet {

    template <class DataIteratorType>
    class safe_data_iterator_base
        : public comparable_safe_bool< safe_data_iterator_base<DataIteratorType> >
    {
    public:
        typedef PacketData::size_type size_type;

        bool boolean_test() const
            {
                return data_;
            }

        operator DataIteratorType () const
            {
                SENF_ASSERT(data_, "Use/dereferencing of empty safe_data_iterator");
                return boost::next(data_->begin(),i_);
            }


    protected:
        safe_data_iterator_base(PacketData * data = 0, size_type i = 0)
            : data_ (data), i_ (i) {}

        PacketData * data_;
        size_type i_;
    };

#ifndef DOXYGEN

    template <class ValueType>
    class safe_data_iterator_base<ValueType *>
    {
    public:
        typedef PacketData::size_type size_type;

        operator ValueType * () const
            {
                return data_ ? boost::next(data_->begin(), i_) : static_cast<ValueType *>(0);
            }

    protected:
        safe_data_iterator_base(PacketData * data = 0, size_type i = 0)
            : data_ (data), i_ (i) {}

        PacketData * data_;
        size_type i_;
    };

#endif

}}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
