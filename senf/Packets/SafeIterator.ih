//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SafeIterator internal header */

#ifndef IH_SENF_SafeIterator_
#define IH_SENF_SafeIterator_ 1

// Custom includes

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {
namespace packet {

    template <class DataIteratorType>
    class safe_data_iterator_base
        : public comparable_safe_bool< safe_data_iterator_base<DataIteratorType> >
    {
    public:
        typedef PacketData::size_type size_type;

        bool boolean_test() const
            {
                return data_;
            }

        operator DataIteratorType () const
            {
                SENF_ASSERT(data_, "Use/dereferencing of empty safe_data_iterator");
                return boost::next(data_->begin(),i_);
            }


    protected:
        safe_data_iterator_base(PacketData * data = nullptr, size_type i = 0)
            : data_ (data), i_ (i) {}

        PacketData * data_;
        size_type i_;
    };

#ifndef DOXYGEN

    template <class ValueType>
    class safe_data_iterator_base<ValueType *>
    {
    public:
        typedef PacketData::size_type size_type;

        operator ValueType * () const
            {
                return data_ ? boost::next(data_->begin(), i_) : static_cast<ValueType *>(nullptr);
            }

    protected:
        safe_data_iterator_base(PacketData * data = nullptr, size_type i = 0)
            : data_ (data), i_ (i) {}

        PacketData * data_;
        size_type i_;
    };

#endif

}}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
