// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketParser internal header */

#ifndef IH_SENF_Packets_PacketParser_
#define IH_SENF_Packets_PacketParser_ 1

// Custom includes
#include <senf/Utils/mpl.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

    // PLEASE don't add this to doxygen ... it just looks to weird and does not help ...

#   ifndef DOXYGEN

    // Use SFINAE to check, if Parser has an integer-valued init_bytes member. If not,
    // 'Parser_TakeNum<Parser::init_bytes>' fails and the overload is removed from the overload
    // set.
    template <class Parser>
    PacketParserBase::size_type packetParserSize(
        Parser p, int, senf::mpl::take_uint<Parser::init_bytes> * = 0);

    // An ellipsis is always the worst match. A call 'packetParserSize(p,0) will prefer above
    // overload if that is not disabled by SFINAE.
    template <class Parser>
    PacketParserBase::size_type packetParserSize(Parser p, ...);

    // Same as above: This overload is only enabled, if Parser has an integer values 'init_bytes'
    // member.
    template <class Parser>
    senf::mpl::rv<0> ParserInitBytes_Choose_(senf::mpl::take_uint<Parser::init_bytes> *);

    template <class Parser>
    senf::mpl::rv<1> ParserInitBytes_Choose_(...);

    // This version of ParserInitBytes_Choose uses 'Parser::init_bytes' to provide 'value' (via
    // 'boost::integral_constant')
    template <class Parser, unsigned _>
    struct ParserInitBytes_Choose
        : public boost::integral_constant<PacketParserBase::size_type, Parser::init_bytes> {};
    // ^^-- g++ error signaled here:
    //    error: 'fixed_bytes' is not a member of 'some-class-name'
    //
    // The 'some-class-name' class (as given in the error message) does not seem to be a parser at
    // all (it has neither a 'fixed_bytes' nor an 'init_bytes' member).
    //
    // Either 'some-class-name' is not the class you wanted to use (it really is no parser) or you
    // left out either 'init_bytes' or 'fixed_bytes' when defining the parser. This will also
    // happen, if you forget to call 'SENF_PARSER_FINALIZE()' when defining a composite parser.
    //-/////////////////////////////////////////////////////////////////////////////////////////////

    // If Parser::init_bytes is not defined, this specialization is chosen which instead uses
    // 'Parser::fixed_bytes'
    template <class Parser>
    struct ParserInitBytes_Choose<Parser, 1>
        : public boost::integral_constant<PacketParserBase::size_type, Parser::fixed_bytes> {};

    template <class Parser>
    struct ParserInitBytes
        : public ParserInitBytes_Choose<Parser,SENF_MPL_RV(ParserInitBytes_Choose_<Parser>(0))> {};

    template <class Parser, unsigned _>
    struct ParserIsFixed_Choose
        : public boost::false_type {};

    template <class Parser>
    struct ParserIsFixed_Choose<Parser, 1>
        : public boost::true_type {};

    template <class Parser>
    struct ParserIsFixed
        : public ParserIsFixed_Choose<Parser,SENF_MPL_RV(ParserInitBytes_Choose_<Parser>(0))> {};

#   endif

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
