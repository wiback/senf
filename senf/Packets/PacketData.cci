//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketData inline non-template implementation */

// Custom includes
#include <senf/Utils/senfassert.hh>
#include <iterator>
#include "PacketImpl.hh"
// #include "PacketParser.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketData

prefix_ senf::detail::PacketImpl & senf::PacketData::impl()
    const
{
    SENF_ASSERT(
        impl_,
        "Internal failure: PacketData (PacketInterpreter) instance not part of any Packet?");
    return *impl_;
}

prefix_ senf::PacketData::iterator senf::PacketData::begin()
    const
{
    SENF_ASSERT(begin_ <= impl().size(),
                "Internal failure: PacketInterpreter range outside of data container");
    return boost::next(impl().begin(),begin_);
}

prefix_ senf::PacketData::iterator senf::PacketData::end()
    const
{
    SENF_ASSERT(end_ <= impl().size(),
                "Internal failure: PacketInterpreter range outside of data container");
    return boost::next(impl().begin(),end_);
}

prefix_ senf::PacketData::size_type senf::PacketData::size()
    const
{
    return end_ - begin_;
}

prefix_ bool senf::PacketData::empty()
    const
{
    return begin_ == end_;
}

prefix_ senf::PacketData::byte senf::PacketData::operator[](size_type n)
    const
{
    SENF_ASSERT( n < size(), "Access out of container range" );
    return *( boost::next(begin(),n) );
}

prefix_ senf::PacketData::byte & senf::PacketData::operator[](size_type n)
{
    SENF_ASSERT( n < size(), "Access out of container range" );
    return *( boost::next(begin(),n) );
}

// Modifying the raw packet data

prefix_ void senf::PacketData::insert(iterator pos, byte v)
{
    impl().insert(this,pos,v);
}

prefix_ void senf::PacketData::insert(iterator pos, size_type n, byte v)
{
    impl().insert(this,pos,n,v);
}

prefix_ void senf::PacketData::erase(iterator pos)
{
    impl().erase(this,pos);
}

prefix_ void senf::PacketData::erase(iterator first, iterator last)
{
    impl().erase(this,first,last);
}

prefix_ void senf::PacketData::clear()
{
    impl().clear(this);
}

prefix_ void senf::PacketData::zero(iterator first, iterator last)
{
    ::memset(first, 0, last-first);
}

prefix_ bool senf::PacketData::usingExternalMemory()
    const
{
    return impl().usingExternalMemory();
}

prefix_ void senf::PacketData::releaseExternalMemory()
{
    impl().releaseExternalMemory();
}

prefix_ bool senf::PacketData::valid()
{
    return impl_;
}

// protected members

prefix_ senf::PacketData::PacketData(size_type b, size_type e)
    : impl_(), begin_(b), end_(e)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
