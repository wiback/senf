//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketImpl non-inline template implementation  */

#include "PacketImpl.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class Annotation>
senf::detail::AnnotationRegistry::RegistrationProxy<Annotation>
    senf::detail::AnnotationRegistry::Entry<Annotation>::proxy_;

template <class Annotation>
senf::detail::AnnotationRegistry::key_type
    senf::detail::AnnotationRegistry::Entry<Annotation>::key_;

#ifndef SENF_PACKET_NO_COMPLEX_ANNOTATIONS

template <class Annotation>
prefix_ void * senf::detail::PacketImpl::complexAnnotation()
{
    AnnotationRegistry::key_type key (AnnotationRegistry::lookup<Annotation>());
    void * rv (complexAnnotation(key));
    if (! rv) {
        while (complexAnnotations_.size() < ComplexAnnotations::size_type(-key))
            complexAnnotations_.push_back(0);
        complexAnnotations_.replace(-key-1, new AnnotationRegistry::Entry<Annotation>());
        rv = complexAnnotations_[-key-1].get();
    }
    return rv;
}

#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
