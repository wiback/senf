//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketType non-inline template implementation  */

//#include "PacketType.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeMixin<Self,void>

template <class Self>
prefix_ senf::PacketInterpreterBase::optional_range
senf::PacketTypeMixin<Self,void>::nextPacketRange(ConcretePacket<Self> const & p)
{
    typename Self::size_type sz (Self::initHeadSize());
    ///\idea This if condition could be replaced with a compile time switch by checking, whether
    /// (the function address) Self::initHeadSize is different from PacketTypeBase::initHeadSize
    if (sz == PacketTypeBase::size_type(-1)) {
        try {
            typename Self::size_type headsz (bytes(p.parser()));
            return p.data().size() < headsz ?
                    PacketTypeBase::no_range() :
                    PacketInterpreterBase::optional_range(
                            PacketTypeBase::range(boost::next(p.data().begin(), headsz),
                                    p.data().end()));
        } catch (senf::TruncatedPacketException & ) {
            return PacketTypeBase::no_range();
        }

    }
    else
        // If we have a trailer, we do *not* use the 'bytes' value but initSize/initHeadSize, this
        // is much safer since the bytes() value will probably not be very correct anyways (what
        // should it return ? the size of the header only, the combined size of header and trailer
        // or the size of the packet from header to trailer including payload?).
        //
        // So, the helper only works with fixed-size parsers if the packet has a trailer.
        return p.data().size() < Self::initSize() ?
            PacketTypeBase::no_range() :
            PacketInterpreterBase::optional_range(
                PacketTypeBase::range(boost::next(p.data().begin(),sz),
                                      boost::prior(p.data().end(),Self::initSize()-sz)));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
