// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketType non-inline template implementation  */

//#include "PacketType.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeMixin<Self,void>

template <class Self>
prefix_ senf::PacketInterpreterBase::optional_range
senf::PacketTypeMixin<Self,void>::nextPacketRange(ConcretePacket<Self> const & p)
{
    typename Self::size_type sz (Self::initHeadSize());
    ///\idea This if condition could be replaced with a compile time switch by checking, whether
    /// (the function address) Self::initHeadSize is different from PacketTypeBase::initHeadSize
    if (sz == PacketTypeBase::size_type(-1)) {
        try {
            typename Self::size_type headsz (bytes(p.parser()));
            return p.data().size() < headsz ?
                    PacketTypeBase::no_range() :
                    PacketInterpreterBase::optional_range(
                            PacketTypeBase::range(boost::next(p.data().begin(), headsz),
                                    p.data().end()));
        } catch (senf::TruncatedPacketException & ) {
            return PacketTypeBase::no_range();
        }

    }
    else
        // If we have a trailer, we do *not* use the 'bytes' value but initSize/initHeadSize, this
        // is much safer since the bytes() value will probably not be very correct anyways (what
        // should it return ? the size of the header only, the combined size of header and trailer
        // or the size of the packet from header to trailer including payload?).
        //
        // So, the helper only works with fixed-size parsers if the packet has a trailer.
        return p.data().size() < Self::initSize() ?
            PacketTypeBase::no_range() :
            PacketInterpreterBase::optional_range(
                PacketTypeBase::range(boost::next(p.data().begin(),sz),
                                      boost::prior(p.data().end(),Self::initSize()-sz)));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
