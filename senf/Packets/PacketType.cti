// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketType inline template implementation */

//#include "PacketType.ih"

// Custom includes
#include "PacketRegistry.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeBase

template <class PacketType>
prefix_ senf::PacketTypeBase::factory_t senf::PacketTypeBase::factory()
{
    return PacketInterpreter<PacketType>::factory();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeMixin<Self,Registry>

template <class Self, class Registry>
prefix_ senf::PacketInterpreterBase::optional_range
senf::PacketTypeMixin<Self,Registry>::nextPacketRange(ConcretePacket<Self> const & p)
{
    // Call the member defined in the specialization below
    return PacketTypeMixin<Self>::nextPacketRange(p);
}

template <class Self, class Registry>
prefix_ senf::PacketInterpreterBase::factory_t
senf::PacketTypeMixin<Self,Registry>::nextPacketType(ConcretePacket<Self> const & p)
{
    if (p.data().size() < Self::initSize())
        return Self::no_factory();
    return lookup( Self::nextPacketKey(p) );
}

template <class Self, class Registry>
prefix_ senf::PacketInterpreterBase::size_type senf::PacketTypeMixin<Self,Registry>::initSize()
{
    return senf::init_bytes< typename Self::parser >::value;
}

template <class Self, class Registry>
prefix_ void senf::PacketTypeMixin<Self,Registry>::init(ConcretePacket<Self> const & p)
{
    p->init();
}

template <class Self, class Registry>
prefix_ typename senf::PacketTypeMixin<Self,Registry>::optional_key_t
senf::PacketTypeMixin<Self,Registry>::key(Packet const & p)
{
    return p ? PacketRegistry<Registry>::key(p, nothrow) : optional_key_t();
}

template <class Self, class Registry>
prefix_ senf::PacketTypeBase::factory_t senf::PacketTypeMixin<Self,Registry>::lookup(key_t key)
{
    typename PacketRegistry<Registry>::Entry const * entry (
        PacketRegistry<Registry>::lookup( key, senf::nothrow ));
    return entry ? entry->factory() : PacketTypeBase::no_factory();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeMixin<Self,void>

template <class Self>
prefix_ senf::PacketInterpreterBase::size_type senf::PacketTypeMixin<Self,void>::initSize()
{
    return senf::init_bytes< typename Self::parser >::value;
}

template <class Self>
prefix_ void senf::PacketTypeMixin<Self,void>::init(ConcretePacket<Self> const & p)
{
    p->init();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
