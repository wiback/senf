//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketType inline template implementation */

//#include "PacketType.ih"

// Custom includes
#include "PacketRegistry.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeBase

template <class PacketType>
prefix_ senf::PacketTypeBase::factory_t senf::PacketTypeBase::factory()
{
    return PacketInterpreter<PacketType>::factory();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeMixin<Self,Registry>

template <class Self, class Registry>
prefix_ senf::PacketInterpreterBase::optional_range
senf::PacketTypeMixin<Self,Registry>::nextPacketRange(ConcretePacket<Self> const & p)
{
    // Call the member defined in the specialization below
    return PacketTypeMixin<Self>::nextPacketRange(p);
}

template <class Self, class Registry>
prefix_ senf::PacketInterpreterBase::factory_t
senf::PacketTypeMixin<Self,Registry>::nextPacketType(ConcretePacket<Self> const & p)
{
    if (p.data().size() < Self::initSize())
        return Self::no_factory();
    return lookup( Self::nextPacketKey(p) );
}

template <class Self, class Registry>
prefix_ senf::PacketInterpreterBase::size_type senf::PacketTypeMixin<Self,Registry>::initSize()
{
    return senf::init_bytes< typename Self::parser >::value;
}

template <class Self, class Registry>
prefix_ void senf::PacketTypeMixin<Self,Registry>::init(ConcretePacket<Self> const & p)
{
    p->init();
}

template <class Self, class Registry>
prefix_ typename senf::PacketTypeMixin<Self,Registry>::optional_key_t
senf::PacketTypeMixin<Self,Registry>::key(Packet const & p)
{
    return p ? PacketRegistry<Registry>::key(p, nothrow) : optional_key_t();
}

template <class Self, class Registry>
prefix_ senf::PacketTypeBase::factory_t senf::PacketTypeMixin<Self,Registry>::lookup(key_t key)
{
    typename PacketRegistry<Registry>::Entry const * entry (
        PacketRegistry<Registry>::lookup( key, senf::nothrow ));
    return entry ? entry->factory() : PacketTypeBase::no_factory();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketTypeMixin<Self,void>

template <class Self>
prefix_ senf::PacketInterpreterBase::size_type senf::PacketTypeMixin<Self,void>::initSize()
{
    return senf::init_bytes< typename Self::parser >::value;
}

template <class Self>
prefix_ void senf::PacketTypeMixin<Self,void>::init(ConcretePacket<Self> const & p)
{
    p->init();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
