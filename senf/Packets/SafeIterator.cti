//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SafeIterator inline template implementation */

#include "SafeIterator.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::SafePacketParserWrapper<Parser>

template <class Parser>
prefix_ senf::SafePacketParserWrapper<Parser>::SafePacketParserWrapper()
    : parser_(), i_()
{}

template <class Parser>
prefix_ senf::SafePacketParserWrapper<Parser>::SafePacketParserWrapper(Parser parser)
    : parser_(parser), i_(parser)
{}

template <class Parser>
prefix_ senf::SafePacketParserWrapper<Parser> & senf::SafePacketParserWrapper<Parser>::operator=(Parser parser)
{
    parser_ = parser;
    i_ = parser;
    return *this;
}

template <class Parser>
prefix_ Parser & senf::SafePacketParserWrapper<Parser>::operator*()
    const
{
    SENF_ASSERT( i_, "Dereferencing empty SafePacketParserWrapper" );
    parser_->i_ = PacketParserBase::data_iterator(i_);
    return *parser_;
}

template <class Parser>
prefix_ Parser * senf::SafePacketParserWrapper<Parser>::operator->()
    const
{
    SENF_ASSERT( i_, "Dereferencing empty SafePacketParserWrapper" );
    parser_->i_ = PacketParserBase::data_iterator(i_);
    return & (*parser_);
}

template <class Parser>
prefix_ bool senf::SafePacketParserWrapper<Parser>::boolean_test()
    const
{
    return i_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
