// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ListParser inline template implementation */

#include "ListParser.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ListParser<ListPolicy>

template <class ListPolicy>
prefix_ senf::ListParser<ListPolicy>::ListParser(data_iterator i, state_type s)
    : PacketParserBase(i,s), ListPolicy()
{}

template <class ListPolicy>
prefix_ senf::ListParser<ListPolicy>::ListParser(ListPolicy policy,
                                                               data_iterator i, state_type s)
    : PacketParserBase(i,s), ListPolicy(policy)
{}

template <class ListPolicy>
prefix_ senf::PacketParserBase::size_type
senf::ListParser<ListPolicy>::bytes()
    const
{
    return ListPolicy::bytes(i(),state());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// Container interface

template <class ListPolicy>
prefix_ senf::PacketParserBase::size_type
senf::ListParser<ListPolicy>::size()
    const
{
    return ListPolicy::size(i(),state());
}

template <class ListPolicy>
prefix_ bool senf::ListParser<ListPolicy>::empty()
    const
{
    container c (*this);
    return c.empty();
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy>::value_type
senf::ListParser<ListPolicy>::front()
    const
{
    SENF_ASSERT( ! empty(), "front() called on empty list" );
    container c(*this);
    return *(c.begin());
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser<ListPolicy>::push_back(Value const & value, size_type n)
    const
{
    container c(*this);
    c.push_back(value,n);
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy>::value_type
senf::ListParser<ListPolicy>::push_back_space(size_type n)
    const
{
    container c(*this);
    return c.push_back_space(n);
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser<ListPolicy>::push_front(Value const & value, size_type n)
    const
{
    container c(*this);
    c.push_front(value,n);
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy>::value_type
senf::ListParser<ListPolicy>::push_front_space(size_type n)
    const
{
    container c(*this);
    return c.push_front_space(n);
}

template <class ListPolicy>
prefix_ void senf::ListParser<ListPolicy>::resize(size_type n)
    const
{
    container c(*this);
    c.resize(n);
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser<ListPolicy>::resize(size_type n, Value value)
    const
{
    container c(*this);
    c.resize(n,value);
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy> &
senf::ListParser<ListPolicy>::get(ListPolicy & p)
{
    return static_cast<ListParser &>(p);
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy> const &
senf::ListParser<ListPolicy>::get(ListPolicy const & p)
{
    return static_cast<ListParser const &>(p);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>

template <class Container>
prefix_ senf::detail::ListParser_Iterator<Container>::ListParser_Iterator()
{}

template <class Container>
prefix_ senf::detail::ListParser_Iterator<Container>::ListParser_Iterator(Container const & c)
    : c_ (&c)
{}

template <class Container>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::ListParser_Iterator<Container>::raw()
    const
{
    return c_->Container::policy::raw(*c_, *this);
}

template <class Container>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::ListParser_Iterator<Container>::i()
    const
{
    return i_;
}

template <class Container>
prefix_ typename senf::detail::ListParser_Iterator<Container> &
senf::detail::ListParser_Iterator<Container>::get(typename Container::policy::iterator_data & d)
{
    return static_cast<ListParser_Iterator &>(d);
}

template <class Container>
prefix_ typename senf::detail::ListParser_Iterator<Container> const &
senf::detail::ListParser_Iterator<Container>::
get(typename Container::policy::iterator_data const & d)
{
    return static_cast<ListParser_Iterator const &>(d);
}

template <class Container>
prefix_ typename senf::detail::ListParser_Iterator<Container>::value_type
senf::detail::ListParser_Iterator<Container>::dereference()
    const
{
    return value_type(i_,c_->state());
}

template <class Container>
prefix_ bool
senf::detail::ListParser_Iterator<Container>::equal(ListParser_Iterator const & other)
    const
{
    return i_ == other.i_;
}

template <class Container>
prefix_ void senf::detail::ListParser_Iterator<Container>::increment()
{
    i_ = c_->Container::policy::next(*c_, *this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ListParser_Container<ListPolicy>

// Structors and default members

template <class ListPolicy>
prefix_ senf::ListParser_Container<ListPolicy>::
ListParser_Container(parser_type const & list)
    : ListPolicy(static_cast<typename parser_type::policy const &>(list)),
      state_(list.state()), i_(std::distance(data().begin(),list.i()))
{
    ListPolicy::construct(*this);
}

template <class ListPolicy>
prefix_ senf::ListParser_Container<ListPolicy>::~ListParser_Container()
{
    ListPolicy::update(*this);
    ListPolicy::destruct(*this);
}

// Accessors

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::size_type
senf::ListParser_Container<ListPolicy>::size()
    const
{
    ListPolicy::update(*this);
    return ListPolicy::size(i(),state());
}

template <class ListPolicy>
prefix_ bool senf::ListParser_Container<ListPolicy>::empty()
    const
{
    ListPolicy::update(*this);
    return begin() == end();
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::iterator
senf::ListParser_Container<ListPolicy>::begin()
    const
{
    ListPolicy::update(*this);
    iterator i (*this);
    i.i_ = ListPolicy::setBegin(*this, i);
    return i;
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::iterator
senf::ListParser_Container<ListPolicy>::end()
    const
{
    ListPolicy::update(*this);
    iterator i (*this);
    i.i_ = ListPolicy::setEnd(*this, i);
    return i;
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::value_type
senf::ListParser_Container<ListPolicy>::front()
    const
{
    SENF_ASSERT( ! empty(), "front() called on empty list" );
    return *begin();
}

// Mutators

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser_Container<ListPolicy>::insert(iterator pos,
                                                            Value const & t)
{
    insert(pos,1,t);
}

template <class ListPolicy>
prefix_ void senf::ListParser_Container<ListPolicy>::erase(iterator f, iterator l)
{
    erase(f,std::distance(f,l));
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser_Container<ListPolicy>::push_back(Value const & value,
                                                               size_type n)
{
    insert(end(),n,value);
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::value_type
senf::ListParser_Container<ListPolicy>::push_back_space(size_type n)
{
    return shift(end(),n);
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser_Container<ListPolicy>::push_front(Value const & value,
                                                                size_type n)
{
    insert(begin(),n,value);
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::value_type
senf::ListParser_Container<ListPolicy>::push_front_space(size_type n)
{
    return shift(begin(),n);
}

// Parser interface

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::parser_type
senf::ListParser_Container<ListPolicy>::parser()
    const
{
    ListPolicy::update(*this);
    return parser_type(i(),state());
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::data_iterator
senf::ListParser_Container<ListPolicy>::i()
    const
{
    return boost::next(data().begin(),i_);
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::state_type
senf::ListParser_Container<ListPolicy>::state()
    const
{
    return state_;
}

template <class ListPolicy>
prefix_ senf::PacketData & senf::ListParser_Container<ListPolicy>::data()
    const
{
    return *state_;
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::size_type
senf::ListParser_Container<ListPolicy>::bytes()
    const
{
    ListPolicy::update(*this);
    return ListPolicy::bytes(i(),state());
}

template <class ListPolicy>
prefix_ void senf::ListParser_Container<ListPolicy>::init()
    const
{
    parser().init();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
