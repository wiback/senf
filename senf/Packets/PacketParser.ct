//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketParser non-inline template implementation  */

#include "PacketParser.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN
template <class Parser>
prefix_ typename boost::enable_if_c<
        boost::is_base_of<senf::PacketParserBase, Parser>::value && ! senf::is_fixed<Parser>::value, Parser >::type
        senf::operator<<(Parser const & target, Parser const & source)
{
    PacketParserBase::size_type target_sz (bytes(target));
    PacketParserBase::size_type source_sz (bytes(source));
    SafePacketParserWrapper<Parser> safe_target (target);
    if (target_sz > source_sz)
        target.data().erase(boost::next(target.i(),source_sz),boost::next(target.i(),target_sz));
    else if (target_sz < source_sz)
        target.data().insert(boost::next(target.i(),target_sz),source_sz-target_sz,0u);
    Parser new_target (*safe_target);
    std::copy( source.i(), boost::next(source.i(),source_sz),
               PacketParserBase::data_iterator(new_target.i()) );
    return new_target;
}
#else
template <class Parser>
prefix_ Parser senf::operator<<(Parser const & target, Parser const & source)
{}
#endif

// Why is this function reported as not inlineable ?

template <class Parser>
prefix_ senf::PacketParserBase::size_type senf::detail::packetParserSize(Parser const & p, ...)
{
    return Parser::fixed_bytes;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
