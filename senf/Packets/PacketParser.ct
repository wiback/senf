// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketParser non-inline template implementation  */

#include "PacketParser.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN
template <class Parser>
prefix_ typename boost::enable_if<
        boost::is_base_of<senf::PacketParserBase, Parser>,
        Parser >::type senf::operator<<(Parser target, Parser source)
{
    PacketParserBase::size_type target_sz (bytes(target));
    PacketParserBase::size_type source_sz (bytes(source));
    SafePacketParserWrapper<Parser> safe_target (target);
    if (target_sz > source_sz)
        target.data().erase(boost::next(target.i(),source_sz),boost::next(target.i(),target_sz));
    else if (target_sz < source_sz)
        target.data().insert(boost::next(target.i(),target_sz),source_sz-target_sz,0u);
    Parser new_target (*safe_target);
    std::copy( source.i(), boost::next(source.i(),source_sz),
               PacketParserBase::data_iterator(new_target.i()) );
    return new_target;
}
#else
template <class Parser>
prefix_ Parser senf::operator<<(Parser target, Parser source)
{}
#endif

// Why is this function reported as not inlineable ?

template <class Parser>
prefix_ senf::PacketParserBase::size_type senf::detail::packetParserSize(Parser p, ...)
{
    return Parser::fixed_bytes;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
