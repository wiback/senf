// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketRegistry inline template implementation */

#include "PacketRegistry.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketRegistry<Tag>::ScopedRegistrationProxy<PacketType>

template <class Tag>
template <class PacketType>
prefix_ senf::PacketRegistry<Tag>::ScopedRegistrationProxy<PacketType>::
ScopedRegistrationProxy(typename Tag::key_t key, int priority)
{
    PacketRegistry<Tag>::template registerPacket<PacketType>(key,priority);
}

template <class Tag>
template <class PacketType>
prefix_ senf::PacketRegistry<Tag>::ScopedRegistrationProxy<PacketType>::~ScopedRegistrationProxy()
{
    try {
        PacketRegistry<Tag>::template unregisterPacket<PacketType>();
    }
    catch (PacketTypeNotRegisteredException & ex)
    {}
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketRegistry<Tag>

template <class Tag>
template <class PacketType>
prefix_ void senf::PacketRegistry<Tag>::registerPacket(typename Tag::key_t key, int priority)
{
    registry().template registerPacket<PacketType>(key, priority);
}

template <class Tag>
template <class PacketType>
prefix_ void senf::PacketRegistry<Tag>::unregisterPacket()
{
    if (alive())
        registry().template unregisterPacket<PacketType>();
}

template <class Tag>
prefix_ void senf::PacketRegistry<Tag>::unregisterPacket(typename Tag::key_t key, int priority)
{
    if (alive())
        registry().unregisterPacket(key, priority);
}

template <class Tag>
template <class PacketType>
prefix_ typename Tag::key_t senf::PacketRegistry<Tag>::key()
{
    return registry().key(senf::typeIdValue<PacketType>());
}

template <class Tag>
template <class PacketType>
prefix_ typename boost::optional<typename Tag::key_t> senf::PacketRegistry<Tag>::key(NoThrow_t)
{
    return registry().key(senf::typeIdValue<PacketType>(),true);
}

template <class Tag>
prefix_ typename Tag::key_t senf::PacketRegistry<Tag>::key(Packet const & packet)
{
    return registry().key(packet.typeId());
}

template <class Tag>
prefix_ typename boost::optional<typename Tag::key_t>
senf::PacketRegistry<Tag>::key(Packet const & packet, NoThrow_t)
{
    return registry().key(packet.typeId(),true);
}

template <class Tag>
prefix_ typename senf::PacketRegistry<Tag>::Entry const &
senf::PacketRegistry<Tag>::lookup(typename Tag::key_t key)
{
    return registry().lookup(key);
}

template <class Tag>
prefix_ typename senf::PacketRegistry<Tag>::Entry const *
senf::PacketRegistry<Tag>::lookup(typename Tag::key_t key, NoThrow_t)
{
    return registry().lookup(key,true);
}

template <class Tag>
prefix_ typename senf::PacketRegistry<Tag>::iterator senf::PacketRegistry<Tag>::begin()
{
    return registry().begin();
}

template <class Tag>
prefix_ typename senf::PacketRegistry<Tag>::iterator senf::PacketRegistry<Tag>::end()
{
    return registry().end();
}

template <class Tag>
prefix_ senf::PacketRegistry<Tag>::PacketRegistry()
    : registry_ (prettyName(typeid(Tag)))
{}

template <class Tag>
prefix_ typename senf::PacketRegistry<Tag>::Registry &
senf::PacketRegistry<Tag>::registry()
{
    return instance().registry_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::PacketRegistryImpl<KeyType>

template <class KeyType>
prefix_ senf::detail::PacketRegistryImpl<KeyType>::PacketRegistryImpl(std::string const & name)
    : registryByKey_( registry_.template get<ByKey>()),
      registryByType_( registry_.template get<ByType>())
{
    registries()[name] = this;
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::iterator
senf::detail::PacketRegistryImpl<KeyType>::begin()
    const
{
    return registry_.begin();
}

template <class KeyType>
prefix_ typename senf::detail::PacketRegistryImpl<KeyType>::iterator
senf::detail::PacketRegistryImpl<KeyType>::end()
    const
{
    return registry_.end();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
