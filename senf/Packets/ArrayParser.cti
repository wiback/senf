// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ArrayParser inline template implementation */

#include "ArrayParser.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ArrayParser<elements,ElementParser>

template <unsigned elements, class ElementParser>
prefix_ senf::ArrayParser<elements,ElementParser>::ArrayParser(data_iterator i, state_type s)
    : PacketParserBase(i,s,fixed_bytes)
{}

// Container interface

template <unsigned elements, class ElementParser>
prefix_ typename senf::ArrayParser<elements,ElementParser>::size_type
senf::ArrayParser<elements,ElementParser>::size()
{
    return elements;
}

template <unsigned elements, class ElementParser>
prefix_ typename senf::ArrayParser<elements,ElementParser>::iterator
senf::ArrayParser<elements,ElementParser>::begin()
    const
{
    return iterator(i(),state());
}

template <unsigned elements, class ElementParser>
prefix_ typename senf::ArrayParser<elements,ElementParser>::iterator
senf::ArrayParser<elements,ElementParser>::end()
    const
{
    return iterator(boost::next(i(),fixed_bytes),state());
}

template <unsigned elements, class ElementParser>
prefix_ typename senf::ArrayParser<elements,ElementParser>::value_type
senf::ArrayParser<elements,ElementParser>::operator[](difference_type i)
    const
{
    // Access out of range element
    SENF_ASSERT( i>=0 && i < difference_type(elements), "Access to out-of-range array element" );
    return begin()[i];
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::ArrayParser_iterator<ElementParser>

template <class ElementParser>
prefix_ senf::detail::ArrayParser_iterator<ElementParser>::ArrayParser_iterator()
    : i_()
{}

template <class ElementParser>
prefix_  senf::detail::ArrayParser_iterator<ElementParser>::
ArrayParser_iterator(PacketParserBase::data_iterator const & i, PacketParserBase::state_type s)
    : i_(i), s_(s)
{}

template <class ElementParser>
prefix_ ElementParser
senf::detail::ArrayParser_iterator<ElementParser>::operator[](int i)
    const
{
    return (*this+i).dereference();
}

template <class ElementParser>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::ArrayParser_iterator<ElementParser>::raw()
    const
{
    return i_;
}

// iterator_facade interface

template <class ElementParser>
prefix_ ElementParser
senf::detail::ArrayParser_iterator<ElementParser>::dereference()
    const
{
    return ElementParser(i_,s_);
}

template <class ElementParser>
prefix_ bool
senf::detail::ArrayParser_iterator<ElementParser>::
equal(ArrayParser_iterator const & other)
    const
{
    return i_==other.i_;
}

template <class ElementParser>
prefix_ int senf::detail::ArrayParser_iterator<ElementParser>::
distance_to(ArrayParser_iterator const & other)
    const
{
    return (other.i_-i_)/ElementParser::fixed_bytes;
}

template <class ElementParser>
prefix_ void senf::detail::ArrayParser_iterator<ElementParser>::increment()
{
    i_ += ElementParser::fixed_bytes;
}

template <class ElementParser>
prefix_ void senf::detail::ArrayParser_iterator<ElementParser>::decrement()
{
    i_ -= ElementParser::fixed_bytes;
}

template <class ElementParser>
prefix_ void senf::detail::ArrayParser_iterator<ElementParser>::advance(int n)
{
    i_ += n*ElementParser::fixed_bytes;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
