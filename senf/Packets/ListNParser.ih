// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ListNParser internal header */

#ifndef IH_SENF_Packets_ListNParser_
#define IH_SENF_Packets_ListNParser_ 1

// Custom includes
#include "ListParser.ih"

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

    /** \brief Internal: ListPolicy defining the ListNParser parser
        \internal
        \see \ref ListParser
     */
    template <class ElementParser, class AuxPolicy>
    struct ListNParser_Policy
        : public AuxPolicy
    {
        typedef ListNParser_Policy<
            ElementParser, typename AuxPolicy::ParserPolicy> parser_policy;
        typedef ListNParser_Policy<
            ElementParser, typename AuxPolicy::WrapperPolicy> container_policy;
        typedef PacketParserBase::data_iterator data_iterator;
        typedef PacketParserBase::state_type state_type;
        typedef PacketParserBase::size_type size_type;
        typedef ElementParser element_type;
        typedef ListParser<parser_policy> parser_type;
        typedef ListParser_Container<container_policy> container_type;

        static const size_type init_bytes = AuxPolicy::aux_bytes;

        ListNParser_Policy();
        template <class Arg> ListNParser_Policy(Arg const & aux);
        ListNParser_Policy(parser_policy const & policy);

        size_type bytes  (data_iterator i, state_type s) const;
        size_type size   (data_iterator i, state_type s) const;
        void      init   (data_iterator i, state_type s) const;

        void      construct (container_type & c) const;
        void      destruct  (container_type & c) const;
        void      erase     (container_type & c, data_iterator p) const;
        void      insert    (container_type & c, data_iterator p) const;
        void      update    (container_type const & c) const;

        /** Internal: ListNParser iterator specific data */
        struct iterator_data {
            size_type n_;
        };

        data_iterator setBegin        (container_type const & c, iterator_data & d) const;
        data_iterator setEnd          (container_type const & c, iterator_data & d) const;
        void          setFromPosition (container_type const & c, iterator_data & d, data_iterator p) const;
        data_iterator next            (container_type const & c, iterator_data & d) const;
        data_iterator raw             (container_type const & c, iterator_data const & d) const;
    };

#ifndef DOXYGEN

    template <class ElementParser, class AuxPolicy>
    struct ListParserPolicy<ElementParser, AuxPolicy, senf::detail::auxtag::none>
    {
        typedef ListNParser_Policy<ElementParser, AuxPolicy> type;
    };

    template <class ElementParser, class AuxPolicy, class Transform>
    struct ListParserPolicy<ElementParser, AuxPolicy,
                            senf::detail::auxtag::transform<Transform,
                                                            senf::detail::auxtag::none> >
    {
        typedef ListNParser_Policy< ElementParser,
                                    TransformAuxParserPolicy<AuxPolicy, Transform> > type;
    };

#endif

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
