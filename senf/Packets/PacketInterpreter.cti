//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketInterpreter inline template implementation */

//#include "PacketInterpreter.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketInterpreterBase

// Interpreter chain access

template <class Type>
prefix_ typename senf::PacketInterpreter<Type>::ptr senf::PacketInterpreterBase::as()
{
    // ensure that the template argument is included in the corresponding object file when linking:
    { static typename PacketInterpreter<Type>::factory_t _ (PacketInterpreter<Type>::factory()); (void) _;}
    return typename PacketInterpreter<Type>::ptr(
        static_cast< PacketInterpreter<Type>* >(this));
}

template <class Annotation>
prefix_ Annotation & senf::PacketInterpreterBase::annotation()
{
    return impl().annotation<Annotation>();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketInterpreter<PacketType>

template <class PacketType>
prefix_ senf::PacketInterpreterBase::factory_t
senf::PacketInterpreter<PacketType>::factory()
{
    static const FactoryImpl factory;
    return & factory;
}

// Create completely new packet

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::create()
{
    return create(initSize());
}

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::create(senf::NoInit_t)
{
    return create(0,senf::noinit);
}

template <class PacketType>
template <class ForwardReadableRange>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::create(ForwardReadableRange const & range)
{
    detail::PacketImpl::Guard p (new detail::PacketImpl(boost::begin(range),boost::end(range)));
    ptr pi (create(p.p,p.p->begin(),p.p->end(),Append));
    return pi;
}

// Create packet as new packet after a given packet

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::createAfter(PacketInterpreterBase::ptr const & packet)
{
    return createAfter(packet, initSize());
}

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::createAfter(PacketInterpreterBase::ptr const & packet, senf::NoInit_t)
{
    return createAfter(packet, 0, senf::noinit);
}

// Create clone of current packet

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::clone()
{
    return boost::static_pointer_cast<typename ptr::element_type>(PacketInterpreterBase::clone());
}

// Packet field access

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::parser
senf::PacketInterpreter<PacketType>::fields()
{
    return parser(data().begin(),&data());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

// Private structors

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::create(detail::PacketImpl * impl, iterator b, iterator e,
                                            Append_t)
{
    // PacketInterpreter constructor does not throw
    void * storage (impl->allocateInterpreter());
    return ptr(new (storage) PacketInterpreter(impl,b,e,Append));
}

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::create(detail::PacketImpl * impl, iterator b, iterator e,
                                            Prepend_t)
{
    // PacketInterpreter constructor does not throw
    void * storage (impl->allocateInterpreter());
    return ptr(new (storage) PacketInterpreter(impl,b,e,Prepend));
}

template <class PacketType>
prefix_ typename senf::PacketInterpreter<PacketType>::ptr
senf::PacketInterpreter<PacketType>::create(detail::PacketImpl * impl, iterator b, iterator e,
                                            PacketInterpreterBase::ptr const & before)
{
    // PacketInterpreter constructor does not throw
    void * storage (impl->allocateInterpreter());
    return ptr(new (storage) PacketInterpreter(impl,b,e,before));
}

template <class PacketType>
prefix_ senf::PacketInterpreter<PacketType>::PacketInterpreter(detail::PacketImpl * impl,
                                                               iterator b, iterator e, Append_t)
    : PacketInterpreterBase(impl,b,e,Append)
{
    SENF_STATIC_ASSERT(sizeof(PacketInterpreter) == sizeof(PacketInterpreterBase),
                       invalid_size_of_packetinterpreter);
}

template <class PacketType>
prefix_ senf::PacketInterpreter<PacketType>::PacketInterpreter(detail::PacketImpl * impl,
                                                               iterator b, iterator e, Prepend_t)
    : PacketInterpreterBase(impl,b,e,Prepend)
{
    SENF_STATIC_ASSERT(sizeof(PacketInterpreter) == sizeof(PacketInterpreterBase),
                       invalid_size_of_packetinterpreter);
}

template <class PacketType>
prefix_
senf::PacketInterpreter<PacketType>::PacketInterpreter(detail::PacketImpl * impl, iterator b,
                                                       iterator e,
                                                       PacketInterpreterBase::ptr const & before)
    : PacketInterpreterBase(impl,b,e,before)
{
    SENF_STATIC_ASSERT(sizeof(PacketInterpreter) == sizeof(PacketInterpreterBase),
                       invalid_size_of_derived_packetinterpreter);
}

// PacketType access

template <class PacketType>
prefix_ senf::PacketInterpreterBase::size_type
senf::PacketInterpreter<PacketType>::initSize()
{
    return type::initSize();
}

template <class PacketType>
prefix_ senf::PacketInterpreterBase::size_type
senf::PacketInterpreter<PacketType>::initHeadSize()
{
    size_type sz (type::initHeadSize());
    return  sz == size_type(-1) ? initSize() : sz ;
}

template <class PacketType>
prefix_ void senf::PacketInterpreter<PacketType>::init()
{
    return type::init(ConcretePacket<PacketType>(ptr(this)));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
