//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief MIH Message-Registry internal header */

#ifndef IH_SENF_Packets_80221Bundle_MIHMessageRegistry_
#define IH_SENF_Packets_80221Bundle_MIHMessageRegistry_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////
namespace senf {

    namespace detail {

        template<class T, typename Signature>
        struct has_static_validate_member
        {
            template<Signature *>
            struct helper;

            template<class U>
            static char test(helper<&U::validate> *);

            template<class U>
            static char (&test(...))[2];

            static const bool value = sizeof(test<T>(0))==1;
        };


        struct MIHMessageRegistry_EntryBase
            : private boost::noncopyable
        {
            virtual ~MIHMessageRegistry_EntryBase() {}
            virtual void validate(senf::Packet message) const = 0;
            virtual std::string name() const = 0;
        };


        template <class MIHPacket,
            bool use_validate_member = has_static_validate_member<typename MIHPacket::type, void(MIHPacket)>::value>
        struct MIHMessageRegistryEntry : MIHMessageRegistry_EntryBase
        {
            virtual void validate(senf::Packet message) const {}
            virtual std::string name() const {
                return senf::prettyName(typeid(MIHPacket));
            }
        };

        template <class MIHPacket>
        struct MIHMessageRegistryEntry<MIHPacket, true> : MIHMessageRegistry_EntryBase
        {
            virtual void validate(senf::Packet message) const;
            virtual std::string name() const {
                return senf::prettyName(typeid(MIHPacket));
            }
        };

    }
}
//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif



// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
