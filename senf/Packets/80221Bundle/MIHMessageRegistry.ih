// $Id$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Thorsten Horstmann <tho@berlios.de>

/** \file
    \brief MIH Message-Registry internal header */

#ifndef IH_SENF_Packets_80221Bundle_MIHMessageRegistry_
#define IH_SENF_Packets_80221Bundle_MIHMessageRegistry_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////
namespace senf {

    namespace detail {

        template<class T, typename Signature>
        struct has_static_validate_member
        {
            template<Signature *>
            struct helper;

            template<class U>
            static char test(helper<&U::validate> *);

            template<class U>
            static char (&test(...))[2];

            static const bool value = sizeof(test<T>(0))==1;
        };


        struct MIHMessageRegistry_EntryBase
            : private boost::noncopyable
        {
            virtual ~MIHMessageRegistry_EntryBase() {}
            virtual void validate(senf::Packet message) const = 0;
            virtual std::string name() const = 0;
        };


        template <class MIHPacket,
            bool use_validate_member = has_static_validate_member<typename MIHPacket::type, void(MIHPacket)>::value>
        struct MIHMessageRegistryEntry : MIHMessageRegistry_EntryBase
        {
            virtual void validate(senf::Packet message) const {}
            virtual std::string name() const {
                return senf::prettyName(typeid(MIHPacket));
            }
        };

        template <class MIHPacket>
        struct MIHMessageRegistryEntry<MIHPacket, true> : MIHMessageRegistry_EntryBase
        {
            virtual void validate(senf::Packet message) const;
            virtual std::string name() const {
                return senf::prettyName(typeid(MIHPacket));
            }
        };

    }
}
//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif



// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
