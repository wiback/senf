// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Thorsten Horstmann <tho@berlios.de>

/** \file
    \brief TLVParser inline non-template implementation */

//#include "TLVParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// MIHLengthParser

prefix_ senf::MIHLengthParser::size_type senf::MIHLengthParser::bytes() const
{
    return 1 + ( length_field()<=128 ? 0 : fixed_length_field());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// MIHFIdTLVParser::binaryNAIDecoder

prefix_ senf::MIHFIdTLVParser::binaryNAIDecoder::binaryNAIDecoder()
    : readNextByte_( true)
{}

prefix_ bool senf::MIHFIdTLVParser::binaryNAIDecoder::operator()(boost::uint8_t v)
{
    readNextByte_ = readNextByte_ ? false : true;
    return readNextByte_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// MIHFIdTLVParser

prefix_ senf::PacketParserBase::data_iterator senf::MIHFIdTLVParser::valueBegin()
    const
{
    return i( idValue_offset());
}

prefix_ senf::PacketParserBase::data_iterator senf::MIHFIdTLVParser::valueEnd()
    const
{
    return i( idValue_offset() + idLength());
}

prefix_ std::string senf::MIHFIdTLVParser::valueAsString()
    const
{
    return std::string( valueBegin(), valueEnd());
}

prefix_ senf::MACAddress senf::MIHFIdTLVParser::valueAsMACAddress()
    const
{
    if (idLength() != 6*2) throw WrapException<std::bad_cast>(std::bad_cast())
        << " length of MIHF_ID does not match for a MAC address (" << idLength() << ")";
    return MACAddress::from_data( getNAIDecodedIterator( valueBegin(), valueEnd()));
}

prefix_ senf::INet4Address senf::MIHFIdTLVParser::valueAsINet4Address()
    const
{
    if (idLength() != 4*2) throw WrapException<std::bad_cast>(std::bad_cast())
        << " length of MIHF_ID does not match for an INet4 address (" << idLength() << ")";
    return INet4Address::from_data( getNAIDecodedIterator( valueBegin(), valueEnd()));
}

prefix_ senf::INet6Address senf::MIHFIdTLVParser::valueAsINet6Address()
    const
{
    if (idLength() != 16*2) throw WrapException<std::bad_cast>(std::bad_cast())
        << " length of MIHF_ID does not match for an INet6 address (" << idLength() << ")";
    return INet6Address::from_data( getNAIDecodedIterator( valueBegin(), valueEnd()));
}

prefix_ senf::EUI64 senf::MIHFIdTLVParser::valueAsEUI64()
    const
{
    if (idLength() != 8*2) throw WrapException<std::bad_cast>(std::bad_cast())
        << " length of MIHF_ID does not match for an EUI64 address (" << idLength() << ")";
    return EUI64::from_data( getNAIDecodedIterator( valueBegin(), valueEnd()));
}

prefix_ bool senf::MIHFIdTLVParser::valueEquals( std::string const &id)
    const
{
    return id == valueAsString();
}

prefix_ bool senf::MIHFIdTLVParser::valueEquals( senf::MACAddress const & addr)
    const
{
    return idLength()==12 && addr==valueAsMACAddress();
}

prefix_ bool senf::MIHFIdTLVParser::valueEquals( senf::INet4Address const & addr)
    const
{
    return idLength()==8 && addr==valueAsINet4Address();
}

prefix_ bool senf::MIHFIdTLVParser::valueEquals( senf::INet6Address const & addr)
    const
{
    return idLength()==32 && addr==valueAsINet6Address();
}

prefix_ bool senf::MIHFIdTLVParser::valueEquals( senf::EUI64 const & addr)
    const
{
    return idLength()==16 && addr==valueAsEUI64();
}

prefix_ bool senf::MIHFIdTLVParser::valueEquals( MIHFId const & id)
    const
{
    return boost::apply_visitor( ValueEqualsVisitor(*this), id);
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
// MIHBaseTLVParser

prefix_ void senf::MIHBaseTLVParser::maxLength(MIHLengthParser::value_type maxl)
    const
{
    protect(), length_().capacity(maxl);
}

prefix_ void senf::MIHBaseTLVParser::finalize()
{
    protect(), length_().finalize();
};


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
