//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief MIH Message-Registry non-inline template implementation */

// Custom includes
#include "Exceptions.hh"

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::MIHMessageRegistry

template <typename MIHPacket>
prefix_ void senf::MIHMessageRegistry::registerMessageType(key_t messageId)
{
    map_.insert(messageId, new detail::MIHMessageRegistryEntry<MIHPacket>() );
}

template <typename MIHPacket>
prefix_ senf::MIHMessageRegistry::RegistrationProxy<MIHPacket>::RegistrationProxy(key_t messageId)
{
    MIHMessageRegistry::instance().registerMessageType<MIHPacket>(messageId);
}

template <typename MIHPacket>
prefix_ void senf::detail::MIHMessageRegistryEntry<MIHPacket, true>::validate(senf::Packet message)
    const
{
    if (! message.is<MIHPacket>())
        throw InvalidMIHPacketException("invalid packet chain: ")
            << (message ? message.typeId().prettyName() : "invalid packet")
            << " != " << prettyName(typeid(MIHPacket));
    MIHPacket::type::validate(message.as<MIHPacket>());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
