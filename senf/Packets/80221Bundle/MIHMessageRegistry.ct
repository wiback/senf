// $Id$
//
// Copyright (C) 2011
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Thorsten Horstmann <tho@berlios.de>

/** \file
    \brief MIH Message-Registry non-inline template implementation */

// Custom includes
#include "Exceptions.hh"

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::MIHMessageRegistry

template <typename MIHPacket>
prefix_ void senf::MIHMessageRegistry::registerMessageType(key_t messageId)
{
    map_.insert(messageId, new detail::MIHMessageRegistryEntry<MIHPacket>() );
}

template <typename MIHPacket>
prefix_ senf::MIHMessageRegistry::RegistrationProxy<MIHPacket>::RegistrationProxy(key_t messageId)
{
    MIHMessageRegistry::instance().registerMessageType<MIHPacket>(messageId);
}

template <typename MIHPacket>
prefix_ void senf::detail::MIHMessageRegistryEntry<MIHPacket, true>::validate(senf::Packet message)
    const
{
    if (! message.is<MIHPacket>())
        throw InvalidMIHPacketException("invalid packet chain: ")
            << (message ? message.typeId().prettyName() : "invalid packet")
            << " != " << prettyName(typeid(MIHPacket));
    MIHPacket::type::validate(message.as<MIHPacket>());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
