//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief MIHTypes inline non-template implementation */

//#include "MIHTypes.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// MIHFId
prefix_ senf::MIHFId::MIHFId()
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( boost::blank())
{ }

prefix_ senf::MIHFId::MIHFId(senf::MACAddress const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::INet4Address const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::INet6Address const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(std::string const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::EUI64 const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::Type senf::MIHFId::type()
    const
{
    return boost::apply_visitor( GetTypeVisitor(), *this );
}

prefix_ bool senf::MIHFId::operator==(senf::MIHFId const & other)
    const
{
    return boost::apply_visitor( EqualsVisitor(), *this, other);
}

prefix_ bool senf::MIHFId::operator<(senf::MIHFId const & other)
    const
{
    if (type() != other.type()) return type() < other.type();
    return boost::apply_visitor( LessThanVisitor(), *this, other);
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
