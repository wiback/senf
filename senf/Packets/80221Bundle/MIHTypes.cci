// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Thorsten Horstmann <tho@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief MIHTypes inline non-template implementation */

//#include "MIHTypes.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// MIHFId
prefix_ senf::MIHFId::MIHFId()
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( boost::blank())
{ }

prefix_ senf::MIHFId::MIHFId(senf::MACAddress const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::INet4Address const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::INet6Address const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(std::string const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::EUI64 const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::Type senf::MIHFId::type()
    const
{
    return boost::apply_visitor( GetTypeVisitor(), *this );
}

prefix_ bool senf::MIHFId::operator==(senf::MIHFId const & other)
    const
{
    return boost::apply_visitor( EqualsVisitor(), *this, other);
}

prefix_ bool senf::MIHFId::operator<(senf::MIHFId const & other)
    const
{
    if (type() != other.type()) return type() < other.type();
    return boost::apply_visitor( LessThanVisitor(), *this, other);
}


///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
