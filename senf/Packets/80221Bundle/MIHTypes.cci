// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Thorsten Horstmann <tho@berlios.de>

/** \file
    \brief MIHTypes inline non-template implementation */

//#include "MIHTypes.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// MIHFId
prefix_ senf::MIHFId::MIHFId()
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( boost::blank())
{ }

prefix_ senf::MIHFId::MIHFId(senf::MACAddress const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::INet4Address const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::INet6Address const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(std::string const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::MIHFId(senf::EUI64 const & addr)
    :  boost::variant< boost::blank, senf::MACAddress, senf::INet4Address,
            senf::INet6Address, std::string, senf::EUI64 > ( addr)
{ }

prefix_ senf::MIHFId::Type senf::MIHFId::type()
    const
{
    return boost::apply_visitor( GetTypeVisitor(), *this );
}

prefix_ bool senf::MIHFId::operator==(senf::MIHFId const & other)
    const
{
    return boost::apply_visitor( EqualsVisitor(), *this, other);
}

prefix_ bool senf::MIHFId::operator<(senf::MIHFId const & other)
    const
{
    if (type() != other.type()) return type() < other.type();
    return boost::apply_visitor( LessThanVisitor(), *this, other);
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
