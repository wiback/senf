//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief GenericTLV internal header */

#ifndef IH_SENF_Packets_GenericTLV_
#define IH_SENF_Packets_GenericTLV_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {

    template <class Base>
    class GenericTLVParserBase;

    template <class ListPolicy>
    class TLVListParser;

namespace detail {

    template <class BaseParser>
    struct GenericTLVParserRegistry_EntryBase {
        virtual ~GenericTLVParserRegistry_EntryBase() {}
        virtual void dump(GenericTLVParserBase<BaseParser> const & parser, std::ostream & os) const = 0;
        virtual PacketParserBase::size_type bytes(GenericTLVParserBase<BaseParser> const & parser) const = 0;
        virtual std::string name() const = 0;
    };

    template <class BaseParser, class Parser>
    struct GenericTLVParserRegistry_Entry
        : GenericTLVParserRegistry_EntryBase<BaseParser>
    {
        virtual void dump(GenericTLVParserBase<BaseParser> const & parser, std::ostream & os) const;
        virtual PacketParserBase::size_type bytes(GenericTLVParserBase<BaseParser> const & parser) const;
        virtual std::string name() const;
    };


    // Helper Functor for STL-compatible predicate (E.g. find_if, for_each ...)
    template <class BaseParser, class Parser>
    struct Predicate
    {
        bool operator() (BaseParser const & p) const {
            return p.template is<Parser>();
        }
    };

    struct GenericTLVParserBaseTag {};

    template <class TLVParser>
    struct ListParserTraits<TLVParser, typename boost::enable_if<boost::is_base_of<GenericTLVParserBaseTag, TLVParser> >::type>
    {
        template <class AuxPolicy, class AuxTag>
        struct parser {
            typedef senf::TLVListParser<
                typename ListParserPolicy<TLVParser, AuxPolicy, AuxTag>::type> type;
        };
    };

}}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
