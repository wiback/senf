//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ListParser internal header */

#ifndef IH_SENF_Packets_ListParser_
#define IH_SENF_Packets_ListParser_ 1

// Custom includes
#include <boost/iterator/iterator_facade.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

    /** \brief Internal: Iterator used by ListParser

        \internal
     */
    template <class Container>
    class ListParser_Iterator
        : public boost::iterator_facade< ListParser_Iterator<Container>,
                                         typename Container::value_type,
                                         boost::forward_traversal_tag,
                                         typename Container::value_type >,
#ifndef DOXYGEN
          private Container::policy::iterator_data
#endif
    {
    public:
        typedef typename Container::value_type value_type;

        ListParser_Iterator();
        explicit ListParser_Iterator(Container const & c);

        PacketParserBase::data_iterator raw() const;
        PacketParserBase::data_iterator i() const;

        static ListParser_Iterator & get(typename Container::policy::iterator_data & d);
        static ListParser_Iterator const & get(typename Container::policy::iterator_data const & d);

    private:
        friend class boost::iterator_core_access;
        friend class ListParser_Container<typename Container::policy>;

        value_type dereference() const;
        bool equal(ListParser_Iterator const & other) const;
        void increment();

        PacketParserBase::data_iterator i_;
        Container const * c_;
    };

#ifndef DOXYGEN

    template <class ElementParser, class AuxPolicy, class AuxTag>
    struct ListParserPolicy
    {};

    template <class ElementParser, typename Enable=void>
    struct ListParserTraits
    {
        template <class AuxPolicy, class AuxTag>
        struct parser {
            typedef senf::ListParser<
                typename ListParserPolicy<ElementParser, AuxPolicy, AuxTag>::type> type;
        };
    };

#   define SENF_PARSER_LIST_I(access, name, size, elt_type)                                       \
        SENF_PARSER_REQUIRE_VAR(list)                                                             \
            SENF_PARSER_COLLECTION_I( access,                                                     \
                                      name,                                                       \
                                      size,                                                       \
                                      senf::detail::ListParserTraits<elt_type> )

#endif

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
