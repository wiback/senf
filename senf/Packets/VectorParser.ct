//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief VectorParser non-inline template implementation */

#include "VectorParser.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::VectorParser<ElementParser,AuxPolicy>

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser<ElementParser,AuxPolicy>::init()
    const
{
    AuxPolicy::aux(0, i(), state());
    iterator i (begin());
    iterator const e (end());
    for (; i!=e; ++i)
        i->init();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::VectorParser_Container<ElementParser,AuxPolicy>

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::init()
    const
{
    iterator i (begin());
    iterator const e (end());
    for (; i!=e; ++i)
        i->init();
}

// Mutators

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::iterator
senf::VectorParser_Container<ElementParser,AuxPolicy>::shift(iterator pos, size_type n)
{
    size_type ix (std::distance(data().begin(),pos.raw()));
    setSize(size()+n);
    data().insert(pos.raw(),n*ElementParser::fixed_bytes,0);
    return iterator(boost::next(data().begin(),ix),state());
}

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::insert(iterator pos,
                                                                       size_type n,
                                                                       Value const & t)
{
    for (iterator j (shift(pos,n)); n; --n, ++j)
        *j << t;
}

#ifndef DOXYGEN
template <class ElementParser, class AuxPolicy>
template <class ForwardIterator>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::
insert(iterator pos, ForwardIterator f, ForwardIterator l,
       typename boost::disable_if< boost::is_convertible<ForwardIterator,size_type> >::type *)
{
    for (iterator j (shift(pos,std::distance(f,l))); f!=l; ++f,++j)
        *j << *f;
}
#else
template <class ElementParser, class AuxPolicy>
template <class ForwardIterator>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::
insert(iterator pos, ForwardIterator f, ForwardIterator l)
{}
#endif

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::resize(size_type n)
{
    if (size()>=n)
        erase(boost::next(begin(),n),end());
    else
        push_back_space(n-size());
}

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::resize(size_type n,
                                                                           Value value)
{
    if (size()>=n)
        erase(boost::next(begin(),n),end());
    else
        push_back(value,n-size());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
