// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief StringParser inline template implementation */

//#include "StringParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class LengthParser>
prefix_ senf::StringParser<LengthParser>::StringParser(data_iterator i, state_type s)
    : PacketParserBase(i, s, init_bytes)
 {}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser>::size_type senf::StringParser<LengthParser>::bytes()
    const
{
    return length().value() + senf::bytes(length());
}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser>::value_type senf::StringParser<LengthParser>::value()
    const
{
    validate(bytes());
    return std::string(i()+senf::bytes(length()), i()+bytes());
}

template <class LengthParser>
prefix_ void senf::StringParser<LengthParser>::value(value_type v)
{
    validate(bytes());
    resize(bytes(), v.size()+senf::bytes(length()));
    length() << v.size();
    std::copy(v.begin(), v.end(), i()+senf::bytes(length()));
}

template <class LengthParser>
prefix_ senf::StringParser<LengthParser>::operator value_type()
    const
{
    return value();
}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser> const & senf::StringParser<LengthParser>::operator=(value_type other)
{
    value(other); return *this;
}

template <class LengthParser>
prefix_ std::ostream & senf::operator<<(std::ostream & os, StringParser<LengthParser> const & value)
{
    os << value.value();
    return os;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
