//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief StringParser inline template implementation */

//#include "StringParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::StringParser<LengthParser>

template <class LengthParser>
prefix_ senf::StringParser<LengthParser>::StringParser(data_iterator i, state_type s)
    : PacketParserBase(i, s, init_bytes)
 {}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser>::size_type senf::StringParser<LengthParser>::bytes()
    const
{
    return length_().value() + senf::bytes(length_());
}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser>::value_type senf::StringParser<LengthParser>::value()
    const
{
    validate(bytes());
    return std::string(i()+senf::bytes(length_()), i()+bytes());
}

template <class LengthParser>
prefix_ void senf::StringParser<LengthParser>::value(value_type v)
{
    validate(bytes());
    typename LengthParser::value_type sz (std::min<size_type>(v.size(), LengthParser::max_value+0));
    resize(bytes(), sz+senf::bytes(length_()));
    length_() << sz;
    std::copy(v.begin(), boost::next(v.begin(),sz), i()+senf::bytes(length_()));
}

template <class LengthParser>
prefix_ senf::StringParser<LengthParser>::operator value_type()
    const
{
    return value();
}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser> const & senf::StringParser<LengthParser>::operator=(value_type other)
{
    value(other);
    return *this;
}

template <class LengthParser>
prefix_ bool senf::StringParser<LengthParser>::empty()
    const
{
    return length() == 0;
}

template <class LengthParser>
prefix_ void senf::StringParser<LengthParser>::clear()
{
    validate(bytes());
    resize(bytes(), senf::bytes(length_()));
    length_() << 0;
}

template <class LengthParser>
prefix_ bool senf::StringParser<LengthParser>::operator==(value_type const & other)
    const
{
    if (other.size() > length())
        return false;
    return std::equal(other.begin(), other.end(), i()+senf::bytes(length_()));
}

template <class LengthParser>
prefix_ std::ostream & senf::operator<<(std::ostream & os, StringParser<LengthParser> const & value)
{
    os << value.value();
    return os;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::FixedSizeStringParser<N>

template <std::string::size_type N>
prefix_ typename senf::FixedSizeStringParser<N>::value_type senf::FixedSizeStringParser<N>::value()
    const
{
    return std::string(i(), i()+fixed_bytes);
}

template <std::string::size_type N>
prefix_ void senf::FixedSizeStringParser<N>::value(value_type v)
{
    std::copy(v.begin(), v.end(), i());
    std::fill(i()+v.size(), i()+fixed_bytes, '\0');
}

template <std::string::size_type N>
prefix_ senf::FixedSizeStringParser<N>::operator value_type()
    const
{
    return value();
}

template <std::string::size_type N>
prefix_ typename senf::FixedSizeStringParser<N> const & senf::FixedSizeStringParser<N>::operator=(value_type other)
{
    value(other);
    return *this;
}

template <std::string::size_type N>
prefix_ bool senf::FixedSizeStringParser<N>::operator==(value_type const & other)
    const
{
    if (other.size() > N)
        return false;
    return std::equal(other.begin(), other.end(), i());
}

template <std::string::size_type N>
prefix_ std::ostream & senf::operator<<(std::ostream & os, FixedSizeStringParser<N> const & value)
{
    os << value.value();
    return os;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
