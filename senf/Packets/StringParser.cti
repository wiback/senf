// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief StringParser inline template implementation */

//#include "StringParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::StringParser<LengthParser>

template <class LengthParser>
prefix_ senf::StringParser<LengthParser>::StringParser(data_iterator i, state_type s)
    : PacketParserBase(i, s, init_bytes)
 {}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser>::size_type senf::StringParser<LengthParser>::bytes()
    const
{
    return length().value() + senf::bytes(length());
}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser>::value_type senf::StringParser<LengthParser>::value()
    const
{
    validate(bytes());
    return std::string(i()+senf::bytes(length()), i()+bytes());
}

template <class LengthParser>
prefix_ void senf::StringParser<LengthParser>::value(value_type v)
{
    validate(bytes());
    resize(bytes(), v.size()+senf::bytes(length()));
    length() << v.size();
    std::copy(v.begin(), v.end(), i()+senf::bytes(length()));
}

template <class LengthParser>
prefix_ senf::StringParser<LengthParser>::operator value_type()
    const
{
    return value();
}

template <class LengthParser>
prefix_ typename senf::StringParser<LengthParser> const & senf::StringParser<LengthParser>::operator=(value_type other)
{
    value(other); return *this;
}

template <class LengthParser>
prefix_ bool senf::StringParser<LengthParser>::operator==(value_type const & other)
    const
{
    if (other.size() > length())
        return false;
    return std::equal(other.begin(), other.end(), i()+senf::bytes(length()));
}

template <class LengthParser>
prefix_ std::ostream & senf::operator<<(std::ostream & os, StringParser<LengthParser> const & value)
{
    os << value.value();
    return os;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::FixedSizeStringParser<N>

template <std::string::size_type N>
prefix_ typename senf::FixedSizeStringParser<N>::value_type senf::FixedSizeStringParser<N>::value()
    const
{
    return std::string(i(), i()+fixed_bytes);
}

template <std::string::size_type N>
prefix_ void senf::FixedSizeStringParser<N>::value(value_type v)
{
    std::copy(v.begin(), v.end(), i());
    std::fill(i()+v.size(), i()+fixed_bytes, '\0');
}

template <std::string::size_type N>
prefix_ senf::FixedSizeStringParser<N>::operator value_type()
    const
{
    return value();
}

template <std::string::size_type N>
prefix_ typename senf::FixedSizeStringParser<N> const & senf::FixedSizeStringParser<N>::operator=(value_type other)
{
    value(other);
    return *this;
}

template <std::string::size_type N>
prefix_ bool senf::FixedSizeStringParser<N>::operator==(value_type const & other)
    const
{
    if (other.size() > N)
        return false;
    return std::equal(other.begin(), other.end(), i());
}

template <std::string::size_type N>
prefix_ std::ostream & senf::operator<<(std::ostream & os, FixedSizeStringParser<N> const & value)
{
    os << value.value();
    return os;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
