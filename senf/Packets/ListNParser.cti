// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ListNParser inline template implementation */

#include "ListNParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class ElementParser, class AuxPolicy>
prefix_ senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::ListNParser_Policy()
{}

template <class ElementParser, class AuxPolicy>
prefix_ senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::
ListNParser_Policy(parser_policy const & policy)
  : AuxPolicy(policy)
{}

template <class ElementParser, class AuxPolicy>
template <class Arg>
prefix_
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::ListNParser_Policy(Arg const & aux)
    : AuxPolicy (aux)
{}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::size_type
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::bytes(data_iterator i, state_type s)
    const
{
    container_type c (parser_type(*this, i, s));
    return std::distance(i,c.end().raw());
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::size_type
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::size(data_iterator i, state_type s)
    const
{
    return AuxPolicy::aux(i,s);
}

template <class ElementParser, class AuxPolicy>
prefix_ void senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::init(data_iterator i,
                                                                             state_type s)
    const
{
    AuxPolicy::aux(0,i,s);
}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::construct(container_type & c)
    const
{}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::destruct(container_type & c)
    const
{}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::erase(container_type & c,
                                                                 data_iterator p)
    const
{
    this->aux(this->aux(c.i(),c.state())-1,c.i(),c.state());
}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::insert(container_type & c,
                                                                  data_iterator p)
    const
{
    this->aux(this->aux(c.i(),c.state())+1,c.i(),c.state());
}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::update(container_type const & c)
    const
{}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::data_iterator
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::setBegin(container_type const & c,
                                                                    iterator_data & d)
    const
{
    d.n_ = this->aux(c.i(),c.state());
    return d.n_ ? this->adjust(c.i(),c.state()) : c.data().end();
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::data_iterator
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::setEnd(container_type const & c,
                                                                  iterator_data & d)
    const
{
    d.n_ = 0;
    return c.data().end();
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::data_iterator
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::next(container_type const & c,
                                                                iterator_data & d)
    const
{
    --d.n_;
    return d.n_ ? boost::next( container_type::iterator::get(d).i(),
                               senf::bytes(* container_type::iterator::get(d)) )
        : c.data().end();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
