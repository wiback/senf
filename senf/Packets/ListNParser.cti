//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ListNParser inline template implementation */

#include "ListNParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class ElementParser, class AuxPolicy>
prefix_ senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::ListNParser_Policy()
{}

template <class ElementParser, class AuxPolicy>
prefix_ senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::
ListNParser_Policy(parser_policy const & policy)
  : AuxPolicy(policy)
{}

template <class ElementParser, class AuxPolicy>
template <class Arg>
prefix_
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::ListNParser_Policy(Arg const & aux)
    : AuxPolicy (aux)
{}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::size_type
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::bytes(data_iterator i, state_type s)
    const
{
    container_type c (parser_type(*this, i, s));
    return std::distance(i,c.end().raw());
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::size_type
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::size(data_iterator i, state_type s)
    const
{
    return AuxPolicy::aux(i,s);
}

template <class ElementParser, class AuxPolicy>
prefix_ void senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::init(data_iterator i,
                                                                             state_type s)
    const
{
    AuxPolicy::aux(0,i,s);
}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::construct(container_type & c)
    const
{}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::destruct(container_type & c)
    const
{}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::erase(container_type & c,
                                                                 data_iterator p)
    const
{
    this->aux(this->aux(c.i(),c.state())-1,c.i(),c.state());
}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::insert(container_type & c,
                                                                  data_iterator p)
    const
{
    this->aux(this->aux(c.i(),c.state())+1,c.i(),c.state());
}

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::update(container_type const & c)
    const
{}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::data_iterator
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::setBegin(container_type const & c,
                                                                    iterator_data & d)
    const
{
    d.n_ = this->aux(c.i(),c.state());
    return d.n_ ? this->adjust(c.i(),c.state()) : c.data().end();
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::data_iterator
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::setEnd(container_type const & c,
                                                                  iterator_data & d)
    const
{
    d.n_ = 0;
    return c.data().end();
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::data_iterator
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::next(container_type const & c,
                                                                iterator_data & d)
    const
{
    --d.n_;
    return d.n_ ? boost::next( container_type::iterator::get(d).i(),
                               senf::bytes(* container_type::iterator::get(d)) )
        : c.data().end();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
