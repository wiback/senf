// $Id$
//
// Copyright (C) 2010
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief RadiotapPacket inline non-template implementation */

//#include "RadiotapPacket.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::RadiotapPacketParser

prefix_ senf::RadiotapPacketParser::RadiotapPacketParser(data_iterator i, state_type s)
    : RadiotapPacket_HeaderParser(i,s)
{
    OffsetTable & table (offsetTable(presentFlags()));
    if (! table[MAX_INDEX+1])
        parseOffsetTable(&(*data().begin()), data().size(), table);
    currentTable_ = &table;
}

prefix_ senf::RadiotapPacketParser::size_type senf::RadiotapPacketParser::bytes()
    const
{
    return length();
}

prefix_ senf::UInt32Parser senf::RadiotapPacketParser::fcs()
{
    validate(RadiotapPacket_HeaderParser::fixed_bytes+4);
    return parse<senf::UInt32Parser>(data().end()-4);
}

prefix_ bool senf::RadiotapPacketParser::has_fcs()
{
    return flagsPresent() && flags().fcsAtEnd();
}

prefix_ unsigned senf::RadiotapPacketParser::frameType()
{
    return parse<RadiotapPacket_FrameTypeParser>(length()).frameType();
}
//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

prefix_ void senf::RadiotapPacketParser::initField(unsigned index)
{
    updatePresentFlags( presentFlags() | (1<<index) );
}

prefix_ void senf::RadiotapPacketParser::disableField(unsigned index)
{
    updatePresentFlags( presentFlags() & ~(1<<index) );
}

prefix_ senf::RadiotapPacketParser::size_type senf::RadiotapPacketParser::calculateSize()
    const
{
    return currentTable()[MAX_INDEX+1];
}

prefix_ senf::RadiotapPacketParser::OffsetTable const &
senf::RadiotapPacketParser::currentTable()
    const
{
    return *currentTable_;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
