//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief AuxParser inline template implementation */

//#include "AuxParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::PrefixAuxParserPolicy<P>

template <class P>
prefix_ typename P::value_type
senf::detail::PrefixAuxParserPolicy<P>::aux(PacketParserBase::data_iterator i,
                                            PacketParserBase::state_type s)
    const
{
    return P(i, s).value();
}

template <class P>
prefix_ void senf::detail::PrefixAuxParserPolicy<P>::aux(typename P::value_type const & v,
                                                         PacketParserBase::data_iterator i,
                                                         PacketParserBase::state_type s)
    const
{
    P(i, s).value(v);
}

template <class P>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::PrefixAuxParserPolicy<P>::adjust(PacketParserBase::data_iterator i,
                                               PacketParserBase::state_type s)
    const
{
    return i+P::fixed_bytes;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::FixedAuxParserPolicy<P>

template <class P, unsigned Dist>
prefix_ typename P::value_type
senf::detail::FixedAuxParserPolicy<P,Dist>::aux(PacketParserBase::data_iterator i,
                                                PacketParserBase::state_type s)
    const
{
    return P(i-Dist, s).value();
}

template <class P, unsigned Dist>
prefix_ void senf::detail::FixedAuxParserPolicy<P,Dist>::aux(typename P::value_type const & v,
                                                             PacketParserBase::data_iterator i,
                                                             PacketParserBase::state_type s)
    const
{
    P(i-Dist, s).value(v);
}

template <class P, unsigned Dist>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::FixedAuxParserPolicy<P,Dist>::adjust(PacketParserBase::data_iterator i,
                                                   PacketParserBase::state_type s)
    const
{
    return i;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::DynamicAuxParserPolicy<P>

template <class P>
prefix_ senf::detail::DynamicAuxParserPolicy<P>::DynamicAuxParserPolicy(P p)
    : p_ (p)
{}

template <class P>
prefix_
senf::detail::DynamicAuxParserPolicy<P>::DynamicAuxParserPolicy(WrapperPolicy const & other)
    : p_ (* other.p_)
{}

template <class P>
prefix_ typename P::value_type
senf::detail::DynamicAuxParserPolicy<P>::aux(PacketParserBase::data_iterator i,
                                             PacketParserBase::state_type s)
    const
{
    return p_.value();
}

template <class P>
prefix_ void senf::detail::DynamicAuxParserPolicy<P>::aux(typename P::value_type const & v,
                                                          PacketParserBase::data_iterator i,
                                                          PacketParserBase::state_type s)
    const
{
    p_.value(v);
}

template <class P>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::DynamicAuxParserPolicy<P>::adjust(PacketParserBase::data_iterator i,
                                                PacketParserBase::state_type s)
    const
{
    return i;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::DynamicWrapperAuxParserPolicy<P>

template <class P>
prefix_ senf::detail::DynamicWrapperAuxParserPolicy<P>::
DynamicWrapperAuxParserPolicy(ParserPolicy const & other)
    : p_ (other.p_)
{}

template <class P>
prefix_ typename P::value_type
senf::detail::DynamicWrapperAuxParserPolicy<P>::aux(PacketParserBase::data_iterator i,
                                                    PacketParserBase::state_type s)
    const
{
    return p_->value();
}

template <class P>
prefix_ void
senf::detail::DynamicWrapperAuxParserPolicy<P>::aux(typename P::value_type const & v,
                                                    PacketParserBase::data_iterator i,
                                                    PacketParserBase::state_type s)
    const
{
    p_->value(v);
}

template <class P>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::DynamicWrapperAuxParserPolicy<P>::adjust(PacketParserBase::data_iterator i,
                                                       PacketParserBase::state_type s)
    const
{
    return i;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::TransformAuxParserPolicy<Policy,Transform>

template <class Policy, class Transform>
prefix_ senf::detail::TransformAuxParserPolicy<Policy,Transform>::TransformAuxParserPolicy()
{}

template <class Policy, class Transform>
template <class Arg>
prefix_ senf::detail::TransformAuxParserPolicy<Policy,Transform>::
TransformAuxParserPolicy(Arg const & arg)
    : Policy(arg)
{}

template <class Policy, class Transform>
prefix_ typename Transform::value_type
senf::detail::TransformAuxParserPolicy<Policy,Transform>::aux(PacketParserBase::data_iterator i,
                                                              PacketParserBase::state_type s)
    const
{
    return Transform::get(Policy::aux(i,s));
}

template <class Policy, class Transform>
prefix_ void senf::detail::TransformAuxParserPolicy<Policy,Transform>::
aux(typename Transform::value_type const & v, PacketParserBase::data_iterator i,
    PacketParserBase::state_type s)
    const
{
    Policy::aux(Transform::set(v), i, s);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
