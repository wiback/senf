//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketParser inline template implementation */

#include "PacketParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN
template <class Parser>
prefix_ typename boost::enable_if_c<
        boost::is_base_of<senf::PacketParserBase, Parser>::value && senf::is_fixed<Parser>::value, Parser >::type
        senf::operator<<(Parser const & target, Parser const & source)
{
    std::copy( source.i(), source.i(Parser::fixed_bytes), target.i());
    return target;
}
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketParserBase

template <class Parser>
prefix_ Parser senf::PacketParserBase::parse(data_iterator i)
    const
{
    return Parser(i,state());
}

template <class Parser, class Arg>
prefix_ Parser senf::PacketParserBase::parse(Arg const & arg, data_iterator i)
    const
{
    return Parser(arg, i, state());
}

template <class Parser>
prefix_ Parser senf::PacketParserBase::parse(size_type n)
    const
{
    return Parser(boost::next(i(),n),state());
}

template <class Parser, class Arg>
prefix_ Parser senf::PacketParserBase::parse(Arg const & arg, size_type n)
    const
{
    return Parser(arg, boost::next(i(),n), state());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// namespace members

template <class Parser>
prefix_ senf::PacketParserBase::size_type senf::bytes(Parser const & p)
{
    return detail::packetParserSize(p, 0);
}

#ifndef DOXYGEN
template <class Parser, class Value>
prefix_ typename boost::enable_if_c <
        boost::is_base_of<senf::PacketParserBase, Parser>::value
            && ! boost::is_base_of<senf::PacketParserBase, Value>::value,
        Parser >::type senf::operator<<(Parser target, Value const & value)
{
    target.value(value);
    return target;
}
#else
template <class Parser, class Value>
prefix_ Parser senf::operator<<(Parser target, Value const & value)
{}
#endif

#ifndef DOXYGEN
template <class Parser, class Value>
prefix_ typename boost::enable_if_c <
        boost::is_base_of<senf::PacketParserBase, Parser>::value
            && ! boost::is_base_of<senf::PacketParserBase, Value>::value,
        Parser >::type senf::operator<<(Parser target, boost::optional<Value> const & value)
{
    if (value)
        target.value(*value);
    return target;
}
#else
template <class Parser, class Value>
prefix_ Parser senf::operator<<(Parser target, Value const & value)
{}
#endif

template <class Parser>
prefix_ senf::PacketParserBase::size_type
senf::detail::packetParserSize(Parser const & p, int, senf::mpl::take_uint<Parser::init_bytes> *)
{
    return p.bytes();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ArrayValueParserBase<Parser, ValueType, FixedBytes>

template <class Parser, typename ValueType>
prefix_ senf::ArrayValueParserBase<Parser, ValueType>::ArrayValueParserBase(data_iterator i, state_type s)
    : PacketParserBase(i, s, fixed_bytes)
{ }

template <class Parser, typename ValueType>
prefix_ senf::ArrayValueParserBase<Parser, ValueType>::operator value_type ()
    const
{
    return static_cast<Parser const *>(this)->value();
}

template <class Parser, typename ValueType>
prefix_ senf::PacketParserBase::byte &
senf::ArrayValueParserBase<Parser, ValueType>::operator[](size_type index)
{
    return *boost::next(i(), index);
}

template <class Parser, typename ValueType>
prefix_ senf::PacketParserBase::byte const &
senf::ArrayValueParserBase<Parser, ValueType>::operator[](size_type index)
    const
{
    return *boost::next(i(), index);
}

template <class Parser, typename ValueType>
prefix_ Parser const & senf::ArrayValueParserBase<Parser, ValueType>::operator= (value_type const & other)
{
    static_cast<Parser*>(this)->value(other);
    return *static_cast<Parser const *>(this);
}

template <class Parser, typename ValueType>
prefix_ bool senf::operator==(ArrayValueParserBase<Parser, ValueType> const & parser, ValueType const & value)
{
    return std::equal(value.begin(), value.end(), parser.i());
}

template <class Parser, typename ValueType>
prefix_ bool senf::operator!=(ArrayValueParserBase<Parser, ValueType> const & parser, ValueType const & value)
{
    return not std::equal(value.begin(), value.end(), parser.i());
}

template <class Parser, typename ValueType>
prefix_ bool senf::operator==(ValueType const & value, ArrayValueParserBase<Parser, ValueType> const & parser)
{
    return std::equal(value.begin(), value.end(), parser.i());
}

template <class Parser, typename ValueType>
prefix_ bool senf::operator!=(ValueType const & value, ArrayValueParserBase<Parser, ValueType> const & parser)
{
    return not std::equal(value.begin(), value.end(), parser.i());
}

template <class Parser, typename ValueType>
prefix_ bool senf::ArrayValueParserBase<Parser, ValueType>::operator==(Parser const & other)
    const
{
    return std::equal(i(), i(fixed_bytes), other.i());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
