// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketParser inline template implementation */

#include "PacketParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketParserBase

template <class Parser>
prefix_ Parser senf::PacketParserBase::parse(data_iterator i)
    const
{
    return Parser(i,state());
}

template <class Parser, class Arg>
prefix_ Parser senf::PacketParserBase::parse(Arg const & arg, data_iterator i)
    const
{
    return Parser(arg, i, state());
}

template <class Parser>
prefix_ Parser senf::PacketParserBase::parse(size_type n)
    const
{
    return Parser(boost::next(i(),n),state());
}

template <class Parser, class Arg>
prefix_ Parser senf::PacketParserBase::parse(Arg const & arg, size_type n)
    const
{
    return Parser(arg, boost::next(i(),n), state());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// namespace members

template <class Parser>
prefix_ senf::PacketParserBase::size_type senf::bytes(Parser p)
{
    return detail::packetParserSize(p,0);
}

#ifndef DOXYGEN
template <class Parser, class Value>
prefix_ typename boost::enable_if_c <
        boost::is_base_of<senf::PacketParserBase, Parser>::value
            && ! boost::is_base_of<senf::PacketParserBase, Value>::value,
        Parser >::type senf::operator<<(Parser target, Value const & value)
{
    target.value(value);
    return target;
}
#else
template <class Parser, class Value>
prefix_ Parser senf::operator<<(Parser target, Value const & value)
{}
#endif

#ifndef DOXYGEN
template <class Parser, class Value>
prefix_ typename boost::enable_if_c <
        boost::is_base_of<senf::PacketParserBase, Parser>::value
            && ! boost::is_base_of<senf::PacketParserBase, Value>::value,
        Parser >::type senf::operator<<(Parser target, boost::optional<Value> const & value)
{
    if (value)
        target.value(*value);
    return target;
}
#else
template <class Parser, class Value>
prefix_ Parser senf::operator<<(Parser target, Value const & value)
{}
#endif


template <class Parser>
prefix_ senf::PacketParserBase::size_type
senf::detail::packetParserSize(Parser p, int, senf::mpl::take_uint<Parser::init_bytes> *)
{
    return p.bytes();
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ValueParserBase<Parser, ValueType, FixedBytes>

template <class Parser, typename ValueType, senf::PacketParserBase::size_type FixedBytes>
prefix_ senf::ValueParserBase<Parser, ValueType, FixedBytes>::ValueParserBase(data_iterator i, state_type s)
    : PacketParserBase(i, s, FixedBytes)
{ }

template <class Parser, typename ValueType, senf::PacketParserBase::size_type FixedBytes>
prefix_ senf::ValueParserBase<Parser, ValueType, FixedBytes>::operator value_type ()
    const
{
    return static_cast<Parser const *>(this)->value();
}

template <class Parser, typename ValueType, senf::PacketParserBase::size_type FixedBytes>
prefix_ senf::PacketParserBase::byte &
senf::ValueParserBase<Parser, ValueType, FixedBytes>::operator[](size_type index)
{
    return *boost::next(i(), index);
}

template <class Parser, typename ValueType, senf::PacketParserBase::size_type FixedBytes>
prefix_ Parser const & senf::ValueParserBase<Parser, ValueType, FixedBytes>::operator= (value_type const & other)
{
    static_cast<Parser*>(this)->value(other);
    return *static_cast<Parser const *>(this);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
