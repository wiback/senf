// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ArrayParser internal header */

#ifndef IH_SENF_Packets_ArrayParser_
#define IH_SENF_Packets_ArrayParser_ 1

// Custom includes
#include <boost/iterator/iterator_facade.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Internal: Array and Vector iterator

    \internal

    This is the iterator type used for both ArrayParser and VectorParser. It is a model of random
    access iterator.
 */
template <class ElementParser>
class senf::detail::ArrayParser_iterator
    : public boost::iterator_facade< ArrayParser_iterator<ElementParser>,
                                     ElementParser,
                                     boost::random_access_traversal_tag,
                                     ElementParser >
{
public:
    ArrayParser_iterator();
    ArrayParser_iterator(PacketParserBase::data_iterator const & i,
                         PacketParserBase::state_type s);

    // Needed to elide the []-proxy of iterator_facade
    ElementParser operator[](int i) const;

    PacketParserBase::data_iterator raw() const; ///< Return data_iterator
                                        /**< Returns the raw data_iterator pointing to the beginning
                                             of the current element */

protected:

private:
    friend class boost::iterator_core_access;

    // iterator_facade interface

    ElementParser dereference() const;
    bool equal(ArrayParser_iterator const & other) const;
    int distance_to(ArrayParser_iterator const & other) const;
    void increment();
    void decrement();
    void advance(int n);

    PacketParserBase::data_iterator i_;
    PacketParserBase::state_type s_;
};

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
