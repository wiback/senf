//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ArrayParser internal header */

#ifndef IH_SENF_Packets_ArrayParser_
#define IH_SENF_Packets_ArrayParser_ 1

// Custom includes
#include <boost/iterator/iterator_facade.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Internal: Array and Vector iterator

    \internal

    This is the iterator type used for both ArrayParser and VectorParser. It is a model of random
    access iterator.
 */
template <class ElementParser>
class senf::detail::ArrayParser_iterator
    : public boost::iterator_facade< ArrayParser_iterator<ElementParser>,
                                     ElementParser,
                                     boost::random_access_traversal_tag,
                                     ElementParser >
{
public:
    ArrayParser_iterator();
    ArrayParser_iterator(PacketParserBase::data_iterator const & i,
                         PacketParserBase::state_type s);

    // Needed to elide the []-proxy of iterator_facade
    ElementParser operator[](int i) const;

    PacketParserBase::data_iterator raw() const; ///< Return data_iterator
                                        /**< Returns the raw data_iterator pointing to the beginning
                                             of the current element */

protected:

private:
    friend class boost::iterator_core_access;

    // iterator_facade interface

    ElementParser dereference() const;
    bool equal(ArrayParser_iterator const & other) const;
    int distance_to(ArrayParser_iterator const & other) const;
    void increment();
    void decrement();
    void advance(int n);

    PacketParserBase::data_iterator i_;
    PacketParserBase::state_type s_;
};

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
