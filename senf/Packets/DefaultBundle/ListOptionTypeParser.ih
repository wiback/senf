// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Philipp Batroff <pug@berlios.de>

/** \file
    \brief ListOptionTypeParser internal header */

#ifndef IH_SENF_Packets_ListOptionTypeParser_
#define IH_SENF_Packets_ListOptionTypeParser_ 1

// Custom includes
#include <senf/Packets/ListParser.ih>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
    namespace detail {

        /** \brief Internal: ListPolicy defing the ListOptionTypeParser parser
         \internal
         \see IPv6HopByHopOptionsPacketParser::ListOptionTypeParser
         */
        template <class ElementParser, class AuxPolicy>
        struct ListOptionTypeParser_Policy
        : public AuxPolicy
        {
            struct container_policy;

            typedef PacketParserBase::data_iterator data_iterator;
            typedef PacketParserBase::state_type state_type;
            typedef PacketParserBase::size_type size_type;

            typedef ElementParser element_type;
            typedef ListParser< ListOptionTypeParser_Policy > parser_type;
            typedef ListParser_Container< container_policy > container_type;

            static const size_type init_bytes = 6u + AuxPolicy::aux_bytes;

            ListOptionTypeParser_Policy();
            template <class Arg> ListOptionTypeParser_Policy(Arg const & arg);

            size_type bytes (data_iterator i, state_type s) const;
            size_type size (data_iterator i, state_type s) const;
            void init (data_iterator i, state_type s) const;

            /** \brief Internal: ListOptionTypeParser container/wrapper policy */
            struct container_policy
            : public AuxPolicy
            {
                typedef PacketParserBase::data_iterator data_iterator;
                typedef PacketParserBase::state_type state_type;
                typedef PacketParserBase::size_type size_type;

                typedef ListOptionTypeParser_Policy<ElementParser, AuxPolicy> parser_policy;
                typedef typename parser_policy::element_type element_type;
                typedef typename parser_policy::parser_type parser_type;
                typedef typename parser_policy::container_type container_type;

                static const size_type init_bytes = parser_policy::init_bytes;

                container_policy(parser_policy const & p);
                ~container_policy();
                size_type bytes (data_iterator i, state_type s) const;
                size_type size (data_iterator i, state_type s) const;
                void init (data_iterator i, state_type s);

                void erase (container_type & c, data_iterator p);
                void insert (container_type & c, data_iterator p);
                void update (container_type const & c) const;

                void destruct(container_type & c);
                void construct(container_type & c);

                /** \brief Internal: ListOptionTypeParser specific iterator data */
                struct iterator_data {};

                data_iterator setBegin (container_type const & c, iterator_data & d) const;
                data_iterator setEnd (container_type const & c, iterator_data & d) const;
                void setFromPosition (container_type const & c, iterator_data & d,data_iterator p) const;

                data_iterator next (container_type const & c, iterator_data & d) const;
                data_iterator raw (container_type const & c, iterator_data const & d) const;

                size_type n_;
                mutable size_type realAux_;
                mutable size_type container_size_;
            };
        };
}
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
