//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EthernetPacket inline non-template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::MACAddressParser

prefix_ bool senf::MACAddressParser::local()
    const
{
    return (*this)[0] & 0x02;
}

prefix_ bool senf::MACAddressParser::multicast()
    const
{
    return (*this)[0] & 0x01;
}

prefix_ bool senf::MACAddressParser::broadcast()
    const
{
    return (*reinterpret_cast<std::uint32_t const *>(&(*this)[0]) ^ *reinterpret_cast<std::uint16_t const *>(&(*this)[4])) == 0xffff0000;
}

prefix_ bool senf::MACAddressParser::null()
    const
{
    return (*reinterpret_cast<std::uint32_t const *>(&(*this)[0]) | *reinterpret_cast<std::uint16_t const *>(&(*this)[4])) == 0;
}

prefix_ void senf::MACAddressParser::hash(boost::uint64_t * hash, boost::uint16_t const & otherKey)
    const
{
    std::copy(&(*this)[0], &(*this)[6], (std::uint8_t*)hash);
    *(((std::uint16_t*)hash) + 3) = otherKey;
}


//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
