// $Id$
//
// Copyright (C) 2012
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Thorsten Horstmann <tho@berlios.de>

/** \file
    \brief EthernetPacket inline non-template implementation */

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::MACAddressParser

prefix_ senf::MACAddressParser::value_type senf::MACAddressParser::value()
    const
{
    return MACAddress::from_data(i());
}

prefix_ void senf::MACAddressParser::value(value_type const & v)
{
    std::copy(v.begin(), v.end(), i());
}

prefix_ bool senf::MACAddressParser::local()
    const
{
    return (*this)[0] & 0x02;
}

prefix_ bool senf::MACAddressParser::multicast()
    const
{
    return (*this)[0] & 0x01;
}

prefix_ bool senf::MACAddressParser::broadcast()
    const
{
    using  boost::lambda::_1;
    return std::find_if(i(), i(6), _1 != 0xffu) == i(6);
}

prefix_ bool senf::MACAddressParser::null()
    const
{
    using  boost::lambda::_1;
    return std::find_if(i(), i(6), _1 != 0x00u) == i(6);
}

prefix_ boost::uint64_t senf::MACAddressParser::uint64()
    const
{
    return
        (boost::uint64_t( (*this)[0] ) << 40) |
        (boost::uint64_t( (*this)[1] ) << 32) |
        (boost::uint64_t( (*this)[2] ) << 24) |
        (boost::uint64_t( (*this)[3] ) << 16) |
        (boost::uint64_t( (*this)[4] ) <<  8) |
        (boost::uint64_t( (*this)[5] )      );
}

prefix_ bool senf::MACAddressParser::operator==(MACAddress const & macAddr)
    const
{
    return std::equal(macAddr.begin(), macAddr.end(), i());
}

prefix_ bool senf::MACAddressParser::operator==(MACAddressParser const & other)
    const
{
    return std::equal(i(), i(6), other.i());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
