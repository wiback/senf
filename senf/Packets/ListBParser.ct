//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ListBParser non-inline template implementation  */

#include "ListBParser.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::ListBParser_Policy<ElementParser,AuxPolicy>::container_policy

template <class ElementParser, class AuxPolicy>
prefix_
senf::detail::ListBParser_Policy<ElementParser,AuxPolicy>::container_policy::
container_policy(parser_policy const & p)
    : AuxPolicy::WrapperPolicy (p)
{
    parser_type selfp (parser_type::get(p));
    size_type totalsz (selfp.bytes());
    data_iterator const e (selfp.i(totalsz));
    data_iterator i (AuxPolicy::WrapperPolicy::adjust(selfp.i(), selfp.state()));
    n_ = 0;
    while (i!=e) {
        ElementParser p (i,selfp.state());
        size_type sz (senf::bytes(p));
        SENF_ASSERT(sz, "Broken element parser: reports size of 0 bytes");
        i = p.i(sz);
        ++ n_;
    }
    container_size_ = selfp.data().size();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
