//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketInfo inline non-template implementation */

//#include "PacketInfo.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::PacketInfo::PacketInfo()
    : impl_()
{}

prefix_ senf::PacketInfo::PacketInfo(Packet const & packet)
    : impl_(& packet.data().impl())
{}

prefix_ bool senf::PacketInfo::boolean_test()
    const
{
    return static_cast<bool>(impl_);
}

template <class Annotation>
prefix_ Annotation & senf::PacketInfo::annotation()
{
    return impl_->annotation<Annotation>();
}

prefix_ void senf::PacketInfo::clearAnnotations()
{
    impl_->clearAnnotations();
}

prefix_ void senf::PacketInfo::dumpAnnotations(std::ostream & os)
{
    impl_->dumpAnnotations(os);
}

prefix_ bool senf::PacketInfo::is_shared()
    const
{
    return impl_->refcount() > 1;
}

prefix_ bool senf::PacketInfo::usingExternalMemory()
    const
{
    return impl_->usingExternalMemory();
}

prefix_ void senf::PacketInfo::releaseExternalMemory()
    const
{
    impl_->releaseExternalMemory();
}

prefix_ void senf::PacketInfo::memDebug(std::ostream & os)
    const
{
    impl_->memDebug(os);
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
