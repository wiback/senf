// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketInfo inline non-template implementation */

//#include "PacketInfo.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::PacketInfo::PacketInfo()
    : impl_()
{}

prefix_ senf::PacketInfo::PacketInfo(Packet const & packet)
    : impl_(& packet.data().impl())
{}

prefix_ bool senf::PacketInfo::boolean_test()
    const
{
    return static_cast<bool>(impl_);
}

template <class Annotation>
prefix_ Annotation & senf::PacketInfo::annotation()
{
    return impl_->annotation<Annotation>();
}

prefix_ void senf::PacketInfo::clearAnnotations()
{
    impl_->clearAnnotations();
}

prefix_ void senf::PacketInfo::dumpAnnotations(std::ostream & os)
{
    impl_->dumpAnnotations(os);
}

prefix_ bool senf::PacketInfo::is_shared()
    const
{
    return impl_->refcount() > 1;
}

prefix_ bool senf::PacketInfo::usingExternalMemory()
    const
{
    return impl_->usingExternalMemory();
}

prefix_ void senf::PacketInfo::releaseExternalMemory()
    const
{
    impl_->releaseExternalMemory();
}

prefix_ void senf::PacketInfo::memDebug(std::ostream & os)
    const
{
    impl_->memDebug(os);
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
