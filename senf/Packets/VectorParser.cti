// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief VectorParser inline template implementation */

#include "VectorParser.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::VectorParser<ElementParser,Sizer>

template <class ElementParser, class AuxPolicy>
prefix_ senf::VectorParser<ElementParser,AuxPolicy>::VectorParser(data_iterator i, state_type s)
    : PacketParserBase(i,s), AuxPolicy()
{}

template <class ElementParser, class AuxPolicy>
prefix_ senf::VectorParser<ElementParser,AuxPolicy>::VectorParser(AuxPolicy policy,
                                                                  data_iterator i, state_type s)
    : PacketParserBase(i,s), AuxPolicy(policy)
{}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::size_type
senf::VectorParser<ElementParser,AuxPolicy>::bytes()
    const
{
    return size()*ElementParser::fixed_bytes + AuxPolicy::aux_bytes;
}

// Container interface

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::size_type
senf::VectorParser<ElementParser,AuxPolicy>::size()
    const
{
    return aux(i(),state());
}

template <class ElementParser, class AuxPolicy>
prefix_ bool senf::VectorParser<ElementParser,AuxPolicy>::empty()
    const
{
    return size()==0;
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::iterator
senf::VectorParser<ElementParser,AuxPolicy>::begin()
    const
{
    return iterator(adjust(i(),state()),state());
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::iterator
senf::VectorParser<ElementParser,AuxPolicy>::end()
    const
{
    return boost::next(begin(),size());
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::value_type
senf::VectorParser<ElementParser,AuxPolicy>::operator[](difference_type i)
    const
{
    return begin()[i];
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::value_type
senf::VectorParser<ElementParser,AuxPolicy>::front()
    const
{
    return begin()[0];
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::value_type
senf::VectorParser<ElementParser,AuxPolicy>::back()
    const
{
    return begin()[size()-1];
}

// Mutators

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser<ElementParser,AuxPolicy>::push_back(Value const & value, size_type n)
    const
{
    container c (*this);
    c.push_back(value,n);
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::value_type
senf::VectorParser<ElementParser,AuxPolicy>::push_back_space(size_type n)
    const
{
    container c (*this);
    return c.push_back_space(n);
}

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser<ElementParser,AuxPolicy>::push_front(Value const & value, size_type n)
    const
{
    container c (*this);
    c.push_front(value,n);
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser<ElementParser,AuxPolicy>::value_type
senf::VectorParser<ElementParser,AuxPolicy>::push_front_space(size_type n)
    const
{
    container c (*this);
    return c.push_front_space(n);
}

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser<ElementParser,AuxPolicy>::resize(size_type n)
    const
{
    container c (*this);
    c.resize(n);
}

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser<ElementParser,AuxPolicy>::resize(size_type n, Value value)
    const
{
    container c (*this);
    c.resize(n,value);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::VectorParser_wrapper<Parser,SizeParser,Container>

// structors and default members

// hm ... be careful here ! the data() member is called in an incompletely intitialized
// instance. However, data() only depends on state_ which is initialized before the call. YOU MUST
// NOT CHANGE THE ORDERING OF THE DATA MEMBERS
template <class ElementParser, class AuxPolicy>
prefix_ senf::VectorParser_Container<ElementParser,AuxPolicy>::
VectorParser_Container(parser_type const & vector)
    : AuxPolicy::WrapperPolicy(static_cast<AuxPolicy const &>(vector)), state_ (vector.state()),
      i_ (std::distance(data().begin(),vector.i()))
{}

// accessors

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::size_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::size()
    const
{
    return aux(i(),state());
}

template <class ElementParser, class AuxPolicy>
prefix_ bool senf::VectorParser_Container<ElementParser,AuxPolicy>::empty()
    const
{
    return size() == 0;
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::iterator
senf::VectorParser_Container<ElementParser,AuxPolicy>::begin()
    const
{
    return iterator(adjust(i(),state()),state());
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::iterator
senf::VectorParser_Container<ElementParser,AuxPolicy>::end()
    const
{
    return boost::next(begin(),size());
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::value_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::operator[](difference_type i)
    const
{
    return begin()[i];
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::value_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::front()
    const
{
    return begin()[0];
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::value_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::back()
    const
{
    return begin()[size()-1];
}

// Mutators

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::insert(iterator pos,
                                                                       Value const & t)
{
    *shift(pos) << t;
}

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::erase(iterator pos, size_type n)
{
    setSize(size()-n);
    data().erase(pos.raw(),boost::next(pos.raw(),n*ElementParser::fixed_bytes));
}

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::erase(iterator f, iterator l)
{
    erase(f,std::distance(f,l));
}

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::clear()
{
    erase(begin(),end());
}

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::push_back(Value const & value,
                                                                              size_type n)
{
    insert(end(),n,value);
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::value_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::push_back_space(size_type n)
{
    return *shift(end(),n);
}

template <class ElementParser, class AuxPolicy>
template <class Value>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::push_front(Value const & value,
                                                                               size_type n)
{
    insert(begin(),n,value);
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::value_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::push_front_space(size_type n)
{
    return *shift(begin(),n);
}

// Parser interface

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::parser_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::parser()
    const
{
    return parser_type(i(),state());
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::data_iterator
senf::VectorParser_Container<ElementParser,AuxPolicy>::i()
    const
{
    return boost::next(data().begin(),i_);
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::state_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::state()
    const
{
    return state_;
}

template <class ElementParser, class AuxPolicy>
prefix_ senf::PacketData &
senf::VectorParser_Container<ElementParser,AuxPolicy>::data()
    const
{
    return *state_;
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::VectorParser_Container<ElementParser,AuxPolicy>::size_type
senf::VectorParser_Container<ElementParser,AuxPolicy>::bytes()
    const
{
    return size()*ElementParser::fixed_bytes + AuxPolicy::aux_bytes;
}

// private members

template <class ElementParser, class AuxPolicy>
prefix_ void senf::VectorParser_Container<ElementParser,AuxPolicy>::setSize(size_type value)
{
    aux(value, i(),state());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
