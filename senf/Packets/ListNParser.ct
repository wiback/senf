//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ListNParser non-inline template implementation  */

#include "ListNParser.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class ElementParser, class AuxPolicy>
prefix_ void
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::setFromPosition(container_type const & c,
                                                                           iterator_data & d,
                                                                           data_iterator p)
    const
{
    if (p == c.data().end()) {
        d.n_ = 0;
        return;
    }
    d.n_ = this->aux(c.i(),c.state());
    data_iterator j (this->adjust(c.i(),c.state()));
    for (; d.n_; --d.n_, j += ElementParser(j,c.state()).bytes())
        if (j==p)
            return;
    SENF_ASSERT( false, "setFromPosition: position does not point to any list element" );
}

template <class ElementParser, class AuxPolicy>
prefix_ typename senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::data_iterator
senf::detail::ListNParser_Policy<ElementParser,AuxPolicy>::raw(container_type const & c,
                                                               iterator_data const & d)
    const
{
    if (container_type::iterator::get(d).i() != c.data().end())
        return container_type::iterator::get(d).i();
    size_type n (this->aux(c.i(),c.state()));
    data_iterator j (this->adjust(c.i(),c.state()));
    for (; n; --n)
        j += ElementParser(j,c.state()).bytes();
    return j;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
