//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief VariantParser non-inline template implementation  */

#include "VariantParser.ih"

// Custom includes
#include <algorithm>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class AuxPolicy, class Parsers>
template <unsigned N>
prefix_ void senf::VariantParser<AuxPolicy,Parsers>::init()
{
    size_type oldSize( bytes() );
    typedef typename boost::mpl::at<parsers, boost::mpl::int_<N> >::type NewParser;

    if (oldSize <= senf::init_bytes<NewParser>::value) {
        data_iterator j (i());
        std::advance(j, oldSize);
        std::fill(i(), j, 0u);
        safe_data_iterator safe_i (*this);
        typename AuxPolicy::WrapperPolicy safeAux (static_cast<AuxPolicy&>(*this));
        data().insert(j, senf::init_bytes<NewParser>::value - oldSize, 0u);
        safeAux.aux(N, safe_i, state());
        NewParser( safeAux.adjust(safe_i, state()), state() ).init();
    } else {
        data_iterator j (i());
        std::advance(j, senf::init_bytes<NewParser>::value);
        data().erase(j, boost::next(i(), oldSize));
        std::fill(i(), j, 0u);
        AuxPolicy::aux(N, i(), state());
        NewParser(AuxPolicy::adjust(i(), state()), state()).init();
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
