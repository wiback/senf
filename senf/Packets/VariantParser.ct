// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief VariantParser non-inline template implementation  */

#include "VariantParser.ih"

// Custom includes
#include <algorithm>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class AuxPolicy, class Parsers>
template <unsigned N>
prefix_ void senf::VariantParser<AuxPolicy,Parsers>::init()
{
    size_type oldSize( bytes() );
    typedef typename boost::mpl::at<parsers, boost::mpl::int_<N> >::type NewParser;

    if (oldSize <= senf::init_bytes<NewParser>::value) {
        data_iterator j (i());
        std::advance(j, oldSize);
        std::fill(i(), j, 0u);
        safe_data_iterator safe_i (*this);
        typename AuxPolicy::WrapperPolicy safeAux (static_cast<AuxPolicy&>(*this));
        data().insert(j, senf::init_bytes<NewParser>::value - oldSize, 0u);
        safeAux.aux(N, safe_i, state());
        NewParser( safeAux.adjust(safe_i, state()), state() ).init();
    } else {
        data_iterator j (i());
        std::advance(j, senf::init_bytes<NewParser>::value);
        data().erase(j, boost::next(i(), oldSize));
        std::fill(i(), j, 0u);
        AuxPolicy::aux(N, i(), state());
        NewParser(AuxPolicy::adjust(i(), state()), state()).init();
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
