//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief Packet non-inline template implementation  */

//#include "Packet.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::Packet

template <class OtherPacket>
prefix_ OtherPacket senf::Packet::find(NoThrow_t)
    const
{
    Packet p (*this);
    while (p && ! p.is<OtherPacket>())
        p = p.next(nothrow);
    if (p)
        return p.as<OtherPacket>();
    else
        return OtherPacket();
}

template <class OtherPacket>
prefix_ OtherPacket senf::Packet::rfind(NoThrow_t)
    const
{
    Packet p (*this);
    while (p && ! p.is<OtherPacket>())
        p = p.prev(nothrow);
    if (p)
        return p.as<OtherPacket>();
    else
        return OtherPacket();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ConcretePacket<PacketType>

template <class PacketType>
template <class OtherPacket>
prefix_ OtherPacket senf::ConcretePacket<PacketType>::next(NoThrow_t)
    const
{
    PacketInterpreterBase::ptr p (Packet::ptr()->next());
    if (p)
        return (p->typeId() == typeIdValue<OtherPacket>()) ?
                OtherPacket(p->as<typename OtherPacket::type>()) : OtherPacket();
    PacketInterpreterBase::optional_range r (type::nextPacketRange(*this));
    if (r && ! r->empty()) {
        PacketInterpreterBase::ptr nxt (getNext(r));
        if (nxt && nxt->typeId() == typeIdValue<OtherPacket>())
            return OtherPacket(nxt->as<typename OtherPacket::type>());
    }
    return OtherPacket();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
