// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketImpl inline template implementation */

#include "PacketImpl.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::AnnotationRegistry

template <class Annotation>
prefix_ senf::detail::AnnotationRegistry::key_type
senf::detail::AnnotationRegistry::registerAnnotation()
{
#ifndef SENF_PACKET_NO_COMPLEX_ANNOTATIONS
    key_type key (simpleAnnotationCount_ >= SENF_PACKET_ANNOTATION_SLOTS
               || IsComplexAnnotation<Annotation>::value
               ? - ++complexAnnotationCount_
               : simpleAnnotationCount_ ++);
#else
    key_type key (simpleAnnotationCount_ ++);
    SENF_ASSERT(simpleAnnotationCount_ <= SENF_PACKET_ANNOTATION_SLOTS,
                "to many annotations defined and complex annotations disabled");
    SENF_STATIC_ASSERT(! IsComplexAnnotation<Annotation>::value,
                       annotation_is_complex_but_complex_annotations_disabled);
#endif
    std::pair<Registry::iterator, bool> reg (
        registry_.insert(key, new Registration<Annotation>()));
    SENF_ASSERT(reg.second, "internal error: duplicate annotation key");
    index_.insert(std::make_pair(reg.first->second->v_name(), key));
    return key;
}

template <class Annotation>
prefix_ senf::detail::AnnotationRegistry::key_type senf::detail::AnnotationRegistry::lookup()
{
#ifndef SENF_PACKET_NO_COMPLEX_ANNOTATIONS
    SENF_ASSERT(
        -instance().complexAnnotationCount_ <= AnnotationRegistry::Entry<Annotation>::key()
        && AnnotationRegistry::Entry<Annotation>::key() < instance().simpleAnnotationCount_,
        "internal error: annotation key not registered" );
    SENF_ASSERT(
        AnnotationRegistry::Entry<Annotation>::key() < 0
        || ! IsComplexAnnotation<Annotation>::value,
        "internal error: complex annotation registered with invalid key" );
#else
    SENF_ASSERT(
        AnnotationRegistry::Entry<Annotation>::key() >= 0,
        "internal error: annotation key out of valid range" );
#endif
    SENF_ASSERT(
        AnnotationRegistry::Entry<Annotation>::key() < SENF_PACKET_ANNOTATION_SLOTS,
        "internal error: annotation key out of valid range" );
    return AnnotationRegistry::Entry<Annotation>::key();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::PacketImpl

// Data container

template <class ForwardIterator>
prefix_ void senf::detail::PacketImpl::insert(PacketData * self, iterator pos, ForwardIterator f,
                                              ForwardIterator l)
{
    difference_type ix (std::distance(begin(),pos));
    data_.insert(pos,f,l);
    updateIterators(self,ix,std::distance(f,l));
}

template <class InputIterator>
prefix_ senf::detail::PacketImpl::PacketImpl(InputIterator first, InputIterator last)
    : refcount_(0), data_(first,last)
#ifndef SENF_PACKET_ALTERNATIVE_PREALLOC
    , preallocHigh_(0), preallocFree_(0)
#else
    , preallocFree_(prealloc_)
#endif
#ifndef SENF_PACKET_NO_HEAP_INTERPRETERS
    , preallocHeapcount_(0)
#endif
{
    ::memset(simpleAnnotations_, 0, sizeof(simpleAnnotations_));
#ifdef SENF_PACKET_ALTERNATIVE_PREALLOC
    ::memset(prealloc_, 0, sizeof(prealloc_));
#endif
}

// Annotations

template <class Annotation>
prefix_ Annotation & senf::detail::PacketImpl::annotation()
{
    AnnotationRegistry::key_type key (AnnotationRegistry::lookup<Annotation>());
#ifndef SENF_PACKET_NO_COMPLEX_ANNOTATIONS
    void * antn (key >= 0 ? & simpleAnnotations_[key] : complexAnnotation<Annotation>());
#else
    void * antn (& simpleAnnotations_[key]);
#endif
    SENF_ASSERT( antn, "internal error: null annotation pointer" );
    return * static_cast<Annotation*>(antn);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
