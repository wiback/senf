// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief PacketImpl inline template implementation */

#include "PacketImpl.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::detail::AnnotationRegistry

template <class Annotation>
prefix_ senf::detail::AnnotationRegistry::key_type
senf::detail::AnnotationRegistry::registerAnnotation()
{
    key_type key (simpleAnnotationCount_ >= SENF_PACKET_ANNOTATION_SLOTS
               || IsComplexAnnotation<Annotation>::value
               ? - ++complexAnnotationCount_
               : simpleAnnotationCount_ ++);
    std::pair<Registry::iterator, bool> reg (
        registry_.insert(key, new Registration<Annotation>()));
    SENF_ASSERT(reg.second, "internal error: duplicate annotation key");
    index_.insert(std::make_pair(reg.first->second->v_name(), key));
    return key;
}

template <class Annotation>
prefix_ senf::detail::AnnotationRegistry::key_type senf::detail::AnnotationRegistry::lookup()
{
    SENF_ASSERT(
        -instance().complexAnnotationCount_ <= AnnotationRegistry::Entry<Annotation>::key()
        && AnnotationRegistry::Entry<Annotation>::key() < instance().simpleAnnotationCount_,
        "internal error: annotation key not registered" );
    SENF_ASSERT(
        AnnotationRegistry::Entry<Annotation>::key() < 0
        || ! IsComplexAnnotation<Annotation>::value,
        "internal error: complex annotation registered with invalid key" );
    SENF_ASSERT(
        AnnotationRegistry::Entry<Annotation>::key() < SENF_PACKET_ANNOTATION_SLOTS,
        "internal error: annotation key out of valid range" );
    return AnnotationRegistry::Entry<Annotation>::key();
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::PacketImpl

// Data container

template <class ForwardIterator>
prefix_ void senf::detail::PacketImpl::insert(PacketData * self, iterator pos, ForwardIterator f,
                                              ForwardIterator l)
{
    difference_type ix (std::distance(begin(),pos));
    data_.insert(pos,f,l);
    updateIterators(self,ix,std::distance(f,l));
}

template <class InputIterator>
prefix_ senf::detail::PacketImpl::PacketImpl(InputIterator first, InputIterator last)
    : refcount_(0), data_(first,last)
{
    ::memset(simpleAnnotations_, 0, sizeof(simpleAnnotations_));
}

// Annotations

template <class Annotation>
prefix_ Annotation & senf::detail::PacketImpl::annotation()
{
    AnnotationRegistry::key_type key (AnnotationRegistry::lookup<Annotation>());
    void * antn (key >= 0 ? & simpleAnnotations_[key] : complexAnnotation<Annotation>());
    SENF_ASSERT( antn, "internal error: null annotation pointer" );
    return * static_cast<Annotation*>(antn);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
