//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketVector inline non-template implementation */

//#include "PacketVector.ih"

// Custom includes
#include <string.h>
#include <senf/Utils/senfassert.hh>

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

#ifndef SENF_PACKET_STD_CONTAINER

prefix_ senf::PacketVector::PacketVector()
    : size_ (ChunkSize),
      data_ (static_cast<value_type *>(Pool::ordered_malloc(1))),
      b_ (data_ + HeadRoom),
      e_ (b_),
      owner_ (true)
{}

prefix_ senf::PacketVector::PacketVector(size_type requestSize, value_type initValue)
    : size_ (allocationSize(requestSize)),
      data_ (static_cast<value_type *>(Pool::ordered_malloc(size_ >> ChunkSizeIndex))),
      b_ (data_ + HeadRoom),
      e_ (b_ + requestSize),
      owner_ (true)
{
    ::memset(b_, initValue, requestSize);
}

prefix_ senf::PacketVector::PacketVector(value_type * data, size_type size,
                                         size_type chunkSize, size_type offset)
    : size_ (chunkSize ? chunkSize : size + offset),
      data_ (data),
      b_ (data_ + offset),
      e_ (b_ + size),
      owner_ (false)
{}

prefix_ senf::PacketVector::~PacketVector()
{
    if (owner_)
        Pool::ordered_free(data_, size_ >> ChunkSizeIndex);
}

prefix_ senf::PacketVector::iterator senf::PacketVector::begin()
{
    return b_;
}

prefix_ senf::PacketVector::const_iterator senf::PacketVector::begin()
    const
{
    return b_;
}

prefix_ senf::PacketVector::iterator senf::PacketVector::end()
{
    return e_;
}

prefix_ senf::PacketVector::const_iterator senf::PacketVector::end()
    const
{
    return e_;
}

prefix_ senf::PacketVector::size_type senf::PacketVector::size()
    const
{
    return e_ - b_;
}

prefix_ void senf::PacketVector::clear()
{
    e_ = b_;
}

prefix_ bool senf::PacketVector::external()
    const
{
    return ! owner_;
}

prefix_ void senf::PacketVector::releaseExternal()
{
    if (! owner_)
        grow(begin(), 0);
}

prefix_ void senf::PacketVector::erase(iterator pos)
{
    SENF_ASSERT( pos >= b_ && pos < e_, "invalid iterator passed to PacketVector::erase" );
    ::memmove(pos, pos + 1, e_ - pos - 1);
    -- e_;
}

prefix_ void senf::PacketVector::erase(iterator first, iterator last)
{
    SENF_ASSERT( first >= b_ && last <= e_ && last >= first,
                 "invalid iterator passed to PacketVector::erase" );
    ::memmove(first, last, e_ - last);
    e_ -= last - first;
}

prefix_ void senf::PacketVector::truncateFront(iterator pos)
{
    SENF_ASSERT( pos >= b_ && pos <= e_, "invalid iterator passed to PacketVector::truncateFront" );
    b_ = pos;
}

prefix_ void senf::PacketVector::truncateBack(iterator pos)
{
    SENF_ASSERT( pos >= b_ && pos <= e_, "invalid iterator passed to PacketVector::truncateBack" );
    e_ = pos;
}

prefix_ void senf::PacketVector::insert(iterator pos, value_type v)
{
    SENF_ASSERT( pos >= b_ && pos <= e_, "invalid iterator passed to PacketVector::insert" );
    * move(pos, 1) = v;
}

prefix_ void senf::PacketVector::insert(iterator pos, size_type n, value_type v)
{
    SENF_ASSERT( pos >= b_ && pos <= e_, "invalid iterator passed to PacketVector::insert" );
    if (n > 0)
        ::memset(move(pos, n), v, n);
}

prefix_ senf::PacketVector::size_type senf::PacketVector::allocationSize(size_type sz)
{
    return ((sz + HeadRoom + TailRoom) | (ChunkSize - 1)) + 1;
}

prefix_ senf::PacketVector::iterator senf::PacketVector::move(iterator pos, size_type n)
{
    // we check the prevalent cases here and leave the exotic cases to moveGrow
    if (pos - b_ < e_ - pos && b_ >= data_ + n) {
        ::memmove(b_ - n, b_, pos - b_);
        b_ -= n;
        return pos - n;
    }
    else if (e_ + n <= data_ + size_) {
        ::memmove(pos + n, pos, e_ - pos);
        e_ += n;
        return pos;
    }
    else
        return moveGrow(pos, n);
}

#endif

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
