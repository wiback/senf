// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief PacketInterpreter inline non-template implementation */

// Custom includes
#include <senf/Utils/senfassert.hh>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::PacketInterpreterBase

// Structors and default members

prefix_ senf::PacketInterpreterBase::~PacketInterpreterBase()
{}

prefix_ senf::PacketInterpreterBase::factory_t senf::PacketInterpreterBase::no_factory()
{
    return 0;
}

// Interpreter chain access

prefix_ senf::PacketInterpreterBase::ptr senf::PacketInterpreterBase::next()
{
    return ptr(impl().next(this));
}

prefix_ senf::PacketInterpreterBase::ptr senf::PacketInterpreterBase::prev()
{
    return ptr(impl().prev(this));
}

prefix_ senf::PacketInterpreterBase::ptr senf::PacketInterpreterBase::first()
{
    return ptr(impl().first());
}

prefix_ senf::PacketInterpreterBase::ptr senf::PacketInterpreterBase::last()
{
    return ptr(impl().last());
}

prefix_ senf::PacketInterpreterBase::ptr
senf::PacketInterpreterBase::parseNextAs(factory_t factory, PacketInterpreterBase::optional_range const & range)
{
    return factory->parseNext(ptr(this), range);
}

// Data access

prefix_ senf::PacketData & senf::PacketInterpreterBase::data()
{
    return (*this);
}

// Access to the abstract interface

prefix_ senf::PacketInterpreterBase::optional_range
senf::PacketInterpreterBase::nextPacketRange()
{
    return v_nextPacketRange();
}

prefix_ senf::TypeIdValue senf::PacketInterpreterBase::typeId()
{
    return v_type();
}

prefix_ senf::PacketInterpreterBase::factory_t senf::PacketInterpreterBase::factory()
{
    return v_factory();
}

prefix_ senf::PacketInterpreterBase::factory_t senf::PacketInterpreterBase::nextPacketType()
{
    return v_nextPacketType();
}

prefix_ void senf::PacketInterpreterBase::clearAnnotations()
{
    return impl().clearAnnotations();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

// protected structors

prefix_ senf::PacketInterpreterBase::PacketInterpreterBase(detail::PacketImpl * impl,
                                                           iterator b, iterator e, Append_t)
    : PacketData(std::distance(impl->begin(),b),
                 std::distance(impl->begin(),e))
{
    impl->appendInterpreter(this);
}

prefix_ senf::PacketInterpreterBase::PacketInterpreterBase(detail::PacketImpl * impl,
                                                           iterator b, iterator e, Prepend_t)
    : PacketData(std::distance(impl->begin(),b),
                 std::distance(impl->begin(),e))
{
    impl->prependInterpreter(this);
}

prefix_ senf::PacketInterpreterBase::PacketInterpreterBase(detail::PacketImpl * impl,
                                                           iterator b, iterator e, ptr before)
    : PacketData(std::distance(impl->begin(),b),
                 std::distance(impl->begin(),e))
{
    impl->prependInterpreter(this, before.get());
}

prefix_ senf::PacketInterpreterBase::ptr
senf::PacketInterpreterBase::appendClone(detail::PacketImpl * impl, iterator base,
                                         iterator new_base)
{
    return v_appendClone(impl,base,new_base);
}

prefix_ senf::PacketInterpreterBase::ptr
senf::PacketInterpreterBase::appendClone(detail::PacketImpl * impl, range r)
{
    return v_appendClone(impl,r);
}

prefix_ senf::PacketInterpreterBase * senf::PacketInterpreterBase::nextP()
{
    // This helper ensures, no temporary smart-pointer is alive after nextP() returns
    return next().get();
}

prefix_ senf::PacketInterpreterBase * senf::PacketInterpreterBase::prevP()
{
    // This helper ensures, no temporary smart-pointer is alive after prevP() returns
    return prev().get();
}

prefix_ senf::detail::PacketImpl & senf::PacketInterpreterBase::impl()
    const
{
    SENF_ASSERT( linked(), "Invalid operation on un-linked PacketInterpreter" );
    return PacketData::impl();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// private members

// containment management. Only to be called by PacketImpl.

prefix_ void senf::PacketInterpreterBase::assignImpl(detail::PacketImpl * impl)
{
    SENF_ASSERT(!impl_, "Internal failure: PacketInterpreter added to two Packets");
    impl_ = impl;
    if (refcount())
        impl_->add_ref();
}

prefix_ void senf::PacketInterpreterBase::releaseImpl()
{
    SENF_ASSERT(impl_, "Internal failure: release of lone PacketInterpreter");
    if (! refcount()) {
        detail::PacketImpl * impl (impl_);
        this->~PacketInterpreterBase();
        impl->deallocateInterpreter(this);
    }
}

prefix_ void senf::intrusive_ptr_add_ref(PacketInterpreterBase const * p)
{
    if (! p->refcount())
        const_cast<PacketInterpreterBase *>(p)->add_ref();
    else
        const_cast<PacketInterpreterBase *>(p)->intrusive_refcount_base::add_ref();
}

prefix_ void senf::intrusive_ptr_release(PacketInterpreterBase const * p)
{
    if (p->refcount() <= 1)
        const_cast<PacketInterpreterBase *>(p)->release();
    else
        const_cast<PacketInterpreterBase *>(p)->intrusive_refcount_base::release();
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
