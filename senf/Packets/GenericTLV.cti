// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Thorsten Horstmann <tho@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief GenericTLV inline template implementation */

//#include "GenericTLV.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::GenericTLVParserBase<Base>

template <class Base>
prefix_ senf::PacketParserBase::size_type senf::GenericTLVParserBase<Base>::bytes()
    const
{
    if (Base::Registry::instance().isRegistered( *this))
        return Base::Registry::instance().bytes( *this);
    else
        return senf::bytes(self()) + this->length();
}

template <class Base>
prefix_ void senf::GenericTLVParserBase<Base>::init()
    const
{
    this->defaultInit();
}

template <class Base>
template <class Parser>
prefix_ Parser senf::GenericTLVParserBase<Base>::as()
    const
{
    return Parser(this->i(), this->state() );
}

template <class Base>
template <class Parser>
prefix_ bool senf::GenericTLVParserBase<Base>::is()
    const
{
    return this->type().value() == Parser::typeId;
}

template <class Base>
prefix_ Base & senf::GenericTLVParserBase<Base>::self()
{
    return *static_cast<Base *>(this);
}

template <class Base>
prefix_ Base const & senf::GenericTLVParserBase<Base>::self()
    const
{
    return *static_cast<Base const *>(this);
}

#ifndef DOXYGEN

template <class Base>
template <class ForwardReadableRange>
prefix_ void senf::GenericTLVParserBase<Base>::value(
        ForwardReadableRange const & val,
        typename boost::disable_if<senf::is_pair<ForwardReadableRange> >::type *)
{ 
    value_( val); 
}

template <class Base>
template <class First, class Second>
prefix_ void senf::GenericTLVParserBase<Base>::value(
        std::pair<First, Second> const & val,
        typename boost::disable_if<boost::is_convertible<First, typename Base::type_t::value_type> >::type *)
{ 
    value_( val); 
}

template <class Base>
template <class Type, class ForwardReadableRange>
prefix_ void senf::GenericTLVParserBase<Base>::value(
        std::pair<Type, ForwardReadableRange> const & val,
        typename boost::enable_if<boost::is_convertible<Type, typename Base::type_t::value_type> >::type *)
{ 
    this->type() = val.first;
    value_( val.second); 
}

#endif


///////////////////////////////////////////////////////////////////////////
// senf::detail:GenericTLVParserRegistry_Entry<BaseParser, Parser>

template <class BaseParser, class Parser>
prefix_ void senf::detail::GenericTLVParserRegistry_Entry<BaseParser, Parser>::dump(
        GenericTLVParserBase<BaseParser> const & parser, std::ostream & os)
    const
{
    (parser.template as<Parser>()).dump(os);
}

template <class BaseParser, class Parser>
prefix_ senf::PacketParserBase::size_type
senf::detail::GenericTLVParserRegistry_Entry<BaseParser, Parser>::bytes(
        GenericTLVParserBase<BaseParser> const & parser)
    const
{
    return senf::bytes( parser.template as<Parser>());
}

///////////////////////////////////////////////////////////////////////////
// senf::GenericTLVParserRegistry<BaseParser,Keytype>

template <class BaseParser, class Keytype>
prefix_ bool senf::GenericTLVParserRegistry<BaseParser,Keytype>::isRegistered(
        GenericTLVParser const & parser)
    const
{
    typename Map::const_iterator i (map_.find( parser.type()));
    return i != map_.end();
}

template <class BaseParser, class Keytype>
prefix_ bool senf::GenericTLVParserRegistry<BaseParser,Keytype>::isRegistered(Keytype const & key)
    const
{
    typename Map::const_iterator i (map_.find( key));
    return i != map_.end();
}

///////////////////////////////////////////////////////////////////////////
// senf::GenericTLVParserRegistry<BaseParser,Keytype>::RegistrationProxy<PacketParser>

template <class BaseParser, class Keytype>
template <class PacketParser>
prefix_ senf::GenericTLVParserRegistry<BaseParser,Keytype>::RegistrationProxy<PacketParser>::RegistrationProxy()
{
    GenericTLVParserRegistry<BaseParser,Keytype>::instance().registerParser<PacketParser>();
};

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
