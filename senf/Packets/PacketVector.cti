//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief PacketVector inline template implementation */

//#include "PacketVector.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

#ifndef SENF_PACKET_STD_CONTAINER

template <class ForwardIterator>
prefix_ senf::PacketVector::PacketVector(ForwardIterator f, ForwardIterator l)
    : owner_ (true)
{
    int requestSize (std::distance(f,l));
    size_ = allocationSize(requestSize);
    data_ = static_cast<value_type *>(Pool::ordered_malloc(size_ >> ChunkSizeIndex));
    b_ = data_ + HeadRoom;
    e_ = b_ + requestSize;
    std::copy(f, l, b_);
}

template <class ForwardIterator>
prefix_ void senf::PacketVector::insert(iterator pos, ForwardIterator f, ForwardIterator l)
{
    SENF_ASSERT( pos >= b_ && pos <= e_, "invalid iterator passed to PacketVector::erase" );
    std::copy(f, l, move(pos, std::distance(f,l)));
}

#endif

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
