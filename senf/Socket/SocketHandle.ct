// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief SocketHandle non-inline template implementation
 */

#include "SocketHandle.ih"

// Custom includes
#include <boost/lexical_cast.hpp>
#include <senf/Utils/TypeInfo.hh>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::detail::StreamableString

template <class T>
prefix_ senf::detail::StreamableString &
senf::detail::StreamableString::operator<<(T const & other)
{
    if (!empty())
        (*this) += ", ";
    (*this) += boost::lexical_cast<std::string>(other);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
// senf::ProtocolSocketBody<SProtocol>

template <class SProtocol>
prefix_ senf::SocketProtocol const & senf::ProtocolSocketBody<SProtocol>::v_protocol()
    const
{
    return *this;
}

template <class SProtocol>
prefix_ std::string senf::ProtocolSocketBody<SProtocol>::v_protocolName()
    const
{
    return senf::prettyName(typeid(SProtocol));
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
