// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SocketHandle non-inline template implementation
 */

#include "SocketHandle.ih"

// Custom includes
#include <boost/lexical_cast.hpp>
#include <senf/Utils/TypeInfo.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::StreamableString

template <class T>
prefix_ senf::detail::StreamableString &
senf::detail::StreamableString::operator<<(T const & other)
{
    if (!empty())
        (*this) += ", ";
    (*this) += boost::lexical_cast<std::string>(other);
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ProtocolSocketBody<SProtocol>

template <class SProtocol>
prefix_ senf::SocketProtocol const & senf::ProtocolSocketBody<SProtocol>::v_protocol()
    const
{
    return *this;
}

template <class SProtocol>
prefix_ std::string senf::ProtocolSocketBody<SProtocol>::v_protocolName()
    const
{
    return senf::prettyName(typeid(SProtocol));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
