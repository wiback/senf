//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SocketHandle non-inline template implementation
 */

#include "SocketHandle.ih"

// Custom includes
#include <boost/lexical_cast.hpp>
#include <senf/Utils/TypeInfo.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::StreamableString

template <class T>
prefix_ senf::detail::StreamableString &
senf::detail::StreamableString::operator<<(T const & other)
{
    if (!empty())
        (*this) += ", ";
    (*this) += boost::lexical_cast<std::string>(other);
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ProtocolSocketBody<SProtocol>

template <class SProtocol>
prefix_ senf::SocketProtocol const & senf::ProtocolSocketBody<SProtocol>::v_protocol()
    const
{
    return *this;
}

template <class SProtocol>
prefix_ std::string senf::ProtocolSocketBody<SProtocol>::v_protocolName()
    const
{
    return senf::prettyName(typeid(SProtocol));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
