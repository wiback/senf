// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief QueueReadWritePolicy internal header */

#ifndef IH_SENF_senf_Socket_QueueReadWritePolicy_
#define IH_SENF_senf_Socket_QueueReadWritePolicy_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

    struct QueueInfo
    {
        unsigned char * map;
        unsigned frameSize;

        struct Queue {
            unsigned char * begin;  // first buffer in queue
            unsigned char * end;    // after last buffer in queue
            unsigned char * head;   // next buffer in queue
                                    // (after first buffer in queue still held by user-space)
            unsigned char * tail;   // last buffer in queue still held by user-space
            bool idle;              // set to true when the range from head -> tail is empty. needed
                                    // to differentiate between empty and full head/tail range
        };

        Queue rx;
        Queue tx;

        void inc(unsigned char * & ptr, Queue const & q);
    };

    struct QueuePolicyBase
        : private FileHandleAccess
    {
        static detail::QueueInfo * qinfo(FileHandle & handle);

        enum { TPacketHdrOffset = TPACKET_HDRLEN - sizeof(struct ::sockaddr_ll) };
    };

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
