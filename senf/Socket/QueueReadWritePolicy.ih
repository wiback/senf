//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief QueueReadWritePolicy internal header */

#ifndef IH_SENF_senf_Socket_QueueReadWritePolicy_
#define IH_SENF_senf_Socket_QueueReadWritePolicy_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

// older kernel includes don't define this
#   if !defined(TP_STATUS_VLAN_VALID)
#     define TP_STATUS_VLAN_VALID (1<<4)
#   endif
    
    struct QueueInfo
    {
        static constexpr std::uint16_t NUM_SAMPLES = 9;

        unsigned char * map;
        unsigned hdrlen;
        unsigned frameSize;
        unsigned reserveSize;
        
        struct Queue {
            unsigned qlen;          // number of blocks in queue 
            unsigned char * begin;  // first buffer in queue
            unsigned char * end;    // after last buffer in queue
            unsigned char * head;   // next buffer in queue
                                    // (after first buffer in queue still held by user-space)
            unsigned char * tail;   // last buffer in queue still held by user-space
            bool idle;              // set to true when the range from head -> tail is empty. needed
                                    // to differentiate between empty and full head/tail range

            // we devide the ring buffer in NUM_SAMPLES slices and keep a pointer to tp_status
            // of the first frame of each slide. In usageRx/Tx() we check how many of those samples report 'used by kernel'.
            // This provides a rough estimate of ring buffer usage by the kernel
            std::uint32_t * samples[NUM_SAMPLES];  
        };

        Queue rx;
        Queue tx;

        struct TxStats {
            unsigned sent;
            unsigned wrongFormat;
            unsigned dropped;
            unsigned overrun;
            unsigned red;
            void dump(std::ostream & os) const;
        };
        struct RxStats {
            unsigned received;
            unsigned extMemory;
            unsigned ignored;
            unsigned noop;
            unsigned red;
            void dump(std::ostream & os) const;
        };

        TxStats txStats;
        RxStats rxStats;
        
        void inc(unsigned char * & ptr, Queue const & q);

        void init(unsigned rxqlen, unsigned txqlen);
        unsigned usageRx() const;
        unsigned usageTx() const;

        bool interfaceDead() const;
    };

    struct QueuePolicyBase
        : private FileHandleAccess
    {
        static detail::QueueInfo * qinfo(FileHandle & handle);
    };

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
