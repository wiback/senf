// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ServerSocketHandle inline template implementation
 */

// Definition of inline template functions

//#include "ServerSocketHandle.ih"

// Custom includes
#include <typeinfo>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class SPolicy>
prefix_ senf::ServerSocketHandle<SPolicy>::ServerSocketHandle()
{}

template <class SPolicy>
template <class OtherPolicy>
prefix_ senf::ServerSocketHandle<SPolicy>::
ServerSocketHandle(ServerSocketHandle<OtherPolicy> other,
                   typename SocketHandle<SPolicy>::template IsCompatible<OtherPolicy>::type *)
    : SocketHandle<SPolicy>(other,true)
{}

template <class SPolicy>
prefix_  senf::ServerSocketHandle<SPolicy>::
ServerSocketHandle(SENF_SMART_PTR<SocketBody> body)
    : SocketHandle<SPolicy>(SENF_MOVE(body))
{}

template <class SPolicy>
template <class OtherPolicy>
prefix_ typename senf::SocketHandle<SPolicy>::template IsCompatible<OtherPolicy>::type const &
senf::ServerSocketHandle<SPolicy>::operator=(ServerSocketHandle<OtherPolicy> other)
{
    assign(other);
    return *this;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// Server socket interface

template <class SPolicy>
prefix_ void senf::ServerSocketHandle<SPolicy>::bind(AddressParam addr)
{
    SPolicy::AddressingPolicy::bind(*this,addr);
}

template <class SPolicy>
prefix_ void senf::ServerSocketHandle<SPolicy>::listen(unsigned backlog)
{
    SPolicy::CommunicationPolicy::listen(*this,backlog);
}

template <class SPolicy>
prefix_ typename senf::ServerSocketHandle<SPolicy>::Address
senf::ServerSocketHandle<SPolicy>::local()
{
    typename SPolicy::AddressingPolicy::Address addr;
    this->local(addr);
    return addr;
}

template <class SPolicy>
prefix_ void senf::ServerSocketHandle<SPolicy>::local(Address & addr)
{
    SPolicy::AddressingPolicy::local(*this,addr);
}

template <class SPolicy>
prefix_ typename senf::ServerSocketHandle<SPolicy>::ClientHandle
senf::ServerSocketHandle<SPolicy>::accept()
{
    return ClientHandle(this->body().clone(
                            SPolicy::CommunicationPolicy::accept(*this), false));
}

template <class SPolicy>
prefix_ std::pair<typename senf::ServerSocketHandle<SPolicy>::ClientHandle,
                  typename senf::ServerSocketHandle<SPolicy>::Address>
senf::ServerSocketHandle<SPolicy>::acceptfrom()
{

    Address address;
    ClientHandle handle = acceptfrom(address);
    return std::make_pair(handle,address);
}

template <class SPolicy>
prefix_ typename senf::ServerSocketHandle<SPolicy>::ClientHandle
senf::ServerSocketHandle<SPolicy>::acceptfrom(Address & addr)
{
    return ClientHandle(this->body().clone(
                            SPolicy::CommunicationPolicy::accept(*this,addr), false));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class SPolicy>
prefix_ senf::ServerSocketHandle<SPolicy>::ServerSocketHandle(FileHandle other,
                                                                    bool isChecked)
    : SocketHandle<SPolicy>(other, isChecked)
{}

template <class SPolicy>
prefix_ senf::ServerSocketHandle<SPolicy>
senf::ServerSocketHandle<SPolicy>::cast_static(FileHandle handle)
{
    return ServerSocketHandle(handle,true);
}

template <class SPolicy>
prefix_ senf::ServerSocketHandle<SPolicy>
senf::ServerSocketHandle<SPolicy>::cast_dynamic(FileHandle handle)
{
    SocketHandle<SPolicy> h (SocketHandle<SPolicy>::cast_dynamic(handle));
    if (! static_cast<SocketBody&>(FileHandle::body(handle)).isServer())
        throw std::bad_cast();
    return cast_static(handle);
}

template <class SPolicy>
prefix_ void senf::ServerSocketHandle<SPolicy>::state(SocketStateMap & map, unsigned lod)
{
    map["handle"] = prettyName(typeid(*this));
    if (this->valid()) {
        map["valid"] << "true";
        this->body().state(map,lod);
    } else
        map["valid"] << "false";
}

template <class SPolicy>
prefix_ std::string senf::ServerSocketHandle<SPolicy>::dumpState(unsigned lod)
{
    SocketStateMap map;
    state(map,lod);
    return detail::dumpState(map);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
