// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief UNAddressing inline non-template implementation */

//#include "UNAddressing.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::UNSocketAddress

prefix_ senf::UNSocketAddress::UNSocketAddress()
    : BSDSocketAddress (sizeof(sockaddr_un), AF_UNIX)
{}

prefix_ senf::UNSocketAddress::UNSocketAddress(std::string const & p)
    : BSDSocketAddress (sizeof(sockaddr_un), AF_UNIX)
{
    path(p);
}

prefix_ senf::UNSocketAddress::UNSocketAddress(UNSocketAddress const & other)
    : BSDSocketAddress (other)
{}

prefix_ senf::UNSocketAddress& senf::UNSocketAddress::operator=(UNSocketAddress const & other)
{
    BSDSocketAddress::operator=(other);
    return *this;
}

prefix_ std::string senf::UNSocketAddress::path()
    const
{
    return std::string(addr_.sun_path, socklen()-sizeof(short));
}

prefix_ std::ostream & senf::operator<<(std::ostream & os, UNSocketAddress const & addr)
{
    os << addr.path();
    return os;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
