// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief BSDAddressingPolicyMixin inline template implementation
 */

//#include "BSDAddressingPolicy.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::BSDAddressingPolicyMixin<Address>

#ifndef DOXYGEN
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
peer(SocketHandle<SPolicy> const & handle, Address & addr,
     typename IfCommunicationPolicyIs<SPolicy,ConnectedCommunicationPolicy>::type *)
{
    try {
        do_peer(handle,addr.sockaddr_p(),addr.socklen_p());
    } catch (Exception & e) {
        e << "; could not get peer for address \"" << addr << "\"";
        throw;
    }
}
#else
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
peer(SocketHandle<SPolicy> const & handle, Address & addr)
{}
#endif

#ifndef DOXYGEN
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
connect(SocketHandle<SPolicy> const & handle, Address const & addr,
        typename IfCommunicationPolicyIs<SPolicy,ConnectedCommunicationPolicy>::type *)
{
    try {
        do_connect(handle,addr.sockaddr_p(),addr.socklen());
    } catch (Exception & e) {
        e << "; could not connect to address \"" << addr << "\"";
        throw;
    }
}
#else
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
connect(SocketHandle<SPolicy> const & handle, Address const & addr)
{}
#endif

template <class Address>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::local(FileHandle const & handle,
                                                           Address & addr)
{
    try {
        do_local(handle,addr.sockaddr_p(),addr.socklen_p());
    } catch (Exception & e) {
        // TODO: identify socket by some meaningful attribute
        e << "; could not get name for address \"" << addr << "\"";
        throw;
    }
}

template <class Address>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::bind(FileHandle const & handle,
                                                                 Address const & addr)
{
    try {
        do_bind(handle,addr.sockaddr_p(),addr.socklen());
    } catch (Exception & e) {
        e << "; could not bind to address \"" << addr << "\"";
        throw;
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u ../test"
// comment-column: 40
// End:
