//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief BSDAddressingPolicyMixin inline template implementation
 */

//#include "BSDAddressingPolicy.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::BSDAddressingPolicyMixin<Address>

#ifndef DOXYGEN
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
peer(SocketHandle<SPolicy> const & handle, Address & addr,
     typename IfCommunicationPolicyIs<SPolicy,ConnectedCommunicationPolicy>::type *)
{
    try {
        do_peer(handle,addr.sockaddr_p(),addr.socklen_p());
    } catch (Exception & e) {
        e << "; could not get peer for address \"" << addr << "\"";
        throw;
    }
}
#else
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
peer(SocketHandle<SPolicy> const & handle, Address & addr)
{}
#endif

#ifndef DOXYGEN
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
connect(SocketHandle<SPolicy> const & handle, Address const & addr,
        typename IfCommunicationPolicyIs<SPolicy,ConnectedCommunicationPolicy>::type *)
{
    try {
        do_connect(handle,addr.sockaddr_p(),addr.socklen());
    } catch (Exception & e) {
        e << "; could not connect to address \"" << addr << "\"";
        throw;
    }
}
#else
template <class Address>
template <class SPolicy>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::
connect(SocketHandle<SPolicy> const & handle, Address const & addr)
{}
#endif

template <class Address>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::local(FileHandle const & handle,
                                                           Address & addr)
{
    try {
        do_local(handle,addr.sockaddr_p(),addr.socklen_p());
    } catch (Exception & e) {
        // TODO: identify socket by some meaningful attribute
        e << "; could not get name for address \"" << addr << "\"";
        throw;
    }
}

template <class Address>
prefix_ void senf::BSDAddressingPolicyMixin<Address>::bind(FileHandle const & handle,
                                                                 Address const & addr)
{
    try {
        do_bind(handle,addr.sockaddr_p(),addr.socklen());
    } catch (Exception & e) {
        e << "; could not bind to address \"" << addr << "\"";
        throw;
    }
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u ../test"
// comment-column: 40
// End:
