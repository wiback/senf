//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief EUI64 inline non-template implementation */

//#include "EUI64.ih"

// Custom includes
#include <algorithm>
#include <boost/lambda/lambda.hpp>
#include "MACAddress.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::EUI64::EUI64(boost::uint64_t v)
{
    (*this)[0] = (v>>56) & 0xffu;
    (*this)[1] = (v>>48) & 0xffu;
    (*this)[2] = (v>>40) & 0xffu;
    (*this)[3] = (v>>32) & 0xffu;
    (*this)[4] = (v>>24) & 0xffu;
    (*this)[5] = (v>>16) & 0xffu;
    (*this)[6] = (v>> 8) & 0xffu;
    (*this)[7] = (v    ) & 0xffu;
}

prefix_ senf::EUI64::EUI64(senf::NoInit_t)
{}

prefix_ senf::EUI64 senf::EUI64::from_mac(MACAddress const & mac)
{
    EUI64 eui (senf::noinit);
    eui[0] = mac[0];
    eui[1] = mac[1];
    eui[2] = mac[2];
    eui[3] = 0xffu;
    eui[4] = 0xfeu;
    eui[5] = mac[3];
    eui[6] = mac[4];
    eui[7] = mac[5];
    return eui;
}

prefix_ bool senf::EUI64::isMACCompatible()
    const
{
    return (*this)[3] == 0xffu && (*this)[4] == 0xfeu;
}

prefix_ bool senf::EUI64::local()
    const
{
    return (*this)[0]&0x02;
}

prefix_ bool senf::EUI64::group()
    const
{
    return (*this)[0]&0x01;
}

prefix_ senf::EUI64::operator bool()
    const
{
    using boost::lambda::_1;
    return std::find_if(begin(),end(), _1 != 0x00u) != end();
}

prefix_ boost::uint64_t senf::EUI64::uint64()
    const
{
    return (boost::uint64_t((*this)[0])<<56)
        |  (boost::uint64_t((*this)[1])<<48)
        |  (boost::uint64_t((*this)[2])<<40)
        |  (boost::uint64_t((*this)[3])<<32)
        |  (boost::uint64_t((*this)[4])<<24)
        |  (boost::uint64_t((*this)[5])<<16)
        |  (boost::uint64_t((*this)[6])<< 8)
        |  (boost::uint64_t((*this)[7])    );
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
