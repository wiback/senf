// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief MMapPacketSocketHandle internal header */

#ifndef IH_SENF_senf_Socket_Protocols_Raw_MMapPacketSocketHandle_
#define IH_SENF_senf_Socket_Protocols_Raw_MMapPacketSocketHandle_ 1

// Custom includes
#include <senf/Socket/SocketPolicy.hh>
#include <senf/Socket/ReadWritePolicy.hh>
#include <senf/Socket/QueueReadWritePolicy.hh>

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {

    template <class Policy,
              bool IsMMapReadable=ReadPolicyIs<Policy, QueueReadPolicy>::value,
              bool IsMMapWriteable=WritePolicyIs<Policy, QueueWritePolicy>::value>
    struct ConnectedMMapPacketSocketProtocol_Bases
        : public DatagramSocketProtocol,
          public BSDSocketProtocol,
          public MMapSocketProtocol,
          public MMapReadableSocketProtocol,
          public LinuxPacketSocketProtocol
    {
        void init_client(std::string iface,
                         unsigned qlen,
                         unsigned frameSize=(1u << SENF_PACKET_VECTOR_SIZE_INDEX),
                         typename LinuxPacketSocketProtocol::SocketType type = LinuxPacketSocketProtocol::RawSocket,
                         int protocol = -1,
                         unsigned reserve=SENF_PACKET_VECTOR_HEADROOM) const;
                                        ///< Create packet socket
                                        /**< The new socket will receive all packets of the given
                                             IEEE 802.3 \a protocol. The socket will receive all
                                             packets, if \a protocol is -1.

                                             If \a type is \c RawSocket, the packet will include the
                                             link-level header (the Ethernet header). Sent packets
                                             must already include a well formed ll header.

                                             If \a type is \c DatagramSocket, the link level header
                                             will not be part of the packet data. The ll header will
                                             be removed from received packets and a correct ll
                                             header will be created on sent packets.

                                             \param[in] iface interface to bind to
                                             \param[in] qlen number of frames in rx queue
                                             \param[in] txqlen number of frames in tx queue
                                             \param[in] frameSize size of single frame in queue
                                             \param[in] type socket type
                                             \param[in] protocol IEEE 802.3 protocol number */
                                        /**< \note This member is implicitly called from the
                                             ProtocolClientSocketHandle::ProtocolClientSocketHandle()
                                             constructor */
    };

    template <class Policy>
    struct ConnectedMMapPacketSocketProtocol_Bases<Policy, true, false>
        : public DatagramSocketProtocol,
          public BSDSocketProtocol,
          public MMapSocketProtocol,
          public MMapReadableSocketProtocol,
          public LinuxPacketSocketProtocol
    {
        void init_client(std::string iface,
                         unsigned qlen,
                         unsigned frameSize=(1u << SENF_PACKET_VECTOR_SIZE_INDEX),
                         typename LinuxPacketSocketProtocol::SocketType type = LinuxPacketSocketProtocol::RawSocket,
                         int protocol = -1,
                         unsigned reserve=SENF_PACKET_VECTOR_HEADROOM) const;
    };

    template <class Policy>
    struct ConnectedMMapPacketSocketProtocol_Bases<Policy, false, true>
        : public DatagramSocketProtocol,
          public BSDSocketProtocol,
          public MMapSocketProtocol,
          public LinuxPacketSocketProtocol,
          public ReadableLinuxPacketProtocol
    {
        void init_client(std::string iface,
                         unsigned qlen,
                         unsigned frameSize=(1u << SENF_PACKET_VECTOR_SIZE_INDEX),
                         typename LinuxPacketSocketProtocol::SocketType type = LinuxPacketSocketProtocol::RawSocket,
                         int protocol = -1,
                         unsigned reserve=SENF_PACKET_VECTOR_HEADROOM) const;
    };

    template <class Policy>
    struct ConnectedMMapPacketSocketProtocol_Bases<Policy, false, false>
        : public DatagramSocketProtocol,
          public BSDSocketProtocol,
          public LinuxPacketSocketProtocol,
          public ReadableLinuxPacketProtocol
    {
        void init_client(std::string iface,
                         unsigned frameSize=(1u << SENF_PACKET_VECTOR_SIZE_INDEX),
                         typename LinuxPacketSocketProtocol::SocketType type = LinuxPacketSocketProtocol::RawSocket,
                         int protocol = -1,
                         unsigned reserve=SENF_PACKET_VECTOR_HEADROOM) const;
    };

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
