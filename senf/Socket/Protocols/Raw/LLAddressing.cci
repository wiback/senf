//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief LLSocketAddress and LLAddressingPolicy  inline non-template implementation
 */

// Custom includes
#include <sys/socket.h>
#include <netinet/in.h>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::LLSocketAddress::LLSocketAddress()
    : BSDSocketAddress (sizeof(sockaddr_ll), AF_PACKET)
{}

prefix_ senf::LLSocketAddress::LLSocketAddress(unsigned prot, std::string const & iface)
    : BSDSocketAddress (sizeof(sockaddr_ll), AF_PACKET)
{
    protocol(prot);
    interface(iface);
}

prefix_ senf::LLSocketAddress::LLSocketAddress(std::string const &iface)
    : BSDSocketAddress (sizeof(sockaddr_ll), AF_PACKET)
{
    interface(iface);
}

prefix_ senf::LLSocketAddress::LLSocketAddress(MACAddress const & addr,
                                               std::string const & iface)
    : BSDSocketAddress (sizeof(sockaddr_ll), AF_PACKET)
{
    address(addr);
    interface(iface);
}

prefix_ senf::LLSocketAddress::LLSocketAddress(const LLSocketAddress& other)
    : BSDSocketAddress (other)
{}

prefix_ senf::LLSocketAddress& senf::LLSocketAddress::operator=(const LLSocketAddress& other)
{
    BSDSocketAddress::operator=(other);
    return *this;
}

prefix_ unsigned senf::LLSocketAddress::protocol()
    const
{
    return ntohs(addr_.sll_protocol);
}

prefix_ void senf::LLSocketAddress::protocol(unsigned prot)
{
    addr_.sll_protocol = htons(prot);
}

prefix_ unsigned senf::LLSocketAddress::arptype()
    const
{
    return ntohs(addr_.sll_hatype);
}

prefix_ senf::LLSocketAddress::PktType senf::LLSocketAddress::pkttype()
    const
{
    return PktType(ntohs(addr_.sll_pkttype));
}

prefix_ senf::MACAddress senf::LLSocketAddress::address()
    const
{
    return MACAddress::from_data(&addr_.sll_addr[0]);
}

prefix_ void senf::LLSocketAddress::address(MACAddress const & addr)
{
    std::copy(addr.begin(), addr.end(), &addr_.sll_addr[0]);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
