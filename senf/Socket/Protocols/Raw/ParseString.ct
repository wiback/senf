// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ParseString non-inline template implementation  */

//#include "ParseString.ih"

// Custom includes
#include <boost/tokenizer.hpp>
#include <boost/range.hpp>
#include <boost/numeric/conversion/cast.hpp>
#include <senf/Utils/String.hh>
#include <senf/Socket/Protocols/AddressExceptions.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class ForwardIterator>
prefix_ void senf::detail::parseHexString(std::string const & value,
                                          char const * separator, ForwardIterator f,
                                          ForwardIterator l)
{
    typedef boost::char_separator<char> Separator;
    typedef boost::tokenizer<Separator> Tokenizer;
    Separator sep (separator);
    Tokenizer tok (value, sep);
    Tokenizer::iterator i (tok.begin());
    Tokenizer::iterator const i_end (tok.end());
    try {
        for (; i!=i_end && f!=l; ++i, ++f)
            *f = boost::numeric_cast<typename std::iterator_traits<ForwardIterator>::value_type>(
                senf::lexical_cast<unsigned long>()[std::hex](
                    std::string(boost::begin(*i),boost::end(*i))));
    }
    catch (std::bad_cast &) {
        throw AddressSyntaxException(value);
    }
    if (i!=i_end || f!=l)
        throw AddressSyntaxException(value);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
