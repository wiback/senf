// $Id$
//
// Copyright (C) 2009
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParseString non-inline template implementation  */

//#include "ParseString.ih"

// Custom includes
#include <boost/tokenizer.hpp>
#include <boost/range.hpp>
#include <boost/numeric/conversion/cast.hpp>
#include <senf/Utils/String.hh>
#include <senf/Socket/Protocols/AddressExceptions.hh>

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class ForwardIterator>
prefix_ void senf::detail::parseHexString(std::string const & value,
                                          char const * separator, ForwardIterator f,
                                          ForwardIterator l)
{
    typedef boost::char_separator<char> Separator;
    typedef boost::tokenizer<Separator> Tokenizer;
    Separator sep (separator);
    Tokenizer tok (value, sep);
    Tokenizer::iterator i (tok.begin());
    Tokenizer::iterator const i_end (tok.end());
    try {
        for (; i!=i_end && f!=l; ++i, ++f)
            *f = boost::numeric_cast<typename std::iterator_traits<ForwardIterator>::value_type>(
                senf::lexical_cast<unsigned long>()[std::hex](
                    std::string(boost::begin(*i),boost::end(*i))));
    }
    catch (std::bad_cast &) {
        throw AddressSyntaxException(value);
    }
    if (i!=i_end || f!=l)
        throw AddressSyntaxException(value);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
