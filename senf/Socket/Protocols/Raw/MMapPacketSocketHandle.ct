// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on,
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V.
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief MMapPacketSocketHandle non-inline template implementation  */

#include "MMapPacketSocketHandle.ih"

// Custom includes
#include <sys/types.h>
#include <sys/socket.h>
#include <linux/if_packet.h>
#include <net/ethernet.h>
#include <netinet/in.h>
#include <net/if.h>
#include <errno.h>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class Policy, bool IsMMapReadable, bool IsMMapWriteable>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy,IsMMapReadable,IsMMapWriteable>::
init_client(std::string iface, unsigned qlen, unsigned frameSize,
            typename LinuxPacketSocketProtocol::SocketType type, int protocol, unsigned reserve)
    const
{
    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).bind(LLSocketAddress(iface));
    this->init_mmap(frameSize, qlen, qlen, reserve);
}

template <class Policy>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy, true, false>::
init_client(std::string iface, unsigned qlen, unsigned frameSize,
            typename LinuxPacketSocketProtocol::SocketType type, int protocol, unsigned reserve)
    const
{
    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).bind(LLSocketAddress(iface));
    this->init_mmap(frameSize, 0, qlen, reserve);
}

template <class Policy>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy, false, true>::
init_client(std::string iface, unsigned qlen, unsigned frameSize,
            typename LinuxPacketSocketProtocol::SocketType type, int protocol, unsigned reserve)
    const
{
    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).bind(LLSocketAddress(iface));
    this->init_mmap(frameSize, qlen, 0, reserve);
}

template <class Policy>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy, false, false>::
init_client(std::string iface, unsigned frameSize, typename LinuxPacketSocketProtocol::SocketType type,
            int protocol, unsigned reserve)
    const
{

    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).bind(LLSocketAddress(iface));
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
