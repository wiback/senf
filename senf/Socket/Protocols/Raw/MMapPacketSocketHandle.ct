//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief MMapPacketSocketHandle non-inline template implementation  */

#include "MMapPacketSocketHandle.ih"

// Custom includes
#include <sys/types.h>
#include <sys/socket.h>
#include <linux/if_packet.h>
#include <net/ethernet.h>
#include <netinet/in.h>
#include <net/if.h>
#include <errno.h>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class Policy, bool IsMMapReadable, bool IsMMapWriteable>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy,IsMMapReadable,IsMMapWriteable>::
init_client(std::string iface, unsigned qlen, unsigned frameSize,
            typename LinuxPacketSocketProtocol::SocketType type, int protocol, unsigned reserve, bool qDiscBypass)
    const
{
    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).blocking(false);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).bind(LLSocketAddress(iface));
    this->init_mmap(frameSize, qlen, qlen/2, reserve, qDiscBypass);
}

template <class Policy>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy, true, false>::
init_client(std::string iface, unsigned qlen, unsigned frameSize,
            typename LinuxPacketSocketProtocol::SocketType type, int protocol, unsigned reserve)
    const
{
    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).blocking(false);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).bind(LLSocketAddress(iface));
    this->init_mmap(frameSize, qlen, 0, reserve);
}

template <class Policy>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy, false, true>::
init_client(std::string iface, unsigned qlen, unsigned frameSize,
            typename LinuxPacketSocketProtocol::SocketType type, int protocol, unsigned reserve, bool qDiscBypass)
    const
{
    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).blocking(false);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).bind(LLSocketAddress(iface));
    this->init_mmap(frameSize, 0, qlen, reserve, qDiscBypass);
}

template <class Policy>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_Bases<Policy, false, false>::
init_client(std::string iface, unsigned frameSize, typename LinuxPacketSocketProtocol::SocketType type,
            int protocol, unsigned reserve)
    const
{
    this->init_packetSocket(type, protocol);
    static_socket_cast< ClientSocketHandle<Policy> >(this->fh()).blocking(false);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
