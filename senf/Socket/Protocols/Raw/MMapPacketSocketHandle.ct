// $Id$
//
// Copyright (C) 2013
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief MMapPacketSocketHandle non-inline template implementation  */

#include "MMapPacketSocketHandle.ih"

// Custom includes
#include <sys/types.h>
#include <sys/socket.h>
#include <linux/if_packet.h>
#include <net/ethernet.h>
#include <netinet/in.h>
#include <net/if.h>
#include <errno.h>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class P1, class P2>
prefix_ void senf::ConnectedMMapPacketSocketProtocol<P1,P2>::
init_client(std::string iface, unsigned rxqlen, unsigned txqlen, unsigned frameSize,
            typename Base::SocketType type, int protocol)
    const
{
    BOOST_STATIC_ASSERT(( ReadPolicyIs<Policy, QueueReadPolicy>::value &&
                          WritePolicyIs<Policy, QueueWritePolicy>::value ));
    do_init_client(iface, rxqlen, txqlen, frameSize, type, protocol);
}

template <class P1, class P2>
prefix_ void senf::ConnectedMMapPacketSocketProtocol<P1,P2>::
init_client(std::string iface, unsigned qlen, unsigned frameSize, typename Base::SocketType type,
            int protocol)
    const
{
    BOOST_STATIC_ASSERT(( ReadPolicyIs<Policy, QueueReadPolicy>::value ||
                          WritePolicyIs<Policy, QueueWritePolicy>::value ));
    BOOST_STATIC_ASSERT(( ReadPolicyIs<Policy, ReadablePolicy>::value ||
                          WritePolicyIs<Policy, WriteablePolicy>::value ));
    if (ReadPolicyIs<Policy, QueueReadPolicy>::value)
        do_init_client(iface, qlen, 0, frameSize, type, protocol);
    else
        do_init_client(iface, 0, qlen, frameSize, type, protocol);
}

template <class Protocol, bool MMapBoth>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_CallInit<Protocol,MMapBoth>::
init_client(Protocol const * protocol, std::string iface, unsigned rxqlenORqlen,
            unsigned txqlenORframeSize)
{
    protocol->init_client(iface, rxqlenORqlen, txqlenORframeSize, 2048, Protocol::RawSocket, -1);
}

template <class Protocol>
prefix_ void
senf::detail::ConnectedMMapPacketSocketProtocol_CallInit<Protocol, false>::
init_client(Protocol const * protocol, std::string iface, unsigned rxqlenORqlen,
            unsigned txqlenORframeSize)
{
    protocol->init_client(iface, rxqlenORqlen, txqlenORframeSize, Protocol::RawSocket, -1);
}

template <class P1, class P2>
prefix_ void
senf::ConnectedMMapPacketSocketProtocol<P1,P2>::init_client(std::string iface,
                                                            unsigned rxqlenORqlen,
                                                            unsigned txqlenORframeSize)
    const
{
    detail::ConnectedMMapPacketSocketProtocol_CallInit<
        ConnectedMMapPacketSocketProtocol>::init_client(
            this, iface, rxqlenORqlen, txqlenORframeSize);
}

template <class P1, class P2>
prefix_ void senf::ConnectedMMapPacketSocketProtocol<P1,P2>::init_client(std::string iface,
                                                                         unsigned qlen)
    const
{
    init_client(iface, qlen, 2048, Base::RawSocket, -1);
}

template <class P1, class P2>
prefix_ void senf::ConnectedMMapPacketSocketProtocol<P1,P2>::init_client(std::string iface,
                                                                         typename Base::SocketType type,
                                                                         int protocol)
    const
{
    BOOST_STATIC_ASSERT(( ReadPolicyIs<Policy, ReadablePolicy>::value &&
                          WritePolicyIs<Policy, WriteablePolicy>::value ));
    this->init_packetSocket(type, protocol);
    this->clientHandle().bind(LLSocketAddress(iface));
}

template <class P1, class P2>
prefix_ void senf::ConnectedMMapPacketSocketProtocol<P1,P2>::do_init_client(std::string iface,
                                                                            unsigned rxqlen,
                                                                            unsigned txqlen,
                                                                            unsigned frameSize,
                                                                            typename Base::SocketType type,
                                                                            int protocol)
    const
{
    this->init_packetSocket(type, protocol);
    this->clientHandle().bind(LLSocketAddress(iface));
    this->init_mmap(frameSize, rxqlen, txqlen);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
