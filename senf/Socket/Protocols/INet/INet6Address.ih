// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief INet6Address internal header */

#ifndef IH_SENF_Socket_Protocols_INet_INet6Address_
#define IH_SENF_Socket_Protocols_INet_INet6Address_ 1

// Custom includes

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {

    class INet6Address;

namespace detail {

#   ifndef DOXYGEN

    template <unsigned a, unsigned bytes, unsigned restbits>
    struct CheckINet6Network_impl5
    {};

    template <unsigned a>
    struct CheckINet6Network_impl5<a,0,0>
    {
        static bool match(boost::uint8_t v0, boost::uint8_t v1);
    };

    template <unsigned a, unsigned restbits>
    struct CheckINet6Network_impl5<a,0,restbits>
    {
        static bool match(boost::uint8_t v0, boost::uint8_t v1);
    };

    template <unsigned a>
    struct CheckINet6Network_impl5<a,1,0>
    {
        static bool match(boost::uint8_t v0, boost::uint8_t v1);
    };

    template <unsigned a, unsigned restbits>
    struct CheckINet6Network_impl5<a,1,restbits>
    {
        static bool match(boost::uint8_t v0, boost::uint8_t v1);
    };

    template <unsigned a, unsigned bits>
    struct CheckINet6Network_impl4
        : public CheckINet6Network_impl5<a,bits/8,bits%8>
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned words, unsigned restbits>
    struct CheckINet6Network_impl3
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,0,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,1,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,2,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,3,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,4,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,5,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,6,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned restbits>
    struct CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,7,restbits>
    {
        static bool match(INet6Address const & addr);
    };

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned bits>
    struct CheckINet6Network_impl2
        : public CheckINet6Network_impl3<a0,a1,a2,a3,a4,a5,a6,a7,bits/16,bits%16>
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7, unsigned a8>
    struct CheckINet6Network_impl
        : public CheckINet6Network_impl2<a0,a1,a2,a3,a4,a5,a6,a7,a8>
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6, unsigned a7>
    struct CheckINet6Network_impl<a0,a1,a2,a3,a4,a5,a6,a7,0>
        : public CheckINet6Network_impl2<a0,a1,a2,a3,a4,a5,a6,0,a7>
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5, unsigned a6>
    struct CheckINet6Network_impl<a0,a1,a2,a3,a4,a5,a6,0,0>
        : public CheckINet6Network_impl2<a0,a1,a2,a3,a4,a5,0,0,a6>
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4,
              unsigned a5>
    struct CheckINet6Network_impl<a0,a1,a2,a3,a4,a5,0,0,0>
        : public CheckINet6Network_impl2<a0,a1,a2,a3,a4,0,0,0,a5>
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3, unsigned a4>
    struct CheckINet6Network_impl<a0,a1,a2,a3,a4,0,0,0,0>
        : public CheckINet6Network_impl2<a0,a1,a2,a3,0,0,0,0,a4>
    {};

    template <unsigned a0, unsigned a1, unsigned a2, unsigned a3>
    struct CheckINet6Network_impl<a0,a1,a2,a3,0,0,0,0,0>
        : public CheckINet6Network_impl2<a0,a1,a2,0,0,0,0,0,a3>
    {};

    template <unsigned a0, unsigned a1, unsigned a2>
    struct CheckINet6Network_impl<a0,a1,a2,0,0,0,0,0,0>
        : public CheckINet6Network_impl2<a0,a1,0,0,0,0,0,0,a2>
    {};

    template <unsigned a0, unsigned a1>
    struct CheckINet6Network_impl<a0,a1,0,0,0,0,0,0,0>
        : public CheckINet6Network_impl2<a0,0,0,0,0,0,0,0,a1>
    {};

#   endif

    boost::uint8_t low_bits_mask(unsigned bits);

    template <class ForwardIterator, class Function>
    void apply_mask(unsigned bits, ForwardIterator b, ForwardIterator e, Function fn);

    template <class ForwardIterator1, class ForwardIterator2, class Function>
    ForwardIterator1 find_if_mask(unsigned bits,
                                  ForwardIterator1 b1, ForwardIterator1 e1, ForwardIterator2 b2,
                                  Function fn);

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
