//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief INet[46]Address and INet[46]AddressingPolicy inline non-template implementation
 */

// Custom includes
#include <arpa/inet.h>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::INet4Address

prefix_ senf::INet4SocketAddress::INet4SocketAddress()
    : BSDSocketAddress (sizeof(sockaddr_in), AF_INET)
{}

prefix_ senf::INet4SocketAddress::INet4SocketAddress(const INet4SocketAddress& other)
    : BSDSocketAddress(other)
{}

prefix_ senf::INet4SocketAddress&
senf::INet4SocketAddress::operator=(const INet4SocketAddress& other)
{
    BSDSocketAddress::operator=(other);
    return *this;
}

prefix_ senf::INet4Address senf::INet4SocketAddress::address()
    const
{
    return INet4Address::from_inaddr(addr_.sin_addr.s_addr);
}

prefix_ unsigned senf::INet4SocketAddress::port()
    const
{
    return ntohs(addr_.sin_port);
}

prefix_ void senf::INet4SocketAddress::address(INet4Address const & addr)
{
    addr_.sin_addr.s_addr = addr.inaddr();
}

prefix_ void senf::INet4SocketAddress::port(unsigned p)
{
    addr_.sin_port = htons(p);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::INet6SocketAddress

prefix_ senf::INet6SocketAddress::INet6SocketAddress()
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(INet6Address const & addr, unsigned port)
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{
    std::copy(addr.begin(), addr.end(), &sockaddr_.sin6_addr.s6_addr[0]);
    sockaddr_.sin6_port = htons(port);
}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(INet6Address const & addr, unsigned port,
                                                     std::string const & iface)
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{
    std::copy(addr.begin(), addr.end(), &sockaddr_.sin6_addr.s6_addr[0]);
    sockaddr_.sin6_port = htons(port);
    assignIface(iface);
}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(unsigned port)
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{
    sockaddr_.sin6_port = htons(port);
}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(const INet6SocketAddress& other)
    : BSDSocketAddress (other)
{}

prefix_ senf::INet6SocketAddress&
senf::INet6SocketAddress::operator=(const INet6SocketAddress& other)
{
    BSDSocketAddress::operator=(other);
    return *this;
}

prefix_ senf::INet6Address senf::INet6SocketAddress::address()
    const
{
    return INet6Address::from_data(&sockaddr_.sin6_addr.s6_addr[0]);
}

prefix_ void senf::INet6SocketAddress::address(INet6Address const & addr)
{
    std::copy(addr.begin(), addr.end(), &sockaddr_.sin6_addr.s6_addr[0]);
}

prefix_ unsigned senf::INet6SocketAddress::port()
    const
{
    return ntohs(sockaddr_.sin6_port);
}

prefix_ void senf::INet6SocketAddress::port(unsigned port)
{
    sockaddr_.sin6_port = htons(port);
}

prefix_ void senf::INet6SocketAddress::iface(std::string const & iface)
{
    assignIface(iface);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
