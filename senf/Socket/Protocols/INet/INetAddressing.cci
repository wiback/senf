// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief INet[46]Address and INet[46]AddressingPolicy inline non-template implementation
 */

// Custom includes
#include <arpa/inet.h>

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::INet4Address

prefix_ senf::INet4SocketAddress::INet4SocketAddress()
    : BSDSocketAddress (sizeof(sockaddr_in), AF_INET)
{}

prefix_ senf::INet4SocketAddress::INet4SocketAddress(const INet4SocketAddress& other)
    : BSDSocketAddress(other)
{}

prefix_ senf::INet4SocketAddress&
senf::INet4SocketAddress::operator=(const INet4SocketAddress& other)
{
    BSDSocketAddress::operator=(other);
    return *this;
}

prefix_ senf::INet4Address senf::INet4SocketAddress::address()
    const
{
    return INet4Address::from_inaddr(addr_.sin_addr.s_addr);
}

prefix_ unsigned senf::INet4SocketAddress::port()
    const
{
    return ntohs(addr_.sin_port);
}

prefix_ void senf::INet4SocketAddress::address(INet4Address const & addr)
{
    addr_.sin_addr.s_addr = addr.inaddr();
}

prefix_ void senf::INet4SocketAddress::port(unsigned p)
{
    addr_.sin_port = htons(p);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::INet6SocketAddress

prefix_ senf::INet6SocketAddress::INet6SocketAddress()
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(INet6Address const & addr, unsigned port)
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{
    std::copy(addr.begin(), addr.end(), &sockaddr_.sin6_addr.s6_addr[0]);
    sockaddr_.sin6_port = htons(port);
}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(INet6Address const & addr, unsigned port,
                                                     std::string const & iface)
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{
    std::copy(addr.begin(), addr.end(), &sockaddr_.sin6_addr.s6_addr[0]);
    sockaddr_.sin6_port = htons(port);
    assignIface(iface);
}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(unsigned port)
    : BSDSocketAddress (sizeof(sockaddr_in6), AF_INET6)
{
    sockaddr_.sin6_port = htons(port);
}

prefix_ senf::INet6SocketAddress::INet6SocketAddress(const INet6SocketAddress& other)
    : BSDSocketAddress (other)
{}

prefix_ senf::INet6SocketAddress&
senf::INet6SocketAddress::operator=(const INet6SocketAddress& other)
{
    BSDSocketAddress::operator=(other);
    return *this;
}

prefix_ senf::INet6Address senf::INet6SocketAddress::address()
    const
{
    return INet6Address::from_data(&sockaddr_.sin6_addr.s6_addr[0]);
}

prefix_ void senf::INet6SocketAddress::address(INet6Address const & addr)
{
    std::copy(addr.begin(), addr.end(), &sockaddr_.sin6_addr.s6_addr[0]);
}

prefix_ unsigned senf::INet6SocketAddress::port()
    const
{
    return ntohs(sockaddr_.sin6_port);
}

prefix_ void senf::INet6SocketAddress::port(unsigned port)
{
    sockaddr_.sin6_port = htons(port);
}

prefix_ void senf::INet6SocketAddress::iface(std::string const & iface)
{
    assignIface(iface);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
