// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief INet6Address non-inline template implementation  */

#include "INet6Address.ih"

// Custom includes

#define prefix_
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::INet6Address

template <class InputIterator>
prefix_ senf::INet6Address senf::INet6Address::from_data(InputIterator i)
{
    INet6Address addr (senf::noinit);
    iterator j (addr.begin());
    iterator const j_end (addr.end());
    for (;j!=j_end;++j,++i)
        *j = *i;
    return addr;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// namespace senf::detail members

template <class ForwardIterator, class Function>
prefix_ void senf::detail::apply_mask(unsigned bits, ForwardIterator b, ForwardIterator e,
                                      Function fn)
{
    for (; bits>8 && b != e; bits -= 8, ++b)
        fn(*b, boost::lambda::make_const(0xFFu));
    if (bits > 0 && b != e)
        fn( *(b++), boost::lambda::make_const(~ low_bits_mask(8-bits)));
    for (; b != e; ++b)
        fn(*b, boost::lambda::make_const(0u));
}

template <class ForwardIterator1, class ForwardIterator2, class Function>
prefix_ ForwardIterator1 senf::detail::find_if_mask(unsigned bits, ForwardIterator1 b1,
                                                    ForwardIterator1 e1, ForwardIterator2 b2,
                                                    Function fn)
{
    for (; bits>8 && b1 != e1; bits -= 8, ++b1, ++b2)
        if (fn(*b1, *b2, boost::lambda::make_const(0xFFu)))
            return b1;
    if (bits > 0 && b1 != e1)
        if (fn(*b1, *b2, boost::lambda::make_const(~ low_bits_mask(8-bits))))
            return b1;
    for (++b1, ++b2; b1 != e1; ++b1, ++b2)
        if (fn(*b1, *b2, boost::lambda::make_const(0u)))
            return b1;
    return e1;
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
