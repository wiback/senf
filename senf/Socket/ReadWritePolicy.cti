// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ReadPolicy and WritePolicy inline template implementation
 */

//#include "ReadWritePolicy.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN
template <class SPolicy>
prefix_ unsigned senf::ReadablePolicy::
readfrom(ClientSocketHandle<SPolicy> & handle, char * buffer, unsigned size,
         typename SPolicy::AddressingPolicy::Address & address,
         typename IfCommunicationPolicyIs<SPolicy,UnconnectedCommunicationPolicy>::type *)
{
    return do_readfrom(handle, buffer, size, address.sockaddr_p(), address.socklen_p());
}
#else
template <class SPolicy>
prefix_ unsigned senf::ReadablePolicy::
readfrom(ClientSocketHandle<SPolicy> & handle, char * buffer, unsigned size,
         typename Policy::AddressingPolicy::Address & address)
{}
#endif

#ifndef DOXYGEN
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
write(ClientSocketHandle<SPolicy> & handle, char const * buffer, unsigned size,
      typename IfCommunicationPolicyIs<SPolicy,ConnectedCommunicationPolicy>::type *)
{
    return do_write(handle,buffer,size);
}
#else
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
write(ClientSocketHandle<SPolicy> & handle, char const * buffer, unsigned size)
{}
#endif

#ifndef DOXYGEN
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
writeto(ClientSocketHandle<SPolicy> & handle,
        typename boost::call_traits<typename SPolicy::AddressingPolicy::Address>::param_type addr,
        char const * buffer, unsigned size,
        typename IfCommunicationPolicyIs<SPolicy,UnconnectedCommunicationPolicy>::type *)
{
    return do_writeto(handle, buffer, size, addr.sockaddr_p(), addr.socklen());
}
#else
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
writeto(ClientSocketHandle<SPolicy> & handle,
        typename Policy::AddressingPolicy::Address const & addr,
        char const * buffer, unsigned size)
{}
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
