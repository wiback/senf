//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ReadPolicy and WritePolicy inline template implementation
 */

//#include "ReadWritePolicy.ih"

// Custom includes

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DOXYGEN
template <class SPolicy>
prefix_ unsigned senf::ReadablePolicy::
readfrom(ClientSocketHandle<SPolicy> & handle, char * buffer, unsigned size,
         typename SPolicy::AddressingPolicy::Address & address,
         typename IfCommunicationPolicyIs<SPolicy,UnconnectedCommunicationPolicy>::type *)
{
    return do_readfrom(handle, buffer, size, address.sockaddr_p(), address.socklen_p());
}
#else
template <class SPolicy>
prefix_ unsigned senf::ReadablePolicy::
readfrom(ClientSocketHandle<SPolicy> & handle, char * buffer, unsigned size,
         typename Policy::AddressingPolicy::Address & address)
{}
#endif

#ifndef DOXYGEN
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
write(ClientSocketHandle<SPolicy> & handle, char const * buffer, unsigned size,
      typename IfCommunicationPolicyIs<SPolicy,ConnectedCommunicationPolicy>::type *)
{
    return do_write(handle,buffer,size);
}
#else
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
write(ClientSocketHandle<SPolicy> & handle, char const * buffer, unsigned size)
{}
#endif

#ifndef DOXYGEN
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
writeto(ClientSocketHandle<SPolicy> & handle,
        typename boost::call_traits<typename SPolicy::AddressingPolicy::Address>::param_type addr,
        char const * buffer, unsigned size,
        typename IfCommunicationPolicyIs<SPolicy,UnconnectedCommunicationPolicy>::type *)
{
    return do_writeto(handle, buffer, size, addr.sockaddr_p(), addr.socklen());
}
#else
template <class SPolicy>
prefix_ unsigned senf::WriteablePolicy::
writeto(ClientSocketHandle<SPolicy> & handle,
        typename Policy::AddressingPolicy::Address const & addr,
        char const * buffer, unsigned size)
{}
#endif

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
