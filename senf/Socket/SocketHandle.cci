//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SocketHandle inline non-template implementation
 */

#include "SocketHandle.ih"

// Custom includes
#include "SocketProtocol.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

prefix_ senf::SocketBody::SocketBody(bool isServer)
    : isServer_(isServer)
{}

prefix_ senf::SocketBody::SocketBody(bool isServer, int fd)
    : FileBody(fd), isServer_(isServer)
{}

prefix_ senf::SocketProtocol & senf::SocketBody::protocol()
    const
{
    return const_cast<SocketProtocol &>(v_protocol());
}

prefix_ bool senf::SocketBody::isServer()
{
    return isServer_;
}

prefix_ std::unique_ptr<senf::SocketBody> senf::SocketBody::clone(bool isServer)
    const
{
    return protocol().clone(isServer);
}

prefix_ std::unique_ptr<senf::SocketBody> senf::SocketBody::clone(int fd, bool isServer)
    const
{
    return protocol().clone(fd, isServer);
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::detail::StreamableString

prefix_ senf::detail::StreamableString & senf::detail::StreamableString::operator<<(bool v)
{
    return (*this) << std::string(v ? "true" : "false");
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
