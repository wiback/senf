// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief SocketHandle inline non-template implementation
 */

#include "SocketHandle.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>
#include <senf/Utils/Exception.hh>
#include "SocketProtocol.hh"

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

prefix_ senf::SocketBody::SocketBody(bool isServer)
    : isServer_(isServer)
{}

prefix_ senf::SocketBody::SocketBody(bool isServer, int fd)
    : FileBody(fd), isServer_(isServer)
{}

prefix_ senf::SocketProtocol & senf::SocketBody::protocol()
    const
{
    return const_cast<SocketProtocol &>(v_protocol());
}

prefix_ bool senf::SocketBody::isServer()
{
    return isServer_;
}

prefix_ std::auto_ptr<senf::SocketBody> senf::SocketBody::clone(bool isServer)
    const
{
    return protocol().clone(isServer);
}

prefix_ std::auto_ptr<senf::SocketBody> senf::SocketBody::clone(int fd, bool isServer)
    const
{
    return protocol().clone(fd, isServer);
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::StreamableString

prefix_ senf::detail::StreamableString & senf::detail::StreamableString::operator<<(bool v)
{
    return (*this) << std::string(v ? "true" : "false");
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
