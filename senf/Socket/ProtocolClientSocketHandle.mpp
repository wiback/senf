//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ProtocolClientSocketHandle Boost.Preprocessor external iteration include
 */

#if !BOOST_PP_IS_ITERATING && !defined(MPP_ProtocolClientSocketHandle_)
#define MPP_ProtocolClientSocketHandle_ 1

// Custom includes
#include <boost/preprocessor/iteration/iterate.hpp>
#include <boost/preprocessor/enum.hpp>
#include <boost/preprocessor/cat.hpp>

//-///////////////////////////mpp.p////////////////////////////////////////
#elif BOOST_PP_IS_ITERATING //-////////////////////////////////////////////
//-////////////////////////////////////////////////////////////////////////
// Local Macros

#define mpp_Arg(z,n,data) BOOST_PP_CAT(A,n) const & BOOST_PP_CAT(a,n)
#define mpp_TemplateParameters() BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), class A )
#define mpp_MethodParameters() BOOST_PP_ENUM(BOOST_PP_ITERATION(), mpp_Arg, )
#define mpp_CallParameters() BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), a )

//-////////////////////////////////////////////////////////////////////////
#if BOOST_PP_ITERATION_FLAGS()==1 //-//////////////////////////////////////
//-////////////////////////////////////////////////////////////////////////
// senf::ProtocolClientSocketHandle<SocketProtocol>::
// ProtocolClientSocketHandle (constructor) declaration

template < mpp_TemplateParameters() >
explicit ProtocolClientSocketHandle( mpp_MethodParameters() );

//-////////////////////////////////////////////////////////////////////////
#elif BOOST_PP_ITERATION_FLAGS()==2 //-////////////////////////////////////
//-////////////////////////////////////////////////////////////////////////
// senf::ProtocolClientSocketHandle<SocketProtocol>::
// ProtocolClientSocketHandle (constructor) implementation

template <class SocketProtocol>
template < mpp_TemplateParameters() >
prefix_ senf::ProtocolClientSocketHandle<SocketProtocol>::
ProtocolClientSocketHandle( mpp_MethodParameters() )
    : ClientSocketHandle<typename SocketProtocol::Policy>(
            std::unique_ptr<senf::SocketBody>(new ProtocolSocketBody<SocketProtocol>(false)))
{
    this->protocol().init_client( mpp_CallParameters() );
}

//-////////////////////////////////////////////////////////////////////////
#endif //-/////////////////////////////////////////////////////////////////
//-////////////////////////////////////////////////////////////////////////
// Undefine local Macros

#undef mpp_Arg
#undef mpp_TemplateParameters
#undef mpp_MethodParameters
#undef mpp_CallParameters

//-////////////////////////////////////////////////////////////////////////
#endif //-/////////////////////////////////////////////////////////////////
//-///////////////////////////mpp.e////////////////////////////////////////


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
