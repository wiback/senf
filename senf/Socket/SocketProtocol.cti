//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief SocketProtocol and ConcreteSocketProtocol inline template implementation
 */

//#include "SocketProtocol.ih"

// Custom includes
#include "SocketHandle.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ConcreteSocketProtocol<SocketPolicy,Self>

template <class SocketPolicy, class Self>
prefix_ senf::ConcreteSocketProtocol<SocketPolicy,Self>::~ConcreteSocketProtocol()
{}

template <class SocketPolicy, class Self>
prefix_ typename senf::ConcreteSocketProtocol<SocketPolicy,Self>::Policy const &
senf::ConcreteSocketProtocol<SocketPolicy,Self>::policy()
    const
{
    return policy_;
}

template <class SocketPolicy, class Self>
prefix_ std::unique_ptr<senf::SocketBody>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::clone(bool isServer)
    const
{
    return std::unique_ptr<SocketBody>(new ProtocolSocketBody<Self>(isServer));
}

template <class SocketPolicy, class Self>
prefix_ std::unique_ptr<senf::SocketBody>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::clone(int fd, bool isServer)
    const
{
    return std::unique_ptr<SocketBody>(new ProtocolSocketBody<Self>(isServer, fd));
}

template <class SocketPolicy, class Self>
prefix_ senf::SocketBody & senf::ConcreteSocketProtocol<SocketPolicy,Self>::body()
    const
{
    return const_cast< ProtocolSocketBody<Self> &>(
        static_cast< ProtocolSocketBody<Self> const & >(*this));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class SocketPolicy, class Self>
prefix_ senf::ClientSocketHandle<SocketPolicy>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::clientHandle()
    const
{
    return static_socket_cast< ClientSocketHandle<Policy> >(fh());
}

template <class SocketPolicy, class Self>
prefix_ senf::ServerSocketHandle<SocketPolicy>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::serverHandle()
    const
{
    return static_socket_cast< ServerSocketHandle<Policy> >(fh());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
