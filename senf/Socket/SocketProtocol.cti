// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief SocketProtocol and ConcreteSocketProtocol inline template implementation
 */

//#include "SocketProtocol.ih"

// Custom includes
#include "SocketHandle.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ConcreteSocketProtocol<SocketPolicy,Self>

template <class SocketPolicy, class Self>
prefix_ senf::ConcreteSocketProtocol<SocketPolicy,Self>::~ConcreteSocketProtocol()
{}

template <class SocketPolicy, class Self>
prefix_ typename senf::ConcreteSocketProtocol<SocketPolicy,Self>::Policy const &
senf::ConcreteSocketProtocol<SocketPolicy,Self>::policy()
    const
{
    return policy_;
}

template <class SocketPolicy, class Self>
prefix_ SENF_SMART_PTR<senf::SocketBody>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::clone(bool isServer)
    const
{
    return SENF_SMART_PTR<SocketBody>(new ProtocolSocketBody<Self>(isServer));
}

template <class SocketPolicy, class Self>
prefix_ SENF_SMART_PTR<senf::SocketBody>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::clone(int fd, bool isServer)
    const
{
    return SENF_SMART_PTR<SocketBody>(new ProtocolSocketBody<Self>(isServer, fd));
}

template <class SocketPolicy, class Self>
prefix_ senf::SocketBody & senf::ConcreteSocketProtocol<SocketPolicy,Self>::body()
    const
{
    return const_cast< ProtocolSocketBody<Self> &>(
        static_cast< ProtocolSocketBody<Self> const & >(*this));
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// protected members

template <class SocketPolicy, class Self>
prefix_ senf::ClientSocketHandle<SocketPolicy>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::clientHandle()
    const
{
    return static_socket_cast< ClientSocketHandle<Policy> >(fh());
}

template <class SocketPolicy, class Self>
prefix_ senf::ServerSocketHandle<SocketPolicy>
senf::ConcreteSocketProtocol<SocketPolicy,Self>::serverHandle()
    const
{
    return static_socket_cast< ServerSocketHandle<Policy> >(fh());
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
