// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief CommunicationPolicy inline template implementation
 */

//#include "CommunicationPolicy.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

#ifndef DOXYGEN
template <class SPolicy>
prefix_ void senf::ConnectedCommunicationPolicy::
listen(ServerSocketHandle<SPolicy> const & handle, unsigned backlog,
       typename IfAddressingPolicyIsNot<SPolicy,NoAddressingPolicy>::type *)
{
    do_listen(handle, backlog);
}
#else
template <class SPolicy>
prefix_ void senf::ConnectedCommunicationPolicy::
listen(ServerSocketHandle<SPolicy> const & handle, unsigned backlog)
{}
#endif

#ifndef DOXYGEN
template <class SPolicy>
prefix_ int senf::ConnectedCommunicationPolicy::
accept(ServerSocketHandle<SPolicy> const & handle,
       typename ServerSocketHandle<SPolicy>::Address & address,
       typename IfAddressingPolicyIsNot<SPolicy,NoAddressingPolicy>::type *)
{
    return do_accept(handle,address.sockaddr_p(),address.socklen());
}
#else
template <class SPolicy>
prefix_ int senf::ConnectedCommunicationPolicy::
accept(ServerSocketHandle<SPolicy> const & handle,
       typename ServerSocketHandle<SPolicy>::Address & address)
{}
#endif

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
