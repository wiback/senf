// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ProtocolServerSocketHandle inline template implementation
 */

// Definition of inline template functions

//#include "ProtocolServerSocketHandle.ih"

// Custom includes
#include <senf/Utils/senfassert.hh>
#include "ProtocolClientSocketHandle.hh"

#define prefix_ inline
//-/////////////////////////////////////////////////////////////////////////////////////////////////

template <class SocketProtocol>
prefix_ senf::ProtocolServerSocketHandle<SocketProtocol>::
ProtocolServerSocketHandle(senf::NoInit_t)
{}

template <class SocketProtocol>
prefix_ senf::ProtocolServerSocketHandle<SocketProtocol>::ProtocolServerSocketHandle()
    : ServerSocketHandle<typename SocketProtocol::Policy>(
        std::auto_ptr<senf::SocketBody>(new ProtocolSocketBody<SocketProtocol>(true)))
{}

#define BOOST_PP_ITERATION_PARAMS_1 \
    (4, (1, 9, SENF_ABSOLUTE_INCLUDE_PATH(Socket/ProtocolServerSocketHandle.mpp), 2))
#include BOOST_PP_ITERATE()

template <class SocketProtocol>
prefix_ SocketProtocol &
senf::ProtocolServerSocketHandle<SocketProtocol>::protocol()
{
    SENF_ASSERT( dynamic_cast<SocketProtocol const *>(&this->body().protocol()),
                 "Internal failure: Incompatible protocol class fount it's way into this handle");
    // Need dynamic_cast here, since senf::SocketProtocol is a
    // virtual base
    return dynamic_cast<SocketProtocol &>(this->body().protocol());
}

template <class SocketProtocol>
prefix_ senf::ProtocolClientSocketHandle<SocketProtocol>
senf::ProtocolServerSocketHandle<SocketProtocol>::accept()
{
    return ProtocolClientSocketHandle<SocketProtocol>(
        FileHandle(this->ServerSocketHandle<typename SocketProtocol::Policy>::accept()),true);
}

template <class SocketProtocol>
prefix_ senf::ProtocolServerSocketHandle<SocketProtocol>
senf::ProtocolServerSocketHandle<SocketProtocol>::cast_static(FileHandle handle)
{
    return ProtocolServerSocketHandle(handle,true);
}

template <class SocketProtocol>
prefix_ senf::ProtocolServerSocketHandle<SocketProtocol>
senf::ProtocolServerSocketHandle<SocketProtocol>::cast_dynamic(FileHandle handle)
{
    ServerSocketHandle<typename SocketProtocol::Policy> h (
        ServerSocketHandle<typename SocketProtocol::Policy>::cast_dynamic(handle));
    // throw std::bad_cast if the protocol is invalid
    IGNORE( dynamic_cast<SocketProtocol const &>(static_cast<SocketBody&>(FileHandle::body(h)).protocol()) );
    return cast_static(handle);
}

template <class SocketProtocol>
prefix_ void
senf::ProtocolServerSocketHandle<SocketProtocol>::state(SocketStateMap & map,
                                                               unsigned lod)
{
    map["handle"] = prettyName(typeid(*this));
    if (this->valid()) {
        map["valid"] << "true";
        this->body().state(map,lod);
    } else
        map["valid"] << "false";
}

template <class SocketProtocol>
prefix_ std::string
senf::ProtocolServerSocketHandle<SocketProtocol>::dumpState(unsigned lod)
{
    SocketStateMap map;
    state(map,lod);
    return detail::dumpState(map);
}

template <class SocketProtocol>
prefix_ senf::ProtocolServerSocketHandle<SocketProtocol>::
ProtocolServerSocketHandle(FileHandle other, bool isChecked)
    : ServerSocketHandle<typename SocketProtocol::Policy>(other,isChecked)
{}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
