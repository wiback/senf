// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>


/** \file
    \brief ssenf::ProtocolServerSocketHandle Boost.Preprocessor external iteration include
 */

#if !BOOST_PP_IS_ITERATING
#ifndef MPP_SENF_Socket_ProtocolServerSocketHandle_

// Custom includes
#include <boost/preprocessor/iteration/iterate.hpp>
#include <boost/preprocessor/enum.hpp>
#include <boost/preprocessor/cat.hpp>

//-/////////////////////////////////////////////////////////////////////////////////////////////////
// Local Macros

#define mpp_PSSH_Arg(z,n,data) BOOST_PP_CAT(A,n) const & BOOST_PP_CAT(a,n)

#define mpp_PSSH_TemplateParameters() BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), class A )
#define mpp_PSSH_MethodParameters() BOOST_PP_ENUM(BOOST_PP_ITERATION(), mpp_PSSH_Arg, )
#define mpp_PSSH_CallParameters() BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), a )

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif
#else
//-/////////////////////////////////////////////////////////////////////////////////////////////////

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#if BOOST_PP_ITERATION_FLAGS()==1
//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ProtocolServerSocketHandle<SocketProtocol>::
// ProtocolServerSocketHandle (constructor) declaration

template < mpp_PSSH_TemplateParameters() >
explicit ProtocolServerSocketHandle( mpp_PSSH_MethodParameters() );

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#elif BOOST_PP_ITERATION_FLAGS()==2
//-/////////////////////////////////////////////////////////////////////////////////////////////////
// senf::ProtocolServerSocketHandle<SocketProtocol>::
// ProtocolServerSocketHandle (constructor) implementation

template <class SocketProtocol>
template < mpp_PSSH_TemplateParameters() >
prefix_ senf::ProtocolServerSocketHandle<SocketProtocol>::
ProtocolServerSocketHandle( mpp_PSSH_MethodParameters() )
    : ServerSocketHandle<typename SocketProtocol::Policy>(
        std::auto_ptr<senf::SocketBody>(new ProtocolSocketBody<SocketProtocol>(true)))
{
    this->protocol().init_server( mpp_PSSH_CallParameters() );
}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif
#endif
#if !BOOST_PP_IS_ITERATING
#ifdef MPP_SENF_Socket_ProtocolServerSocketHandle_
//-/////////////////////////////////////////////////////////////////////////////////////////////////
// Undefine local Macros

#undef mpp_PSSH_Arg
#undef mpp_PSSH_TemplateParameters
#undef mpp_PSSH_MethodParameters
#undef mpp_PSSH_CallParameters

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#else
#define MPP_SENF_Socket_ProtocolServerSocketHandle_ 1
#endif
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// End:
