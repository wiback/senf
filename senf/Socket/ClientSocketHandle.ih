// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
//
// The contents of this file are subject to the Fraunhofer FOKUS Public License
// Version 1.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at 
// http://senf.berlios.de/license.html
//
// The Fraunhofer FOKUS Public License Version 1.0 is based on, 
// but modifies the Mozilla Public License Version 1.1.
// See the full license text for the amendments.
//
// Software distributed under the License is distributed on an "AS IS" basis, 
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
// for the specific language governing rights and limitations under the License.
//
// The Original Code is Fraunhofer FOKUS code.
//
// The Initial Developer of the Original Code is Fraunhofer-Gesellschaft e.V. 
// (registered association), Hansastra√üe 27 c, 80686 Munich, Germany.
// All Rights Reserved.
//
// Contributor(s):
//   Stefan Bund <g0dil@berlios.de>

/** \file
    \brief ClientSocketHandle internal header */

#ifndef IH_SENF_Socket_ClientSocketHandle_
#define IH_SENF_Socket_ClientSocketHandle_ 1

// Custom includes
#include <senf/Utils/IteratorTraits.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

    //-/////////////////////////////////////////////////////////////////////////////////////////////
    // senf::detail::ReadRange

    /** \brief Internal: Choose optimal read implementation

        \internal

        If the range iterator is a contiguous_storage_iterator, the data is *directly* read into the
        range, otherwise a temporary storage area is used.
     */
    template <class Handle, class ForwardWritableRange, bool IsContiguous>
    struct ReadRange
    {
        static typename boost::range_iterator<ForwardWritableRange>::type
        read(Handle & handle, ForwardWritableRange & range);

        static typename boost::range_iterator<ForwardWritableRange>::type
        readfrom(Handle & handle, ForwardWritableRange & range, typename Handle::Address & addr);
    };

#   ifndef DOXYGEN

    template <class Handle, class ForwardWritableRange>
    struct ReadRange<Handle, ForwardWritableRange, true>
    {
        static typename boost::range_iterator<ForwardWritableRange>::type
        read(Handle & handle, ForwardWritableRange & range);

        static typename boost::range_iterator<ForwardWritableRange>::type
        readfrom(Handle & handle, ForwardWritableRange & range, typename Handle::Address & addr);
    };

#   endif

    //-/////////////////////////////////////////////////////////////////////////////////////////////
    // senf::detail::WriteRange

    /** \brief Internal: Choose optimal write implementation

        \internal

        If the range iterator is a contiguous_storage_iterator, the data is *directly* written from
        the range, otherwise a temporary storage area is used.
     */
    template <class Handle, class ForwardReadableRange, bool IsContiguous>
    struct WriteRange
    {
        static typename boost::range_const_iterator<ForwardReadableRange>::type
        write(Handle & handle, ForwardReadableRange & range);

        static typename boost::range_const_iterator<ForwardReadableRange>::type
        writeto(Handle & handle, ForwardReadableRange & range,
                typename Handle::Address const & addr);
    };

#   ifndef DOXYGEN

    template <class Handle, class ForwardReadableRange>
    struct WriteRange<Handle, ForwardReadableRange, true>
    {
        static typename boost::range_const_iterator<ForwardReadableRange>::type
        write(Handle & handle, ForwardReadableRange & range);

        static typename boost::range_const_iterator<ForwardReadableRange>::type
        writeto(Handle & handle, ForwardReadableRange & range,
                typename Handle::Address const & addr);
    };

#   endif

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
