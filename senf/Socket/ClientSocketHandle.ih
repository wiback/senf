//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: http://wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \file
    \brief ClientSocketHandle internal header */

#ifndef IH_SENF_Socket_ClientSocketHandle_
#define IH_SENF_Socket_ClientSocketHandle_ 1

// Custom includes
#include <senf/Utils/IteratorTraits.hh>

//-/////////////////////////////////////////////////////////////////////////////////////////////////

namespace senf {
namespace detail {

    //-/////////////////////////////////////////////////////////////////////////////////////////////
    // senf::detail::ReadRange

    /** \brief Internal: Choose optimal read implementation

        \internal

        If the range iterator is a contiguous_storage_iterator, the data is *directly* read into the
        range, otherwise a temporary storage area is used.
     */
    template <class Handle, class ForwardWritableRange, bool IsContiguous>
    struct ReadRange
    {
        static typename boost::range_iterator<ForwardWritableRange>::type
        read(Handle & handle, ForwardWritableRange & range);

        static typename boost::range_iterator<ForwardWritableRange>::type
        readfrom(Handle & handle, ForwardWritableRange & range, typename Handle::Address & addr);
    };

#   ifndef DOXYGEN

    template <class Handle, class ForwardWritableRange>
    struct ReadRange<Handle, ForwardWritableRange, true>
    {
        static typename boost::range_iterator<ForwardWritableRange>::type
        read(Handle & handle, ForwardWritableRange & range);

        static typename boost::range_iterator<ForwardWritableRange>::type
        readfrom(Handle & handle, ForwardWritableRange & range, typename Handle::Address & addr);
    };

#   endif

    //-/////////////////////////////////////////////////////////////////////////////////////////////
    // senf::detail::WriteRange

    /** \brief Internal: Choose optimal write implementation

        \internal

        If the range iterator is a contiguous_storage_iterator, the data is *directly* written from
        the range, otherwise a temporary storage area is used.
     */
    template <class Handle, class ForwardReadableRange, bool IsContiguous>
    struct WriteRange
    {
        static typename boost::range_const_iterator<ForwardReadableRange>::type
        write(Handle & handle, ForwardReadableRange & range);

        static typename boost::range_const_iterator<ForwardReadableRange>::type
        writeto(Handle & handle, ForwardReadableRange & range,
                typename Handle::Address const & addr);
    };

#   ifndef DOXYGEN

    template <class Handle, class ForwardReadableRange>
    struct WriteRange<Handle, ForwardReadableRange, true>
    {
        static typename boost::range_const_iterator<ForwardReadableRange>::type
        write(Handle & handle, ForwardReadableRange & range);

        static typename boost::range_const_iterator<ForwardReadableRange>::type
        writeto(Handle & handle, ForwardReadableRange & range,
                typename Handle::Address const & addr);
    };

#   endif

}}

//-/////////////////////////////////////////////////////////////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
