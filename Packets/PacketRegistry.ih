// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

#ifndef IH_PacketRegistryImpl_
#define IH_PacketRegistryImpl_ 1

// Custom includes
#include "Packet.hh"
#include "DataPacket.hh"
#include "typeidvalue.hh"

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {

namespace impl {

    struct PkReg_Entry {
        virtual ~PkReg_Entry() {}
        virtual void registerInterpreter(Packet const * p,
                                         Packet::iterator b, Packet::iterator e) = 0;
        virtual Packet::ptr reinterpret(Packet * p) = 0;
    };

    template <class OtherPacket>
    struct PkReg_EntryImpl
        : public PkReg_Entry
    {
        virtual void registerInterpreter(Packet const * p, Packet::iterator b, Packet::iterator e);
        virtual Packet::ptr reinterpret(Packet * p);
    };


    template <class KeyType>
    class PacketRegistryImpl : private boost::noncopyable
    {
    public:
        ///////////////////////////////////////////////////////////////////////////
        // Types

        typedef KeyType key_t;

        typedef impl::PkReg_Entry Entry;

        ///////////////////////////////////////////////////////////////////////////
        ///\name Structors and default members
        ///@{

        // default default constructor
        // no copy constructor
        // no copy assignment
        // default destructor
        // no conversion constructors

        ///@}
        ///////////////////////////////////////////////////////////////////////////

        template <class OtherPacket>
        void registerPacket(key_t key);

        key_t key(senf::TypeIdValue const & type);

        Entry * lookup(key_t key);

    protected:

    private:
        template <class OtherPacket>
        static void registerInterpreter(Packet * p, Packet::iterator b, Packet::iterator e);

        typedef boost::shared_ptr<Entry> Entry_ptr;
        typedef std::map<key_t, Entry_ptr> PacketMap;
        typedef std::map<senf::TypeIdValue, key_t> ReversePacketMap;

        PacketMap registry_;
        ReversePacketMap reverseRegistry_;
    };

    extern PkReg_EntryImpl<DataPacket> pkreg_dataEntry;

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// End:
