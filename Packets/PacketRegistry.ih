// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief PacketRegistry internal header */

#ifndef IH_PacketRegistryImpl_
#define IH_PacketRegistryImpl_ 1

// Custom includes
#include <ext/functional>
#include <boost/intrusive_ptr.hpp>
#include <boost/iterator/transform_iterator.hpp>
#include "../Utils/TypeIdValue.hh"

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {

    /** \brief Registry entry

        Value returned by a registry lookup
     */
    struct PkReg_Entry 
        : public intrusive_refcount
    {
        virtual ~PkReg_Entry();
        virtual Packet::factory_t factory() const = 0;
                                        ///< Get factory of the registered packet type
        virtual std::string name() const = 0;
    };

namespace detail {
    
    /** \brief Internal: Registry entry implementation for a specific packet type

        \internal
     */
    template <class PacketType>
    struct PkReg_EntryImpl
        : public PkReg_Entry
    {
        virtual Packet::factory_t factory() const;
        virtual std::string name() const;
    };

    /** \brief Internal: Registry implementation base-class and registry of registries
        
        \internal
     */
    class PacketRegistryImplBase
        : private boost::noncopyable
    {
    public:
        virtual ~PacketRegistryImplBase();

        static void dump(std::ostream & os);

    protected:
        typedef std::map<std::string, PacketRegistryImplBase*>  RegistryMap;
        static RegistryMap & registries();

    private:
        virtual void v_dump(std::ostream & os) = 0;
    };

    /** \brief Internal: Singleton class implementing the packet registry.

        \internal
     */
    template <class KeyType>
    class PacketRegistryImpl 
        : public PacketRegistryImplBase
    {
    public:
        typedef KeyType key_t;
        typedef PkReg_Entry Entry;

    private:
        typedef boost::intrusive_ptr<Entry> Entry_ptr;
        typedef std::map<key_t, Entry_ptr> PacketMap;
        typedef std::map<senf::TypeIdValue, key_t> ReversePacketMap;

    public:
        ///////////////////////////////////////////////////////////////////////////
        // Types

        typedef boost::transform_iterator< __gnu_cxx::select1st<typename PacketMap::value_type>,
                                           typename PacketMap::const_iterator > iterator;

        ///////////////////////////////////////////////////////////////////////////
        ///\name Structors and default members
        ///@{
        
        PacketRegistryImpl(std::string const & name);

        ///@}
        ///////////////////////////////////////////////////////////////////////////

        template <class PacketType>
        void registerPacket(key_t key);

        key_t key(senf::TypeIdValue const & type);
        boost::optional<key_t> key(senf::TypeIdValue const & type, bool);

        Entry const & lookup(key_t key);
        Entry const * lookup(key_t key, bool);

        iterator begin() const;
        iterator end() const;

    protected:

    private:
        virtual void v_dump(std::ostream & os);

        PacketMap registry_;
        ReversePacketMap reverseRegistry_;
    };

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
