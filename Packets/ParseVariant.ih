// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer NETwork research (NET)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParseVariant internal header */

#ifndef IH_ParseVariant_
#define IH_ParseVariant_ 1

// Custom includes
#include "PacketParser.hh"

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {

    template <class Variant, unsigned N>
    struct VariantBytes {
        static PacketParserBase::size_type bytes(Variant const & v, unsigned n);
    };

    template <class Variant>
    struct VariantBytes<Variant,0> {
        static PacketParserBase::size_type bytes(Variant const & v, unsigned n);
    };
    
    template <class ChooserType, unsigned Distance>
    struct Parse_Variant_Direct
    {
        typedef PacketParserBase::data_iterator data_iterator;
        typedef PacketParserBase::state_type state_type;
        typedef PacketParserBase::size_type size_type;

        static size_type const init_bytes = 0;
        size_type bytes(data_iterator i, state_type s) const { return 0; }
        data_iterator begin(data_iterator i, state_type s) const { return i; }

        ChooserType chooser(data_iterator i, state_type s) const {
            return ChooserType(boost::prior(i, Distance),s);
        }
        
        unsigned variant(data_iterator i, state_type s) const {
            return chooser(i,s).value();
        }

        void variant(unsigned v, data_iterator i, state_type s) {
            chooser(i,s).value(v);
        }
    };

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
