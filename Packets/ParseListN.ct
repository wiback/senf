// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParseListN non-inline template implementation  */

#include "ParseListN.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class ElementParser, class SizeParser>
prefix_ void
senf::detail::Parse_ListN_Policy<ElementParser,SizeParser>::iterator_policy::
setFromPosition(iterator i, state_type s, iterator p)
{
    l_ = i;
    if (p == data(s).end()) {
        n_ = 0;
        return;
    }
    n_ = SizeParser(i,s);
    iterator j (boost::next(i,SizeParser::fixed_bytes));
    for (; n_; --n_, j += ElementParser(j,s).bytes())
        if (j==p)
            return;
    BOOST_ASSERT( false );
}

template <class ElementParser, class SizeParser>
prefix_ typename senf::detail::Parse_ListN_Policy<ElementParser,SizeParser>::iterator
senf::detail::Parse_ListN_Policy<ElementParser,SizeParser>::iterator_policy::raw(iterator i,
                                                                                 state_type s)
    const
{
    if (i != data(s).end())
        return i;
    size_type n (SizeParser(l_,s));
    iterator j (boost::next(l_,SizeParser::fixed_bytes));
    for (; n; --n)
        j += ElementParser(j,s).bytes();
    return j;
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
