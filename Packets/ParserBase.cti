// $Id$
//
// Copyright (C) 2006
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <stefan.bund@fokus.fraunhofer.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

// Definition of inline template functions

#include "ParserBase.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class Iterator, class IPacket>
prefix_ Iterator senf::ParserBase<Iterator,IPacket>::i()
    const
{
    return static_cast<IPacket const *>(this)->begin();
}

template <class Iterator>
prefix_ senf::ParserBase<Iterator,senf::nil>::ParserBase(Iterator const & i)
    : i_(i)
{}

template <class Iterator>
prefix_ Iterator senf::ParserBase<Iterator,senf::nil>::i()
    const
{
    return i_;
}

template <class Parser, class Iterator>
prefix_ bool senf::impl::check(Iterator const & b, Iterator const & e,
                                      impl::ParserBase *)
{
    return impl::ParserCheck<Parser,Parser_traits<Parser>::fixed_size>::check(b,e);
}

template <class Parser, class Iterator>
prefix_ bool senf::impl::check(Iterator const & b, Iterator const & e,
                                      void *)
{
    return Parser::check(b,e);
}

template <class Parser, class Iterator>
prefix_ bool senf::check(Iterator const & b, Iterator const & e)
{
    return impl::check<Parser,Iterator>(b,e,static_cast<Parser*>(0));
}

template <class Parser>
prefix_ unsigned senf::impl::min_bytes(impl::ParserBase *)
{
    return impl::ParserMinBytes<Parser,Parser_traits<Parser>::fixed_size>::bytes();
}

template <class Parser>
prefix_ unsigned senf::impl::min_bytes(void *)
{
    return 0;
}

template <class Parser>
prefix_ unsigned senf::min_bytes()
{
    return impl::min_bytes<Parser>(static_cast<Parser*>(0));
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// End:
