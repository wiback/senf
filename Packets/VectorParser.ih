// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief VectorParser internal header */

#ifndef IH_VectorParser_
#define IH_VectorParser_ 1

// Custom includes

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {

#   define SENF_PARSER_VEC_N_I(field, name, size, elt_type)                                       \
        typedef senf::VectorParser<                                                               \
            elt_type,                                                                             \
            senf::detail::FixedAuxParserPolicy< BOOST_PP_CAT(size, _t),                           \
                                                SENF_PARSER_CURRENT_FIXED_OFFSET()                \
                                                    - SENF_PARSER_FIXED_OFFSET(size) >            \
        > BOOST_PP_CAT(name, _vec_t);                                                             \
        field( name, BOOST_PP_CAT(name, _vec_t) )

    template <class ElementParser, class AuxPolicy, class AuxTag>
    struct VectorParserPolicy
    {};

    template <class ElementParser, class AuxPolicy>
    struct VectorParserPolicy<ElementParser, AuxPolicy, senf::detail::auxtag::none>
    {
        typedef AuxPolicy type;
    };

    template <class ElementParser, class AuxPolicy, class Transform>
    struct VectorParserPolicy<ElementParser, AuxPolicy, 
                              senf::detail::auxtag::transform<Transform,
                                                              senf::detail::auxtag::none> >
    {
        typedef senf::detail::TransformAuxParserPolicy<AuxPolicy, Transform> type;
    };

    template <unsigned fixedSize>
    struct VectorParserBytesTransform
    {
        typedef PacketParserBase::size_type value_type;
        static value_type get(value_type v) { return v/fixedSize; }
        static value_type set(value_type v) { return v*fixedSize; }
    };

    template <class ElementParser, class AuxPolicy>
    struct VectorParserPolicy<ElementParser, AuxPolicy, senf::detail::auxtag::bytes>
    {
        typedef senf::detail::TransformAuxParserPolicy<
            AuxPolicy, 
            VectorParserBytesTransform<ElementParser::fixed_bytes> > type;
    };

    template <class ElementParser>
    struct VectorParserTraits
    {
        template <class AuxPolicy, class AuxTag>
        struct parser {
            typedef senf::VectorParser<
                ElementParser, 
                typename VectorParserPolicy<ElementParser, AuxPolicy, AuxTag>::type > type;
        };
    };


#   define SENF_PARSER_VECTOR_I(access, name, size, elt_type)                                     \
        SENF_PARSER_REQUIRE_VAR(vector)                                                           \
        SENF_PARSER_COLLECTION_I( access,                                                         \
                                  name,                                                           \
                                  size,                                                           \
                                  senf::detail::VectorParserTraits<elt_type> )

}}
                              
///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
