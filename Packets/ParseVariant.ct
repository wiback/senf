// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer NETwork research (NET)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParseVariant non-inline template implementation  */

#include "ParseVariant.ih"

// Custom includes
#include <algorithm>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class VariantPolicy, SENF_PARSE_VARIANT_TPL_ARGS(class P)>
template <unsigned N>
prefix_ void senf::Parse_Variant<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::init()
{
    unsigned oldSize( bytes() );
    typedef typename boost::mpl::at<parsers, boost::mpl::int_<N> >::type NewParser;

    if (oldSize < senf::init_bytes<NewParser>::value) {
        data_iterator j (i());
        std::advance(j, oldSize);
        std::fill(i(), j, 0u);
        safe_data_iterator safe_i (*this);
        data().insert(j, senf::init_bytes<NewParser>::value - oldSize, 0u);
        VariantPolicy::variant(N, safe_i, state());
        NewParser( VariantPolicy::begin(safe_i, state()), state() ).init();
    } else {
        data_iterator j (i());
        std::advance(j, senf::init_bytes<NewParser>::value);
        data().erase(j, boost::next(i(), oldSize));
        std::fill(i(), j, 0u);
        VariantPolicy::variant(N, i(), state());
        NewParser(VariantPolicy::begin(i(), state()), state()).init();
    }
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
