// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParseList non-inline template implementation  */

#include "ParseList.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::Parse_List<ElementParser,ListPolicy>

template <class ListPolicy>
prefix_ void senf::Parse_List<ListPolicy>::init()
    const
{
    ListPolicy::init(i(),state());
    iterator i (begin());
    iterator const e (end());
    for(; i!=e; ++i)
        i->init();
}

template <class ListPolicy>
prefix_ typename senf::Parse_List<ListPolicy>::value_type
senf::Parse_List<ListPolicy>::back()
    const
{
    BOOST_ASSERT( ! empty() );
    iterator i (begin()), j;
    iterator const e (end());
    for (j=i; i!=e; j=i, ++i) ;
    return *j;
}

///////////////////////////////////////////////////////////////////////////
// senf::Parse_List_Container<ListPolicy>

template <class ListPolicy>
prefix_ typename senf::Parse_List_Container<ListPolicy>::value_type
senf::Parse_List_Container<ListPolicy>::back()
    const
{
    BOOST_ASSERT( ! empty() );
    iterator i (begin()), j;
    iterator const e (end());
    for (j=i; i!=e; j=i, ++i) ;
    return *j;
}

template <class ListPolicy>
prefix_ void senf::Parse_List_Container<ListPolicy>::shift(iterator pos, size_type n)
{
    ListPolicy::update(i(),state());
    safe_data_iterator sp (data(),pos.raw());
    safe_data_iterator si (data(),i());
    for (; n>0; --n) {
        data().insert(sp,senf::init_bytes<value_type>::value,0);
        value_type(sp,state()).init();
        ListPolicy::insert(si,state(),sp);
    }
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::Parse_List_Container<ListPolicy>::insert(iterator pos,
                                                            size_type n,
                                                            Value const & t)
{
    ListPolicy::update(i(),state());
    safe_data_iterator sp (data(),pos.raw());
    safe_data_iterator si (data(),i());
    for (; n>0; --n) {
        data().insert(sp,senf::init_bytes<value_type>::value,0);
        value_type(sp,state()).init();
        value_type(sp,state()) << t;
        ListPolicy::insert(si,state(),sp);
    }
}

#ifndef DOXYGEN
template <class ListPolicy>
template <class ForwardIterator>
prefix_ void senf::Parse_List_Container<ListPolicy>::
insert(iterator pos, ForwardIterator f, ForwardIterator l,
       typename boost::disable_if< boost::is_convertible<ForwardIterator,size_type> >::type *)
{
    ListPolicy::update(i(),state());
    safe_data_iterator sp (data(),pos.raw());
    safe_data_iterator si (data(),i());
    for (; f!=l; ++f) {
        data().insert(sp,senf::init_bytes<value_type>::value,0);
        value_type(sp,state()).init();
        value_type(sp,state()) << *f;
        ListPolicy::insert(si,state(),sp);
        sp += senf::bytes(value_type(sp,state()));
    }
}
#else
template <class ListPolicy>
template <class ForwardIterator>
prefix_ void senf::Parse_List_Container<ListPolicy>::
insert(iterator pos, ForwardIterator f, ForwardIterator l)
{}
#endif

template <class ListPolicy>
prefix_ void senf::Parse_List_Container<ListPolicy>::erase(iterator pos,
                                                           size_type n)
{
    ListPolicy::update(i(),state());
    safe_data_iterator si (data(),i());
    safe_data_iterator sp (data(),pos.raw());
    for (; n>0; --n) {
        ListPolicy::erase(si,state(),sp);
        data().erase(sp,boost::next(sp,senf::bytes(value_type(sp,state()))));
    }
}

template <class ListPolicy>
prefix_ void senf::Parse_List_Container<ListPolicy>::clear()
{
    size_type sz (bytes());
    if (sz > ListPolicy::init_bytes)
        data().erase(boost::next(i(),ListPolicy::init_bytes),boost::next(i(),sz));
    else
        data().insert(boost::next(i(),sz), ListPolicy::init_bytes-sz, 0u);
    std::fill(i(),boost::next(i(),ListPolicy::init_bytes), 0u);
    ListPolicy::init(i(),state());
}

template <class ListPolicy>
prefix_ void senf::Parse_List_Container<ListPolicy>::resize(size_type n)
{
    size_type sz (size());
    if (sz>n)
        erase(boost::next(begin(),n),end());
    else
        push_back_space(n-sz);
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::Parse_List_Container<ListPolicy>::resize(size_type n,
                                                            Value value)
{
    size_type sz (size());
    if (sz>n)
        erase(boost::next(begin(),n),end());
    else
        push_back(value,n-sz);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
