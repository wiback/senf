// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief PacketParser non-inline template implementation  */

#include "PacketParser.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

#ifndef DOXYGEN
template <class Parser>
prefix_ typename boost::enable_if< 
        boost::is_base_of<senf::PacketParserBase, Parser>,
        Parser >::type senf::operator<<(Parser target, Parser source)
{
    PacketParserBase::size_type target_sz (bytes(target));
    PacketParserBase::size_type source_sz (bytes(source));
    SafePacketParserWrapper<Parser> safe_target (target);
    if (target_sz > source_sz)
        target.data().erase(boost::next(target.i(),source_sz),boost::next(target.i(),target_sz));
    else if (target_sz < source_sz)
        target.data().insert(boost::next(target.i(),target_sz),source_sz-target_sz,0u);
    Parser new_target (*safe_target);
    std::copy( source.i(), boost::next(source.i(),source_sz),
               PacketParserBase::data_iterator(new_target.i()) );
    return new_target;
}
#else
template <class Parser>
prefix_ Parser senf::operator<<(Parser target, Parser source)
{}
#endif

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
