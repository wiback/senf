// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institute for Open Communication Systems (FOKUS) 
// Competence Center NETwork research (NET), St. Augustin, GERMANY 
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ListParser inline template implementation */

#include "ListParser.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ListParser<ListPolicy>

template <class ListPolicy>
prefix_ senf::ListParser<ListPolicy>::ListParser(data_iterator i, state_type s)
    : PacketParserBase(i,s), ListPolicy()
{}

template <class ListPolicy>
prefix_ senf::ListParser<ListPolicy>::ListParser(ListPolicy policy,
                                                               data_iterator i, state_type s)
    : PacketParserBase(i,s), ListPolicy(policy)
{}

template <class ListPolicy>
prefix_ senf::PacketParserBase::size_type
senf::ListParser<ListPolicy>::bytes()
    const
{
    return ListPolicy::bytes(i(),state());
}

///////////////////////////////////////////////////////////////////////////
// Container interface

template <class ListPolicy>
prefix_ senf::PacketParserBase::size_type
senf::ListParser<ListPolicy>::size()
    const
{
    return ListPolicy::size(i(),state());
}

template <class ListPolicy>
prefix_ bool senf::ListParser<ListPolicy>::empty()
    const
{
    return begin() == end();
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy>::iterator
senf::ListParser<ListPolicy>::begin()
    const
{
    return iterator(i(),state(),iterator::Begin);
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy>::iterator
senf::ListParser<ListPolicy>::end()
    const
{
    return iterator(i(),state(),iterator::End);
}

template <class ListPolicy>
prefix_ typename senf::ListParser<ListPolicy>::value_type
senf::ListParser<ListPolicy>::front()
    const
{
    BOOST_ASSERT( ! empty() );
    return *begin();
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser<ListPolicy>::push_back(Value value, size_type n)
    const
{
    container c(*this);
    c.push_back(value,n);
}

template <class ListPolicy>
prefix_ void senf::ListParser<ListPolicy>::push_back_space(size_type n)
    const
{
    container c(*this);
    c.push_back_space(n);
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser<ListPolicy>::push_front(Value value, size_type n)
    const
{
    container c(*this);
    c.push_front(value,n);
}

template <class ListPolicy>
prefix_ void senf::ListParser<ListPolicy>::push_front_space(size_type n)
    const
{
    container c(*this);
    c.push_front_space(n);
}

template <class ListPolicy>
prefix_ void senf::ListParser<ListPolicy>::resize(size_type n)
    const
{
    container c(*this);
    c.resize(n);
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser<ListPolicy>::resize(size_type n, Value value)
    const
{
    container c(*this);
    c.resize(n,value);
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>

template <class ElementParser, class IteratorPolicy>
prefix_ senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::ListParser_Iterator()
{}

template <class ElementParser, class IteratorPolicy>
prefix_ senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::
ListParser_Iterator(PacketParserBase::data_iterator i, PacketParserBase::state_type s, Begin_t)
    : IteratorPolicy(), i_(IteratorPolicy::setBegin(i,s)), s_(s)
{}

template <class ElementParser, class IteratorPolicy>
prefix_ senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::
ListParser_Iterator(PacketParserBase::data_iterator i, PacketParserBase::state_type s, End_t)
    : IteratorPolicy(), i_(IteratorPolicy::setEnd(i,s)), s_(s)
{}

template <class ElementParser, class IteratorPolicy>
prefix_ senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::
ListParser_Iterator(PacketParserBase::data_iterator i, PacketParserBase::state_type s,
                    PacketParserBase::data_iterator p)
    : IteratorPolicy(), i_(p), s_(s)
{
    IteratorPolicy::setFromPosition(i,s,p);
}

template <class ElementParser, class IteratorPolicy>
prefix_ senf::PacketParserBase::data_iterator
senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::raw()
    const
{
    return IteratorPolicy::raw(i_,s_);
}

template <class ElementParser, class IteratorPolicy>
prefix_ ElementParser
senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::dereference()
    const
{
    return ElementParser(i_,s_);
}

template <class ElementParser, class IteratorPolicy>
prefix_ bool senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::
equal(ListParser_Iterator const & other)
    const
{
    return i_ == other.i_;
}

template <class ElementParser, class IteratorPolicy>
prefix_ void senf::detail::ListParser_Iterator<ElementParser,IteratorPolicy>::increment()
{
    i_ = IteratorPolicy::next(i_,s_);
}

///////////////////////////////////////////////////////////////////////////
// senf::ListParser_Container<ListPolicy>

// Structors and default members

template <class ListPolicy>
prefix_ senf::ListParser_Container<ListPolicy>::
ListParser_Container(parser_type const & list)
    : ListPolicy(list), state_(list.state()), i_(std::distance(data().begin(),list.i()))
{}

template <class ListPolicy>
prefix_ senf::ListParser_Container<ListPolicy>::~ListParser_Container()
{
    ListPolicy::update(i(),state());
}

// Accessors

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::size_type
senf::ListParser_Container<ListPolicy>::size()
    const
{
    ListPolicy::update(i(),state());
    return ListPolicy::size(i(),state());
}

template <class ListPolicy>
prefix_ bool senf::ListParser_Container<ListPolicy>::empty()
    const
{
    ListPolicy::update(i(),state());
    return begin() == end();
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::iterator
senf::ListParser_Container<ListPolicy>::begin()
    const
{
    ListPolicy::update(i(),state());
    return iterator(i(),state(),iterator::Begin);
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::iterator
senf::ListParser_Container<ListPolicy>::end()
    const
{
    ListPolicy::update(i(),state());
    return iterator(i(),state(),iterator::End);
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::value_type
senf::ListParser_Container<ListPolicy>::front()
    const
{
    BOOST_ASSERT( ! empty() );
    return *begin();
}

// Mutators

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser_Container<ListPolicy>::insert(iterator pos,
                                                            Value const & t)
{
    insert(pos,1,t);
}

template <class ListPolicy>
prefix_ void senf::ListParser_Container<ListPolicy>::erase(iterator f, iterator l)
{
    erase(f,std::distance(f,l));
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser_Container<ListPolicy>::push_back(Value value,
                                                               size_type n)
{
    insert(end(),n,value);
}

template <class ListPolicy>
prefix_ void senf::ListParser_Container<ListPolicy>::push_back_space(size_type n)
{
    shift(end(),n);
}

template <class ListPolicy>
template <class Value>
prefix_ void senf::ListParser_Container<ListPolicy>::push_front(Value value,
                                                                size_type n)
{
    insert(begin(),n,value);
}

template <class ListPolicy>
prefix_ void senf::ListParser_Container<ListPolicy>::push_front_space(size_type n)
{
    shift(begin(),n);
}

// Parser interface

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::parser_type
senf::ListParser_Container<ListPolicy>::parser()
    const
{
    ListPolicy::update(i(),state());
    return parser_type(i(),state());
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::data_iterator
senf::ListParser_Container<ListPolicy>::i()
    const
{
    return boost::next(data().begin(),i_);
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::state_type
senf::ListParser_Container<ListPolicy>::state()
    const
{
    return state_;
}

template <class ListPolicy>
prefix_ senf::PacketData & senf::ListParser_Container<ListPolicy>::data()
    const
{
    return *state_;
}

template <class ListPolicy>
prefix_ typename senf::ListParser_Container<ListPolicy>::size_type
senf::ListParser_Container<ListPolicy>::bytes()
    const
{
    ListPolicy::update(i(),state());
    return ListPolicy::bytes(i(),state());
}

template <class ListPolicy>
prefix_ void senf::ListParser_Container<ListPolicy>::init()
    const
{
    parser().init();
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
