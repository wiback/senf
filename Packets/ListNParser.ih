// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ListNParser internal header */

#ifndef IH_ListNParser_
#define IH_ListNParser_ 1

// Custom includes

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {

    /** \brief Internal: ListPolicy defining the ListNParser parser
        \internal
        \see \ref ListNParser
     */
    template <class ElementParser, class SizeParser>
    struct ListNParser_Policy
    {
        typedef PacketParserBase::data_iterator iterator;
        typedef PacketParserBase::state_type state_type;
        typedef PacketParserBase::size_type size_type;
        typedef ElementParser element_type;
        typedef ListParser< ListNParser_Policy > parser_type;
        typedef ListParser_Container< ListNParser_Policy > container_type;

        static const size_type init_bytes = SizeParser::fixed_bytes;

        size_type bytes  (iterator i, state_type s) const;
        size_type size   (iterator i, state_type s) const;
        void      init   (iterator i, state_type s) const;
        void      erase  (iterator i, state_type s, iterator p) const;
        void      insert (iterator i, state_type s, iterator p) const;
        void      update (iterator i, state_type s) const;

        /** \brief Iternal: ListNParser_Policy's iterator policy
            \internal
         */
        struct iterator_policy
        {
            iterator setBegin        (iterator i, state_type s);
            iterator setEnd          (iterator i, state_type s);
            void     setFromPosition (iterator i, state_type s, iterator p);
            iterator next            (iterator i, state_type s);
            iterator raw             (iterator i, state_type s) const;

            size_type n_;
            iterator l_;
        };

        static PacketData & data(state_type s);
    };

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
