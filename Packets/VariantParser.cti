// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institute for Open Communication Systems (FOKUS) 
// Competence Center NETwork research (NET), St. Augustin, GERMANY 
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief VariantParser inline template implementation */

#include "VariantParser.ih"

// Custom includes
#include <boost/mpl/size.hpp>

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>

template <class VariantPolicy, SENF_PARSE_VARIANT_TPL_ARGS(class P)>
prefix_ senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::
VariantParser(data_iterator i, state_type s)
    : PacketParserBase(i,s)
{}

template <class VariantPolicy, SENF_PARSE_VARIANT_TPL_ARGS(class P)>
prefix_ senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::
VariantParser(VariantPolicy policy, data_iterator i, state_type s)
    : PacketParserBase(i,s), VariantPolicy(policy)
{}

template <class VariantPolicy, SENF_PARSE_VARIANT_TPL_ARGS(class P)>
prefix_ senf::PacketParserBase::size_type
senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::bytes()
    const
{
    return detail::VariantBytes< VariantParser, boost::mpl::size<parsers>::value - 1 >
        ::bytes(*this, variant()) + VariantPolicy::bytes(i(),state());
}

template <class VariantPolicy, SENF_PARSE_VARIANT_TPL_ARGS(class P)>
prefix_ void
senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::init()
{
    VariantPolicy::variant(0,i(),state());
    get<0>().init();
}

template <class VariantPolicy, SENF_PARSE_VARIANT_TPL_ARGS(class P)>
prefix_ unsigned senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::variant()
    const
{
    return VariantPolicy::variant(i(),state());
}

template <class VariantPolicy, SENF_PARSE_VARIANT_TPL_ARGS(class P)>
template <unsigned N>
prefix_ typename boost::mpl::at<
    typename senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::parsers, 
    boost::mpl::int_<N> >::type
senf::VariantParser<VariantPolicy,SENF_PARSE_VARIANT_TPL_ARGS(P)>::get()
    const
{
    BOOST_ASSERT( variant() == N );
    return typename boost::mpl::at<parsers, boost::mpl::int_<N> >::type(
        VariantPolicy::begin(i(), state()), state() );
}

/////////////////////////////////////////////////////////////////////////
// senf::detail::VariantBytes<Variant,N>

template <class Variant, unsigned N>
prefix_ senf::PacketParserBase::size_type
senf::detail::VariantBytes<Variant,N>::bytes(Variant const & v, unsigned n)
{
    if (n == N)
        return senf::bytes(v.template get<N>());
    else
        return VariantBytes<Variant, N-1>::bytes(v, n);
}

template <class Variant>
prefix_ senf::PacketParserBase::size_type
senf::detail::VariantBytes<Variant,0>::bytes(Variant const & v, unsigned n)
{
    return senf::bytes(v.template get<0>());
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
