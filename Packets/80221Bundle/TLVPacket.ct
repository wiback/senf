// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Thorsten Horstmann <tho@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief TLVPacket non-inline template implementation  */

//#include "TLVPacket.ih"

// Custom includes
#include "TLVPacket.hh"

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class TypeParser, class LengthParser>
prefix_ void senf::TLVPacketType<TypeParser, LengthParser>::dump(packet p, std::ostream & os)
{
    os << "TLVPacket:"
       << std::dec
       << "  type: " <<  unsigned(p->type()) << "\n"
       << "  length: " << unsigned(p->length()) << "\n";
}

template <class TypeParser, class LengthParser>
prefix_ void senf::TLVPacketType<TypeParser, LengthParser>::finalize(packet p)
{
    try {
        PacketData::size_type size = p.next().data().size();
        if ( size > LengthParser::max_value )
            throw(UnsuportedTLVPacketException());
        p->length() = size;
    }
    catch (InvalidPacketChainException & ex) {
        ;
    }
}

template <class TypeParser, class LengthParser>
prefix_ senf::PacketParserBase::size_type senf::TLVPacketType<TypeParser, LengthParser>::initSize()
{
    return senf::init_bytes<TypeParser>::value + senf::init_bytes<LengthParser>::value;
}

template <class TypeParser, class LengthParser>
prefix_ senf::PacketInterpreterBase::optional_range 
senf::TLVPacketType<TypeParser, LengthParser>::nextPacketRange(packet p) 
{
    if (p.data().size() < 5)
        return no_range();
    return range(
            boost::next(p.data().begin(), 4 + senf::bytes(p->length()) ),
            p.data().end() );
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
