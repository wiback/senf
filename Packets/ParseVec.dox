// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer NETwork research (NET)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

namespace senf {

    /** \brief Example vector sizer. ONLY FOR EXPOSITION

        This class shows the interface which must be implemented by a vector sizer policy. It is not
        a vector sizer, it is only a declaration of the interface:
        \code
        struct ExampleVectorPolicy
        {
            // optional typedefs used to simplify all other declarations
            typedef PacketParserBase::size_type size_type;
            typedef PacketParserBase::data_iterator iterator;
            typedef PacketParserBase::state_type state_type;

            // mandatory members
            static const size_type init_bytes = 0;
            size_type  size  (iterator i, state_type s) const;
            void       size  (iterator i, state_type s, size_type v) const;
            iterator   begin (iterator i, state_type s) const;
            size_type  bytes (iterator i, state_type s) const;
            void       init  (iterator i, state_type s) const;
        };
        \endcode

        A sizer may if needed define additional data members.
     */
    struct ExampleVectorPolicy
    {
        typedef PacketParserBase::size_type size_type;
        typedef PacketParserBase::data_iterator iterator;
        typedef PacketParserBase::state_type state_type;

        static const size_type init_bytes = 0; ///< Size of a new vector of this size
                                        /**< Initial size which needs to be allocated to this type
                                             of list */

        size_type  size  (iterator i, state_type s) const; ///< Get current vector size
                                        /**< Return the current number of elements in the 
                                             vector. */
        void       size  (iterator i, state_type s, size_type v) const; ///< Change vector size
                                        /**< Set the size of the vector to \a v. */
        iterator   begin (iterator i, state_type s) const; 
                                        ///< Return data_iterator to first element
                                        /**< The returned data_iterator must point to the beginning
                                             of the first vector element. The last iterator can than
                                             automatically be calculated from the fixed element size
                                             and the number of vector elements. */
        size_type  bytes (iterator i, state_type s) const; ///< Bytes taken by the vector size
                                        /**< Return the additional size which needs to be added to
                                             the size of the vector data (calculated form \c size()
                                             * <em>ElementType::fixed_bytes</em>) to get the size of
                                             the complete vector. This may be zero if the size is
                                             not considered part of the vector. */
        void       init  (iterator i, state_type s) const; ///< Initialize new vector
                                        /** Called to initialize a new vector after allocating
                                            init_bytes number of bytes for the vector. */
    };

}


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// mode: flyspell
// mode: auto-fill
// End:
