// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief PacketImpl inline template implementation */

//#include "PacketImpl.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::detail::AnnotationIndexer<Annotation>

template <class Annotation>
prefix_ senf::detail::AnnotationIndexer<Annotation>::AnnotationIndexer()
    : index_ (maxAnnotations++)
{
    small().push_back(Small);
    registry().push_back(this);
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::AnnotationIndexer<Annotation>


template <class Annotation>
prefix_ void senf::detail::AnnotationIndexer<Annotation>::v_dump(PacketImpl * p,
                                                                 std::ostream & os)
{

    os << "  " << senf::prettyName(typeid(Annotation)) << ": ";
    p->dumpAnnotation<Annotation>(os);
    os << "\n";
}

template <class Annotation>
prefix_ unsigned senf::detail::AnnotationIndexer<Annotation>::index()
{
    return AnnotationIndexer::instance().index_;
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::GetAnnotation<Annotation,Small>

template <class Annotation, bool Small>
prefix_ Annotation & senf::detail::GetAnnotation<Annotation,Small>::get(AnnotationEntry & e)
{
    if (!e.p)
        e.p = new TAnnotationP<Annotation>();
    return static_cast< TAnnotationP<Annotation>* >(e.p)->annotation;
}

template <class Annotation, bool Small>
prefix_ void senf::detail::GetAnnotation<Annotation,Small>::dump(AnnotationEntry & e,
                                                                 std::ostream & os)
{
    if (!e.p) os << "no value";
    else      os << get(e);
}

template <class Annotation>
prefix_ Annotation & senf::detail::GetAnnotation<Annotation, true>::get(AnnotationEntry & e)
{
    return * static_cast<Annotation*>(static_cast<void*>(& e.i));
}

template <class Annotation>
prefix_ void senf::detail::GetAnnotation<Annotation, true>::dump(AnnotationEntry & e,
                                                                 std::ostream & os)
{
    os << get(e);
}

///////////////////////////////////////////////////////////////////////////
// senf::detail::PacketImpl

// Data container

template <class ForwardIterator>
prefix_ void senf::detail::PacketImpl::insert(PacketData * self, iterator pos, ForwardIterator f,
                                              ForwardIterator l)
{
    difference_type ix (std::distance(begin(),pos));
    data_.insert(pos,f,l);
    updateIterators(self,ix,std::distance(f,l));
}

template <class InputIterator>
prefix_ senf::detail::PacketImpl::PacketImpl(InputIterator first, InputIterator last)
    : refcount_(0), data_(first,last), annotations_(AnnotationIndexerBase::maxAnnotations)
{}

// Annotations

template <class Annotation>
prefix_ Annotation & senf::detail::PacketImpl::annotation()
{
    return GetAnnotation<Annotation>::get(
        annotations_[AnnotationIndexer<Annotation>::index()]);
}

template <class Annotation>
prefix_ void senf::detail::PacketImpl::dumpAnnotation(std::ostream & os)
{
    GetAnnotation<Annotation>::dump(
        annotations_[AnnotationIndexer<Annotation>::index()], os);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
