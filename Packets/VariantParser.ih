// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief VariantParser internal header */

#ifndef IH_VariantParser_
#define IH_VariantParser_ 1

// Custom includes
#include "PacketParser.hh"
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/seq/enum.hpp>

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace detail {

#ifndef DOXYGEN

    template <class Variant, unsigned N>
    struct VariantBytes {
        static PacketParserBase::size_type bytes(Variant const & v, unsigned n);
    };

    template <class Variant>
    struct VariantBytes<Variant,0> {
        static PacketParserBase::size_type bytes(Variant const & v, unsigned n);
    };

    template <class AuxPolicy, class AuxTag>
    struct VariantParserPolicy {};

    template <class AuxPolicy>
    struct VariantParserPolicy<AuxPolicy, senf::detail::auxtag::none>
    {
        typedef AuxPolicy type;
    };


    template <class AuxPolicy, class Transform>
    struct VariantParserPolicy<AuxPolicy, 
                               senf::detail::auxtag::transform<Transform, 
                                                               senf::detail::auxtag::none> >
    {
        typedef TransformAuxParserPolicy<AuxPolicy, Transform> type;
    };

    template <class Parsers>
    struct VariantParserTraits
    {
        template <class AuxPolicy, class AuxTag>
        struct parser {
            typedef senf::VariantParser<
                typename VariantParserPolicy<AuxPolicy, AuxTag>::type,
                Parsers> type;
        };
    };
    
#   define SENF_PARSER_VARIANT_I(access, name, chooser, types)                                    \
        typedef boost::mpl::vector< BOOST_PP_SEQ_ENUM(types) > BOOST_PP_CAT(name, _parsers);      \
        SENF_PARSER_REQUIRE_VAR(variant)                                                          \
        SENF_PARSER_COLLECTION_I(                                                                 \
            access,                                                                               \
            name,                                                                                 \
            chooser,                                                                              \
            senf::detail::VariantParserTraits< BOOST_PP_CAT(name, _parsers) > )

#endif

}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
