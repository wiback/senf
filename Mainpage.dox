/** \mainpage SENF: The Simple and Extensible Network Framework

    The SENF Simple and Extensible Network Framework aims to be a
    complete set of libraries to facilitate the development of network
    applications focusing on network protocols on the layers below the
    application layer. However, the framework includes many general
    purpose utilities and will be expedient to use well beyond its
    primary objective.

    \section Goals

    The main goals where (in no particular order)

    \li modular framework design
    \li utilizing the power of modern C++
    \li very low overhead for frequently called members
    \li extensible design    
    \li concise interface

    \section Components

    The framework is made up of several modular components. When using
    the library, it is possible to selectively choose to use only a
    subset of the implemented modules. The modules are
    
    \subsection libSocket libSocket: C++ abstraction of the BSD socket API

    This library provides a high performance and object oriented
    abstraction of the standard socket API. It utilizes a flexible and
    extensible policy based design. The library provides predefined
    types for the important socket types (UDP and TCP sockets etc)
    including raw and packet sockets. \n

    \see <a href="../../Socket/doc/html/index.html">libSocket API
    reference</a>

    \subsection libPackets libPackets: Network packet manipulation

    This libarary provides a very flexible infrastructure to
    parse, create and otherwise manipulate packetized network
    data. Included is a library of several protocol parsers covering
    the basic IPv4 and IPv6 network protocols down to the Ethernet
    layer.

    \see <a href="../../Packets/doc/html/index.html">libPackets API
    reference</a>

    \subsection libScheduler libScheduler: Asynchronous event handling

    The scheduler library provides an object oriented interface to the
    standard UNIX \c select type event dispatcher. It is based on the
    high performance \c epoll system call. It provides support for
    read/write events as well as simple timer based events.

    \see <a href="../../Scheduler/doc/html/index.html">libScheduler API
    reference</a>

    \subsection libUtils libUtils: Collection of arbitrary utilities

    This library is used be most all of the other modules for
    miscellaneous tools and utilities. We have

    \li Simple functions to manage daemon processes
    \li Standard exception classes 
    \li satcom::lib::intrusive_refcount to simplify the implementation
	of classes usable with boost::intrusive_ptr
    \li boost::bind extensions
    \li An interface to the \c g++ demangler integrated with type_info 
    \li Typedefs and rudimentary methods to simplify handling
	high-resolution time values

    \see <a href="../../Utils/doc/html/index.html">libUtils API
    reference</a>

    \section code Coding practices

    The library heavily depends on the features of modern C++. As
    such, it depends on a fairly recent and standards compliant C++
    compiler (the Library is developed using \c gcc with Version at
    least 3.4). To meet the above defined goals, the library makes
    quite heavy use of advanced templating techniques, so
    understanding the implementation will require expertise in the
    intricacies of C++ templates. However, it was deemed important to
    keep the \e visible Interface of the Library as clean and simple
    as possible without sacrificing the projects design goals.

    The library heavily depends on the \e Boost libraries (see
    http://www.boost.org). The Boost libraries are an ever growing
    collection of highest quality reusable C++ components. They are
    designed with standardization in mind. Many of the libraries are
    already in queue to be part of the next generation C++ standard.
   
    \section Dependencies

    \li A standards compliant, modern C++ compiler. The library as
        such is developed under Linux using \c gcc with Version
        above 3.4
    \li The Boost libraries from http://www.boost.org
    \li The SCons build tool (see http://www.scons.org)
    \li Linux. The library only makes use of the POSIX API's, however
        it has not been tested beyond Linux, so if you are somewhere
        else, you are on your own. However, we will greatly appreciate
        feedback and patches for other platforms.
*/


// Local Variables:
// mode: c++
// End:
