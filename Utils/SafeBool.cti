// $Id$
//
// Copyright (C) 2006

// Definition of inline template functions

//#include "SafeBool.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <typename T>
prefix_ senf::SafeBool<T>::operator bool_type()
    const
{
    return (static_cast<const T*>(this))->boolean_test()
        ? &SafeBoolBase::this_type_does_not_support_comparisons : 0;
}

template <typename T>
prefix_ bool senf::SafeBool<T>::operator!()
    const
{
    return ! (static_cast<const T*>(this))->boolean_test();
}

template <typename T>
prefix_ senf::SafeBool<T>::~SafeBool()
{}

template <typename T, typename U>
prefix_ void senf::operator==(const SafeBool<T>& lhs, const SafeBool<U>& rhs)
{
    lhs.this_type_does_not_support_comparisons();
}

template <typename T, typename U>
prefix_ void senf::operator!=(const SafeBool<T>& lhs, const SafeBool<U>& rhs)
{
    lhs.this_type_does_not_support_comparisons();
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// comment-column: 40
// End:
