// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Target inline non-template implementation */

//#include "Target.ih"

// Custom includes
#include <algorithm>

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::log::Target

prefix_ void senf::log::Target::route(std::string const & stream, action_t action)
{
    detail::StreamBase const * s (StreamRegistry::instance().lookup(stream));
    if (!s)
        throw InvalidStreamException();
    route(s, 0, NONE::value, action);
}

prefix_ void senf::log::Target::route(std::string const & stream, std::string const & area,
                                      action_t action)
{
    detail::StreamBase const * s (StreamRegistry::instance().lookup(stream));
    if (!s)
        throw InvalidStreamException();
    detail::AreaBase const * a (AreaRegistry::instance().lookup(area));
    if (!a)
        throw InvalidAreaException();
    route(s, a, NONE::value, action);
}

prefix_ void senf::log::Target::route(std::string const & stream, unsigned level, action_t action)
{
    detail::StreamBase const * s (StreamRegistry::instance().lookup(stream));
    if (!s)
        throw InvalidStreamException();
    route(s, 0, level, action);
}

prefix_ void senf::log::Target::route(std::string const & stream, std::string const & area,
                                      unsigned level, action_t action)
{
    detail::StreamBase const * s (StreamRegistry::instance().lookup(stream));
    if (!s)
        throw InvalidStreamException();
    detail::AreaBase const * a (AreaRegistry::instance().lookup(area));
    if (!a)
        throw InvalidAreaException();
    route(s, a, level, action);
}

////////////////////////////////////////
// private members

prefix_ void senf::log::Target::route(detail::StreamBase const * stream,
                                      detail::AreaBase const * area, unsigned level,
                                      action_t action)
{
    rib_.push_back(RoutingEntry(stream, area, level, action));
    if (action == ACCEPT)
        updateRoutingCache(stream, area);
}

prefix_ void senf::log::Target::unroute(detail::StreamBase const * stream,
                                        detail::AreaBase const * area, unsigned level, 
                                        action_t action)
{
    rib_.erase(std::remove(rib_.begin(), rib_.end(), RoutingEntry(stream, area, level, action)),
               rib_.end());
    if (action == ACCEPT)
        updateRoutingCache(stream, area);
}

///////////////////////////////////////////////////////////////////////////
// senf::log::Target::RoutingEntry

prefix_ senf::log::Target::RoutingEntry::RoutingEntry(detail::StreamBase const * stream_,
                                                      detail::AreaBase const * area_,
                                                      unsigned level_, action_t action_)
    : stream(stream_), area(area_), level(level_), action(action_) 
{}

prefix_ senf::log::Target::RoutingEntry::RoutingEntry()
    : stream(0), area(0), level(0), action(ACCEPT) 
{}

prefix_ bool senf::log::Target::RoutingEntry::operator==(RoutingEntry const & other)
{ 
    return 
        stream == other.stream && 
        area == other.area && 
        level == other.level &&
        action == other.action; 
}

///////////////////////////////////////////////////////////////////////////
// senf::log::TargetRegistry

prefix_ void senf::log::TargetRegistry::registerTarget(Target * target)
{
    targets_.insert(target);
}

prefix_ void senf::log::TargetRegistry::unregisterTarget(Target * target)
{
    targets_.erase(target);
}

/////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
