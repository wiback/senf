// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Target internal header */

#ifndef IH_SENF_Utils_Logger_Target_
#define IH_SENF_Utils_Logger_Target_ 1

// Custom includes
#include <memory>
#include <boost/type_traits/is_same.hpp>
#include <boost/static_assert.hpp>

///////////////////////////////ih.p////////////////////////////////////////

namespace senf {
namespace log {
namespace detail {

    /** \brief Internal: Target registry */
    class TargetRegistry
        : public senf::singleton<TargetRegistry>
    {
    public:
        using senf::singleton<TargetRegistry>::instance;

        void write(StreamBase const & stream, AreaBase const & area, unsigned level, 
                   std::string msg);

        void routed();
        bool fallbackRouting();

    private:
        TargetRegistry();
        
        void registerTarget(Target * target);
        void unregisterTarget(Target * target);

        typedef std::set<Target *> Targets;
        Targets targets_;

        bool fallbackRouting_;
        
        friend class senf::log::Target;
        friend class senf::singleton<TargetRegistry>;
    };

    /** \brief Internal: Write log message */
    template <class Stream, class Area, class Level>
    void write(std::string msg);

#ifndef DOXYGEN

    // This code takes the routing target template arguments in any order and sorts them 
    // by type (Stream, Area and Level).

    senf::mpl::rv<0u> RouteParameterCheck_(...);
    senf::mpl::rv<1u> RouteParameterCheck_(StreamBase *);
    senf::mpl::rv<2u> RouteParameterCheck_(AreaBase *);
    template <class T> senf::mpl::rv<3u> RouteParameterCheck_(T*, typename T::SENFLogArea * = 0);
    senf::mpl::rv<4u> RouteParameterCheck_(LevelBase *);

    // For g++ 4.0 (at least) we need to provide the fully scoped name for this default value.
    // no idea why. It works without the scope in 4.1
    template < class T, class A2, class A1,
               unsigned type = SENF_MPL_RV( senf::log::detail::RouteParameterCheck_(static_cast<T*>(0)) ) >
    struct RouteParameters
    {};

    template <class A2, class A1>
    struct RouteParameters<mpl::nil,A2,A1,0u>
        : public RouteParameters<A2,A1,mpl::nil>
    {};

    struct NilLevel {
        static unsigned const value = NONE::value;
    };

    template <>
    struct RouteParameters<mpl::nil,mpl::nil,mpl::nil,0u>
    {
        typedef mpl::nil Stream;
        typedef mpl::nil Area;
        typedef NilLevel Level;
    };

    template <class T, class A2, class A1>
    struct RouteParameters<T,A2,A1,1u>
        : public RouteParameters<A2,A1,mpl::nil>
    {
        typedef RouteParameters<A2,A1,mpl::nil> base;
        BOOST_STATIC_ASSERT(( boost::is_same<typename base::Stream, mpl::nil>::value ));
        typedef T Stream;
    };

    template <class T, class A2, class A1>
    struct RouteParameters<T,A2,A1,2u>
        : public RouteParameters<A2,A1,mpl::nil>
    {
        typedef RouteParameters<A2,A1,mpl::nil> base;
        BOOST_STATIC_ASSERT(( boost::is_same<typename base::Area, mpl::nil>::value ));
        typedef T Area;
    };

    template <class T, class A2, class A1>
    struct RouteParameters<T,A2,A1,3u>
        : public RouteParameters<A2,A1,mpl::nil>
    {
        typedef RouteParameters<A2,A1,mpl::nil> base;
        BOOST_STATIC_ASSERT(( boost::is_same<typename base::Area, mpl::nil>::value ));
        typedef typename T::SENFLogArea Area;
    };

    template <class T, class A2, class A1>
    struct RouteParameters<T,A2,A1,4u>
        : public RouteParameters<A2,A1,mpl::nil>
    {
        typedef RouteParameters<A2,A1,mpl::nil> base;
        BOOST_STATIC_ASSERT(( boost::is_same<typename base::Level, NilLevel>::value ));
        typedef T Level;
    };

    template <class T, class RV>
    struct InstanceP
    {
        static RV * value() { return & T::instance(); }
    };

    template <class RV>
    struct InstanceP<mpl::nil, RV>
    {
        static RV * value() { return 0; }
    };

#endif

}}}

///////////////////////////////ih.e////////////////////////////////////////
#endif


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
