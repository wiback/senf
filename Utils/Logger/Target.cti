// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Target inline template implementation */

#include "Target.ih"

// Custom includes
#include "Levels.hh"

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::log::Target

// senf::log::Target::route

#ifndef DOXYGEN

template <class Stream>
prefix_ void senf::log::Target::route(action_t action, int index)
{
    route(&Stream::instance(), 0, NONE::value, action, index);
}

template <class Stream, class Level>
prefix_ void senf::log::Target::
route(action_t action, int index,
      typename boost::enable_if< boost::is_convertible<Level*, detail::LevelBase *> >::type *)
{
    route(&Stream::instance(), 0, Level::value, action, index);
}

template <class Stream, class Area>
prefix_ void senf::log::Target::
route(action_t action, int index,
      typename boost::enable_if< boost::is_convertible<Area*, detail::AreaBase *> >::type *)
{
    route(&Stream::instance(), &Area::instance(), NONE::value, action, index);
}

template <class Stream, class AreaClass>
prefix_ void senf::log::Target::
route(action_t action, int index,
      typename boost::enable_if< boost::is_convertible<typename AreaClass::SENFLogArea *, detail::AreaBase *> >::type *)
{
    route(&Stream::instance(), &AreaClass::SENFLogArea::instance(), NONE::value, action, index);
}

template <class Stream, class Area, class Level>
prefix_ void senf::log::Target::
route(action_t action, int index,
      typename boost::enable_if< boost::is_convertible<Area *, detail::AreaBase *> >::type *)
{
    route(&Stream::instance(), &Area::instance(), Level::value, action, index);
}

template <class Stream, class AreaClass, class Level>
prefix_ void senf::log::Target::
route(action_t action, int index,
      typename boost::enable_if< boost::is_convertible<typename AreaClass::SENFLogArea *, detail::AreaBase *> >::type *)
{
    route(&Stream::instance(), &AreaClass::SENFLogArea::instance(), Level::value, action, index);
}

// senf::log::target::ununroute

template <class Stream>
prefix_ void senf::log::Target::unroute(action_t action)
{
    unroute(&Stream::instance(), 0, NONE::value, action);
}

template <class Stream, class Level>
prefix_ void senf::log::Target::
unroute(action_t action,
      typename boost::enable_if< boost::is_convertible<Level*, detail::LevelBase *> >::type *)
{
    unroute(&Stream::instance(), 0, Level::value, action);
}

template <class Stream, class Area>
prefix_ void senf::log::Target::
unroute(action_t action,
      typename boost::enable_if< boost::is_convertible<Area*, detail::AreaBase *> >::type *)
{
    unroute(&Stream::instance(), &Area::instance(), NONE::value, action);
}

template <class Stream, class AreaClass>
prefix_ void senf::log::Target::
unroute(action_t action,
      typename boost::enable_if< boost::is_convertible<typename AreaClass::SENFLogArea *, detail::AreaBase *> >::type *)
{
    unroute(&Stream::instance(), &AreaClass::SENFLogArea::instance(), NONE::value, action);
}

template <class Stream, class Area, class Level>
prefix_ void senf::log::Target::
unroute(action_t action,
      typename boost::enable_if< boost::is_convertible<Area *, detail::AreaBase *> >::type *)
{
    unroute(&Stream::instance(), &Area::instance(), Level::value, action);
}

template <class Stream, class AreaClass, class Level>
prefix_ void senf::log::Target::
unroute(action_t action,
      typename boost::enable_if< boost::is_convertible<typename AreaClass::SENFLogArea *, detail::AreaBase *> >::type *)
{
    unroute(&Stream::instance(), &AreaClass::SENFLogArea::instance(), Level::value, action);
}

#endif 

///////////////////////////////////////////////////////////////////////////
// namespace senf::log::detail members

template <class Stream, class Area, class Level>
prefix_ void senf::log::detail::write(std::string msg)
{
    TargetRegistry::instance().write(Stream::instance(), Area::instance(), Level::value, msg);
}

template <class Source>
prefix_ void senf::log::timeSource()
{
    timeSource(std::auto_ptr<Source>(new Source()));
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
