// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief StreamRegistry inline non-template implementation */

#include "StreamRegistry.ih"

// Custom includes
#include "../TypeInfo.hh"

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::log::StreamRegistry

prefix_ std::string const &
senf::log::StreamRegistry::SelectName::operator()(Registry::value_type const & v)
    const
{
    return v.first;
}

prefix_ senf::log::StreamRegistry::StreamRegistry()
{}

prefix_ senf::log::StreamRegistry::iterator senf::log::StreamRegistry::begin()
{
    return boost::make_transform_iterator(registry_.begin(), SelectName());
}

prefix_ senf::log::StreamRegistry::iterator senf::log::StreamRegistry::end()
{
    return boost::make_transform_iterator(registry_.end(), SelectName());
}

prefix_ void senf::log::StreamRegistry::registerStream(detail::StreamBase const & stream)
{
    registry_.insert( std::make_pair(stream.v_name(), &stream) );
}

///////////////////////////////////////////////////////////////////////////
// senf::log::detail::StreamBase

prefix_ senf::log::detail::StreamBase::StreamBase()
    : index( nStreams++ )
{}

prefix_ std::string senf::log::detail::StreamBase::fullName()
    const
{
    return prettyName(typeid(*this));
}

prefix_ std::string senf::log::detail::StreamBase::v_name()
    const
{
    return fullName();
}

prefix_ void senf::log::detail::StreamBase::init()
{
    senf::log::StreamRegistry::instance().registerStream(*this);
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
