// $Id$
//
// Copyright (C) 2009 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief VectorSupport non-inline template implementation  */

//#include "VectorSupport.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

#ifndef DOXYGEN

template <class Sequence>
prefix_ void senf::console::SequenceArgumentTraits<Sequence>::
parse(ParseCommandInfo::TokensRange const & tokens, type & out)
{
    out.clear();
    CheckedArgumentIteratorWrapper arg (tokens);
    while (arg) {
        out.push_back(typename Sequence::value_type());
        senf::console::parse( *(arg++), out.back() );
    }
}

template <class Sequence>
prefix_ std::string senf::console::SequenceArgumentTraits<Sequence>::description()
{
    std::string type (prettyName(typeid(Sequence)));
    std::string::size_type e (type.find('<'));
    if (e == std::string::npos) e = type.size();
    std::string::size_type b (type.rfind(':', e));
    if (b == std::string::npos) b = 0; else ++b;
    return type.substr(b,e-b) + "<" 
        + ArgumentTraits<typename Sequence::value_type>::description() + ">";
}

template <class Sequence>
prefix_ std::string senf::console::SequenceArgumentTraits<Sequence>::str(type const & value)
{
    std::stringstream ss;
    senf::console::format(value, ss);
    return ss.str();
}

template <class Sequence>
prefix_ void senf::console::SequenceReturnValueTraits<Sequence>::format(type const & value,
                                                                        std::ostream & os)
{
    os << "(";
    typename type::const_iterator i (value.begin());
    typename type::const_iterator const i_end (value.end());
    if (i != i_end)
        for (;;) {
            senf::console::format(*i, os);
            if (++i == i_end) 
                break;
            else
                os << " ";
        }
    os << ")";
}

#endif

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
