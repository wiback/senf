// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Telnet inline non-template implementation */

//#include "Telnet.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::BaseTelnetProtocol::OptInfo

prefix_ senf::console::detail::BaseTelnetProtocol::OptInfo::OptInfo()
    : local (false), option (0u), wantState (DISABLED), optionState (NONE), enabled (false)
{}

prefix_ senf::console::detail::BaseTelnetProtocol::OptInfo::OptInfo(bool l, option_type o)
    : local (l), option (o), wantState (DISABLED), optionState (NONE), enabled (false)
{}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::BaseTelnetProtocol::TelnetHandler

prefix_ senf::console::detail::BaseTelnetProtocol::TelnetHandler::~TelnetHandler()
{}

prefix_ std::string const & senf::console::detail::telnethandler::TerminalType::terminalType()
    const
{
    return type_;
}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::telnethandler::NAWS

prefix_ unsigned senf::console::detail::telnethandler::NAWS::width()
    const
{
    return width_;
}

prefix_ unsigned senf::console::detail::telnethandler::NAWS::height()
    const
{
    return height_;
}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::BaseTelnetProtocol

prefix_ senf::console::detail::BaseTelnetProtocol::~BaseTelnetProtocol()
{}

prefix_ void senf::console::detail::BaseTelnetProtocol::incrementRequestCounter()
{
    ++ pendingRequests_;
    timeout_.timeout(senf::scheduler::eventTime() + requestTimeout_);
}

prefix_ bool senf::console::detail::BaseTelnetProtocol::requestsPending()
{
    return pendingRequests_ > 0u;
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendNOP()
{
    transmit(CMD_IAC);
    transmit(CMD_NOP);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendBRK()
{
    transmit(CMD_IAC);
    transmit(CMD_BRK);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendIP()
{
    transmit(CMD_IAC);
    transmit(CMD_IP);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendAO()
{
    transmit(CMD_IAC);
    transmit(CMD_AO);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendAYT()
{
    transmit(CMD_IAC);
    transmit(CMD_AYT);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendEC()
{
    transmit(CMD_IAC);
    transmit(CMD_EC);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendEL()
{
    transmit(CMD_IAC);
    transmit(CMD_EL);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::sendGA()
{
    transmit(CMD_IAC);
    transmit(CMD_GA);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::requestLocalOption(option_type option,
                                                                           bool enabled)
{
    request(getOption(true, option), enabled);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::acceptLocalOption(option_type option,
                                                                          bool enabled)
{
    getOption(true, option).wantState = OptInfo::ACCEPTED;
}

prefix_ void senf::console::detail::BaseTelnetProtocol::requestPeerOption(option_type option,
                                                                          bool enabled)
{
    request(getOption(false, option), enabled);
}

prefix_ void senf::console::detail::BaseTelnetProtocol::acceptPeerOption(option_type option,
                                                                         bool enabled)
{
    getOption(false, option).wantState = OptInfo::ACCEPTED;
}

prefix_ void senf::console::detail::BaseTelnetProtocol::emit(char c)
{
    v_charReceived(c);
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
