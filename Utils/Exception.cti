// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Exception inline template implementation */

//#include "Exception.ih"

// Custom includes
#include <boost/lexical_cast.hpp>

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class Exc, class Arg>
prefix_ typename boost::enable_if< boost::is_convertible<Exc*,senf::ExceptionMixin*>, Exc & >::type
senf::operator<<(Exc const & exc, Arg const & arg)
{
    const_cast<Exc &>(exc).append( boost::lexical_cast<std::string>(arg) );
    return const_cast<Exc &>(exc);
}

///////////////////////////////////////////////////////////////////////////
// senf::WrapExcecption<BaseException>

template <class BaseException>
prefix_ senf::WrapException<BaseException>::WrapException(BaseException const & base)
    : ExceptionMixin(base.what()), BaseException(base)
{}

template <class BaseException>
prefix_ senf::WrapException<BaseException>::~WrapException()
    throw()
{}

template <class BaseException>
prefix_ char const * senf::WrapException<BaseException>::what()
    const throw()
{
    return what_.c_str();
}

/////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
