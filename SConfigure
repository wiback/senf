# -*- python -*-

import os.path, glob

Import('env')

###########################################################################
# Custom configuration checks

@env.ConfTest()
def CheckSTLCopyN(context):
    context.Message("Checking for 'copy_n' implementation... ")
    versions = [ ('<algorithm>',     'std::copy_n',       'STD'),
                 ('<ext/algorithm>', '__gnu_cxx::copy_n', 'GNUCXX') ]
    for include, name, define in versions:
        ret = context.TryCompile("#include %s\n"
                                 "int main(int,char**) { int *a (NULL); int *b (NULL); %s(a,0,b); }\n"
                                 % (include, name),
                                 ".cc")
        if ret:
            context.Result(name)
            context.sconf.Define("HAVE_%s_COPYN" % define,
                                 1,
                                 "Define one of "
                                 + ", ".join(("HAVE_%s_COPYN" % elt[2] for elt in versions)))
            return ret

    context.Result(False)
    return False


@env.ConfTest()
def CheckTempBufferStrategy(context):
    context.Message("Checking for optimal temporary buffer strategy... ")

    def check():
      # locals
      ret = context.TryCompile("int test(int n){int a[n]; return a[0];}",".cc")
      if ret: return "locals"

      # alloca
      ret = context.TryCompile("#include <alloca.h>\n"
                               "void* test(int a){void *b(alloca(a)); return b;}",
                               ".cc")
      if ret: return "alloca"

      # fallback: new
      return "new"

    ret = check()
    context.Result(ret)
    context.sconf.Define("SENF_BUFFER_USE_%s" % ret.upper(),
                         1,
                         "Define one of SENF_BUFFER_USE_LOCALS, SENF_BUFFER_USE_ALLOCA, "
                         "SENF_BUFFER_USE_NEW")
    return ret

@env.ConfTest()
def CheckValgrind(context):
    context.Message( "Checking for valgrind... " )
    ret = context.TryAction(['$VALGRIND --version >$TARGET'])
    context.Result( ret[1].strip() or False )
    return ret[0]

@env.ConfTest()
def CheckValgrindWildcards(context):
    context.Message( "Checking whether valgrind supports '...' wildcards in suppressions... " )
    ret = context.TryAction(['$VALGRIND --suppressions=$SOURCE /bin/true'],
                            "{\n test_suppression\n Memcheck:Addr4\n ...\n fun:foo\n}\n",
                            ".sup")
    context.Result( ret[0] )
    return ret[0]

###########################################################################

conf = env.Configure(clean=False, help=False, config_h="$BUILDDIR/senf/autoconf.hh")

def checkCompiler(env, conf, cxx, cc, minVersion, fail):
    env['CXX'] = cxx
    env['LINK'] = cxx
    env['CC'] = cc
    return conf.CheckCXXVersion(min=minVersion, fail=fail)
    
# Compiler
if env['cxx11']:
    if 'CXX' in ARGUMENTS:
        p = os.path.dirname(ARGUMENTS['CXX'])
        cxx = os.path.basename(ARGUMENTS['CXX'])
        if cxx.startswith('clang++'):
            checkCompiler(env, conf, ARGUMENTS['CXX'], 
                  os.path.join(p, cxx.replace('clang++', 'clang')), '3.3', True)
        else:
            checkCompiler(env, conf, ARGUMENTS['CXX'], 
                  os.path.join(p, cxx.replace('g++', 'gcc')), '4.7', True)
    else:
        for gccVersion in ('', '-4.7', '-4.8', '-4.9'): 
            if checkCompiler(env, conf, 'g++'+gccVersion, 'gcc'+gccVersion, '4.7', False):
                break
        else:
            if not checkCompiler(env, conf, "clang++", 'clang' '3.3', False):
                env.Fail('No supported compiler found.\nYou can use CXX=... set the c++ compiler to use.')

# Boost
if env['cxx11']:
    minBoostVersion = '1_49'
else:
    minBoostVersion = None
conf.CheckBoostInstallation(min=minBoostVersion)
conf.env.SetDefault( BOOST_EXT = [] )
if not conf.CheckCXXHeader("boost/icl/interval.hpp", include_quotes='<>'):
    conf.env.Append(BOOST_EXT = ['icl'])
if env['cxx11']:
    conf.Define('SENF_CXX11_ENABLED', 1)
    
# Compiler support
conf.CheckTempBufferStrategy()

# Standard library stuff
conf.CheckCHeader("execinfo.h")
conf.FindCHeader("timerfd.h", [ 'sys', 'linux' ])
conf.CheckFunc("timerfd_create")
conf.CheckSymbolWithExpression(
    "le16toh", "le16toh(0)", "#include <senf/Packets/80211Bundle/radiotap/platform.h>")
conf.CheckSymbolWithExpression(
    "le32toh", "le32toh(0)", "#include <senf/Packets/80211Bundle/radiotap/platform.h>")
conf.CheckByteorder()
res = conf.CheckSTLCopyN(); \
    conf.env.Fail(condition=not res, message="No 'copy_n' implementation found")
conf.CheckType("std::unique_ptr<void>", includes="#include <memory>", language="c++")

# valgrind
res = conf.CheckValgrind() and conf.CheckValgrindWildcards(); \
    conf.env.Replace(HAVE_VALGRIND = res)

###########################################################################

# run configure scripts from external modules 
Export('conf')

sconscripts = sorted(glob.glob("senf/Ext/*/SConfigure"))
if sconscripts:
    SConscript(sconscripts)

###########################################################################

env = conf.Finish()
