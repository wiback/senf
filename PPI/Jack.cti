// $Id$
//
// Copyright (C) 2009 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Jack inline template implementation */

//#include "Jack.ih"

// Custom includes
#include "Setup.hh"

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

template <class PacketType>
prefix_ senf::ppi::connector::ActiveInputJack<PacketType>::
ActiveInputJack(ActiveInput<PacketType> & input)
    : GenericActiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveInputJack<PacketType>::ActiveInputJack(ActiveInput<> & input)
    : GenericActiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveInputJack<PacketType>::ActiveInputJack(ActiveInputJack & input)
    : GenericActiveInputJack (input.connector())
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveInputJack<PacketType>::ActiveInputJack(ActiveInputJack<> & input)
    : GenericActiveInputJack (input.connector())
{}

prefix_
senf::ppi::connector::ActiveInputJack<senf::Packet>::ActiveInputJack(ActiveInput<> & input)
    : GenericActiveInputJack (input) 
{}

prefix_
senf::ppi::connector::ActiveInputJack<senf::Packet>::ActiveInputJack(ActiveInputJack & input)
    : GenericActiveInputJack (input.connector()) 
{}

template <class PacketType>
prefix_ senf::ppi::connector::ActiveOutputJack<PacketType>::
ActiveOutputJack(ActiveOutput<PacketType> & output)
    : GenericActiveOutputJack (output)
{}

template <class PacketType>
prefix_
senf::ppi::connector::ActiveOutputJack<PacketType>::ActiveOutputJack(ActiveOutput<> & output)
    : GenericActiveOutputJack (output)
{}

template <class PacketType>
prefix_ senf::ppi::connector::ActiveOutputJack<PacketType>::
ActiveOutputJack(ActiveOutputJack & output)
    : GenericActiveOutputJack (output.connector())
{}

template <class PacketType>
prefix_ senf::ppi::connector::ActiveOutputJack<PacketType>::
ActiveOutputJack(ActiveOutputJack<> & output)
    : GenericActiveOutputJack (output.connector())
{}

prefix_ senf::ppi::connector::ActiveOutputJack<senf::Packet>::
ActiveOutputJack(ActiveOutput<> & output)
    : GenericActiveOutputJack (output) 
{}

prefix_ senf::ppi::connector::ActiveOutputJack<senf::Packet>::
ActiveOutputJack(ActiveOutputJack & output)
    : GenericActiveOutputJack (output.connector()) 
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveInputJack<PacketType>::
PassiveInputJack(PassiveInput<PacketType> & input)
    : GenericPassiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::PassiveInputJack<PacketType>::PassiveInputJack(PassiveInput<> & input)
    : GenericPassiveInputJack (input)
{}

template <class PacketType>
prefix_
senf::ppi::connector::PassiveInputJack<PacketType>::PassiveInputJack(PassiveInputJack & input)
    : GenericPassiveInputJack (input.connector())
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveInputJack<PacketType>::
PassiveInputJack(PassiveInputJack<> & input)
    : GenericPassiveInputJack (input.connector())
{}

prefix_
senf::ppi::connector::PassiveInputJack<senf::Packet>::PassiveInputJack(PassiveInput<> & input)
    : GenericPassiveInputJack (input) 
{}

prefix_ senf::ppi::connector::PassiveInputJack<senf::Packet>::
PassiveInputJack(PassiveInputJack & input)
    : GenericPassiveInputJack (input.connector()) 
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutput<PacketType> & output)
    : GenericPassiveOutputJack (output)
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutput<> & output)
    : GenericPassiveOutputJack (output)
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutputJack & output)
    : GenericPassiveOutputJack (output.connector())
{}

template <class PacketType>
prefix_ senf::ppi::connector::PassiveOutputJack<PacketType>::
PassiveOutputJack(PassiveOutputJack<> & output)
    : GenericPassiveOutputJack (output.connector())
{}

prefix_ senf::ppi::connector::PassiveOutputJack<senf::Packet>::
PassiveOutputJack(PassiveOutput<> & output)
    : GenericPassiveOutputJack (output) 
{}

prefix_ senf::ppi::connector::PassiveOutputJack<senf::Packet>::
PassiveOutputJack(PassiveOutputJack & output)
    : GenericPassiveOutputJack (output.connector()) 
{}

template <class T>
prefix_ void
senf::ppi::connect(connector::GenericActiveOutputJack & source, T & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source.connector(), target);
}

template <class T>
prefix_ void
senf::ppi::connect(connector::GenericPassiveOutputJack & source, T & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source.connector(), target);
}

template <class T>
prefix_ void
senf::ppi::connect(T & source, connector::GenericActiveInputJack & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source, target.connector());
}

template <class T>
prefix_ void
senf::ppi::connect(T & source, connector::GenericPassiveInputJack & target,
                   typename boost::disable_if< boost::is_base_of<connector::Jack, T> >::type *)
{
    connect(source, target.connector());
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
