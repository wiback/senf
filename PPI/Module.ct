// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Module non-inline template implementation  */

#include "Module.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::module::Module

#ifndef DOXYGEN

template <class Source, class Target>
prefix_ senf::ppi::Route<Source, Target> &
senf::ppi::module::Module::route(Source & source, Target & target)
{
    detail::RouteHelper<Source,Target>::route(*this, source, target, source, target);
    return static_cast< Route<Source,Target> & >(
        addRoute(std::auto_ptr< RouteBase >(
                     new Route<Source,Target>(*this, source, target))));
}

#else
prefix_ senf::ppi::Route<connector::InputConnector, connector::OutputConnector> &
senf::ppi::module::Module::route(connector::InputConnector & input,
                                 connector::OutputConnector & output)
{}
prefix_ senf::ppi::Route<connector::InputConnector, EventDescriptor> &
senf::ppi::module::Module::route(connector::InputConnector & input, EventDescriptor & output)
{}
#endif

#ifndef DOXYGEN

template <class Descriptor, class Target>
prefix_ void senf::ppi::module::Module::registerEvent(Descriptor & descriptor, Target target)
{
    eventManager().registerEvent(
        *this,
        EventManager::Callback<Descriptor>::make(target,*this),
        descriptor);
    descriptor.enabled(true);
}

#else
template <class Target>
prefix_ void senf::ppi::module::Module::registerEvent(Target target,
                                                      EventDescriptor & descriptor)
{}
#endif

///////////////////////////////////////////////////////////////////////////
// senf::ppi::module::detail namespace members

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      connector::InputConnector &, connector::OutputConnector &)
{
    module.registerConnector(source);
    module.registerConnector(target);
}

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      connector::InputConnector &, EventDescriptor &)
{
    module.registerConnector(source);
}

template <class Source, class Target>
prefix_ void senf::ppi::module::detail::RouteHelper<Source,Target>::
route(Module & module, Source & source, Target & target,
      EventDescriptor &, connector::OutputConnector &)
{
    module.registerConnector(target);
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
