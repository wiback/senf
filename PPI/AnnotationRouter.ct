// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief AnnotationRouter non-inline template implementation  */

//#include "AnnotationRouter.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

template <class AnnotationType>
prefix_ senf::ppi::module::AnnotationRouter<AnnotationType>::AnnotationRouter()
{
    noroute(input);
    noroute(defaultOutput);
    input.onRequest(&AnnotationRouter::request);
}

template <class AnnotationType>
prefix_ senf::ppi::connector::ActiveOutput<> &
senf::ppi::module::AnnotationRouter<AnnotationType>::newOutput(AnnotationType const & key)
{
    if (outputs_.find(key) != outputs_.end())
        throw DuplicateKeyException(key); 
    // key must not be const ... has something to do with exception guarantees ??
    // From boost 1.34.0 on we can use auto_ptr which we really should for exception safety
    // but this doesn't work with boost 1.33.1 :-(
#if BOOST_VERSION >= 103400
    return *outputs_.insert(key, 
                            std::auto_ptr<connector::ActiveOutput<> >(
                                new connector::ActiveOutput<>())).first->second;
#else
    AnnotationType k (key); 
    return *outputs_.insert(k, new connector::ActiveOutput<>()).first;
#endif
}

template <class AnnotationType>
prefix_ void senf::ppi::module::AnnotationRouter<AnnotationType>::request()
{
    Packet p (input());
    typename Outputs::iterator i (outputs_.find(p.annotation<AnnotationType>()));
    if (i == outputs_.end())
        defaultOutput(p);
    else {
#if BOOST_VERSION >= 103400
        (*i->second)(p);
#else
        (*i)(p);
#endif
    }
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
