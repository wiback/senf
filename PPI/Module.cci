// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Module inline non-template implementation */

// Custom includes
#include "Route.hh"
#include "Connectors.hh"
#include "EventManager.hh"
#include "ModuleManager.hh"

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::module::Module

////////////////////////////////////////
// private members

prefix_ void senf::ppi::module::Module::init()
{
    ConnectorRegistry::iterator i (connectorRegistry_.begin());
    ConnectorRegistry::iterator i_end (connectorRegistry_.end());
    for (; i != i_end; ++i)
        (*i)->init();
    v_init();
}

prefix_ void senf::ppi::module::Module::v_init()
{}

prefix_ senf::ppi::EventManager & senf::ppi::module::Module::eventManager()
    const
{
    return EventManager::instance();
}

prefix_ senf::ppi::ModuleManager & senf::ppi::module::Module::moduleManager()
    const
{
    return ModuleManager::instance();
}

prefix_ void senf::ppi::module::Module::registerConnector(connector::Connector & connector)
{
    connectorRegistry_.push_back(&connector);
    connector.setModule(*this);
}

prefix_ senf::ppi::RouteBase &
senf::ppi::module::Module::addRoute(std::auto_ptr<RouteBase> route)
{
    routes_.push_back(route.release());
    return routes_.back();
}

////////////////////////////////////////
// public members

prefix_ senf::ppi::module::Module::~Module()
{
    moduleManager().unregisterModule(*this);
}

prefix_ senf::ClockService::clock_type senf::ppi::module::Module::time()
    const
{
    return eventManager().time();
}

prefix_ senf::ClockService::clock_type senf::ppi::module::Module::now()
    const
{
    return eventManager().now();
}

////////////////////////////////////////
// protected members

prefix_ senf::ppi::module::Module::Module()
{
    moduleManager().registerModule(*this);
}

prefix_ void senf::ppi::module::Module::noroute(connector::Connector & connector)
{
    registerConnector(connector);
    connector.setModule(*this);
}

prefix_ void senf::ppi::module::Module::destroy()
{
    eventManager().destroyModule(*this);
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
