// $Id$
//
// Copyright (C) 2007
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Joins inline template implementation */

//#include "Joins.ih"

// Custom includes
#include "Setup.hh"

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PassiveJoin

template <class Source>
prefix_ senf::ppi::connector::GenericPassiveInput &
senf::ppi::module::PassiveJoin::connect(Source & source)
{
    connector::GenericPassiveInput & input (newInput());
    ppi::connect(source,input);
    return input;
}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::module::PriorityJoin

template <class Source>
prefix_ senf::ppi::connector::GenericActiveInput &
senf::ppi::module::PriorityJoin::connect(Source & source)
{
    connector::GenericActiveInput & input (newInput());
    ppi::connect(source,input);
    return input;
}

///////////////////////////////////////////////////////////////////////////
// namespace members

#ifndef DOXYGEN

template <class Source>
prefix_ senf::ppi::connector::GenericPassiveInput & senf::ppi::connect(Source & source,
                                                                module::PassiveJoin & target)
{
    return target.connect(source);
}

template <class Source>
prefix_ senf::ppi::connector::GenericActiveInput & senf::ppi::connect(Source & source,
                                                               module::PriorityJoin & target)
{
    return target.connect(source);
}

#endif

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
