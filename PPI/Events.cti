// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Events inline template implementation */

#include "Events.ih"

// Custom includes
#include "detail/EventBinding.hh"

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::EventImplementationHelper<EventType,Self>

////////////////////////////////////////
// protected members

template <class EventType, class Self>
prefix_ void
senf::ppi::EventImplementationHelper<EventType,Self>::callback(EventArg event,
                                                               boost::posix_time::ptime time)
{
    binding().callback(event,time);
}

template <class EventType, class Self>
prefix_ void senf::ppi::EventImplementationHelper<EventType,Self>::callback(EventArg event)
{
    binding().callback(event);
}

////////////////////////////////////////
// private members

template <class EventType, class Self>
prefix_ senf::ppi::detail::EventBinding<EventType> &
senf::ppi::EventImplementationHelper<EventType,Self>::binding()
{
    BOOST_ASSERT( static_cast<Self*>(this)->binding_ );
    return * static_cast<Self*>(this)->binding_;
}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::EventImplementationHelper<void,Self>

////////////////////////////////////////
// protected members

template <class Self>
prefix_ void
senf::ppi::EventImplementationHelper<void,Self>::callback(boost::posix_time::ptime time)
{
    binding().callback(time);
}

template <class Self>
prefix_ void senf::ppi::EventImplementationHelper<void,Self>::callback()
{
    binding().callback();
}

////////////////////////////////////////
// private members

template <class Self>
prefix_ senf::ppi::detail::EventBinding<void> &
senf::ppi::EventImplementationHelper<void,Self>::binding()
{
    BOOST_ASSERT( static_cast<Self*>(this)->binding_ );
    return * static_cast<Self*>(this)->binding_;
}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::EventImplementation<EventType>

////////////////////////////////////////
// protected members

template <class EventType>
prefix_ senf::ppi::EventImplementation<EventType>::EventImplementation()
    : binding_(0)
{}

////////////////////////////////////////
// private members

template <class EventType>
prefix_ bool senf::ppi::EventImplementation<EventType>::v_isRegistered()
{
    return binding_;
}

template <class EventType>
prefix_ void
senf::ppi::EventImplementation<EventType>::setBinding(detail::EventBinding<Event> & binding)
{
    binding_ = & binding;
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
