// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Route inline template implementation */

#include "Route.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::RouteImplementation<Source,Target,srcEvent,trgEvent>

template <class Source, class Target, bool srcEvent, bool trgEvent>
prefix_
senf::ppi::detail::RouteImplementation<Source,Target,srcEvent,trgEvent>::
RouteImplementation(module::Module & module, Source & source, Target & target)
    : NonForwardingRouteImplementation(module, source, target)
{}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::RouteImplementation<Source, Target, true, false>

template <class Source, class Target>
prefix_
senf::ppi::detail::RouteImplementation<Source, Target, true, false>::
RouteImplementation(module::Module & module, Source & source, Target & target)
    : NonForwardingRouteFromEventImplementation(module, source, target)
{}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::RouteImplementation<Source, Target, false, true>

template <class Source, class Target>
prefix_
senf::ppi::detail::RouteImplementation<Source, Target, false, true>::
RouteImplementation(module::Module & module, Source & source, Target & target)
    : NonForwardingRouteToEventImplementation(module, source, target)
{}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::RouteImplementation<connector::ActiveInput, Event, false, true>

template <class Event>
prefix_
senf::ppi::detail::RouteImplementation<senf::ppi::connector::ActiveInput, Event, false, true>::
RouteImplementation(module::Module & module, connector::ActiveInput & source, Event & target)
    : ForwardForwardingRouteToEventImplementation(module, source, target)
{}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::detail::RouteImplementation<Event, connector::ActiveOutput, true, false>

template <class Event>
prefix_
senf::ppi::detail::RouteImplementation<Event, senf::ppi::connector::ActiveOutput, true, false>::
RouteImplementation(module::Module & module, Event & source, connector::ActiveOutput & target)
    : BackwardForwardingRouteFromEventImplementation(module, source, target)
{}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::Route<Source,Target>

////////////////////////////////////////
// protected members

template <class Source, class Target>
prefix_ senf::ppi::Route<Source,Target>::Route(module::Module & module, Source & source,
                                               Target & target)
    : Implementation(module, source, target)
{}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
