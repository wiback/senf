// $Id$
//
// Copyright (C) 2007 
// Fraunhofer Institut fuer offene Kommunikationssysteme (FOKUS)
// Kompetenzzentrum fuer Satelitenkommunikation (SatCom)
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief SocketReader non-inline template implementation  */

//#include "SocketReader.ih"

// Custom includes

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::ppi::PacketReader<Packet>

template <class Packet>
prefix_ Packet senf::ppi::PacketReader<Packet>::operator()(Handle handle)
{
    Packet packet (Packet::create(Packet::noinit));
    handle.read(packet.data(),0u);
    return packet;
}

///////////////////////////////////////////////////////////////////////////
// senf::ppi::module::ActiveSocketReader<Reader>

template <class Reader>
prefix_ senf::ppi::module::ActiveSocketReader<Reader>::
ActiveSocketReader(Handle handle)
    : handle_(handle), event_(handle_, IOEvent::Read), reader_()
{
    registerEvent( &ActiveSocketReader::read, event_ );
    route(event_, output);
}

////////////////////////////////////////
// private members

template <class Reader>
prefix_ void senf::ppi::module::ActiveSocketReader<Reader>::read()
{
    output(reader_(handle_));
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
