// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Node non-inline template implementation  */

//#include "Node.ih"

// Custom includes
#include <boost/range.hpp>

#define prefix_
///////////////////////////////ct.p////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::DirectoryNode

template <class ForwardRange>
prefix_ senf::console::GenericNode &
senf::console::DirectoryNode::traverse(ForwardRange const & range)
{
    typedef typename boost::range_const_iterator<ForwardRange>::type const_iterator;
    DirectoryNode::ptr dir (thisptr());
    const_iterator i (boost::begin(range));
    const_iterator const i_end (boost::end(range));
    if (i != i_end && i->empty()) {
        dir = root().thisptr();
        ++ i;
    }
    while (i != i_end) {
        const_iterator next_i (i);
        ++ next_i;
        if (*i == "..") {
            dir = dir->parent();
            if (! dir)
                dir = root().thisptr();
        }
        else if (! i->empty()  && *i != ".") {
            if (next_i == i_end)
                return dir->get(*i);
            else {
                // Why does g++ give an error on this line ???? :
                // dir = dynamic_cast<DirectoryNode&>( dir->get(*i) ).thisptr();
                DirectoryNode & d (dynamic_cast<DirectoryNode&>( dir->get(*i) ));
                dir = d.thisptr();
            }
        }
        i = next_i;
    }
    return *dir;
}

///////////////////////////////ct.e////////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
