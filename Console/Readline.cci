// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Readline inline non-template implementation */

//#include "Readline.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ReadlineClientReader

prefix_ bool senf::console::detail::ReadlineClientReader::active()
{
    return instance_ != 0;
}

prefix_ senf::console::detail::ReadlineClientReader &
senf::console::detail::ReadlineClientReader::instance()
{
    return *instance_;
}

prefix_ int senf::console::detail::ReadlineClientReader::getc()
{
    char ch (ch_);
    ch_ = -1;
    return ch;
}

prefix_ void senf::console::detail::ReadlineClientReader::write(std::string text)
{
    translate(text);
    handle().write(text);
}

prefix_ void senf::console::detail::ReadlineClientReader::terminate()
{
    terminate_ = true;
}

prefix_ void senf::console::detail::ReadlineClientReader::eof()
{
    stream() << '\n' << std::flush;
    stopClient();
}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::SafeReadlineClientReader

prefix_
senf::console::detail::SafeReadlineClientReader::SafeReadlineClientReader(Client & client)
    : ClientReader (client),
      reader_ ( ReadlineClientReader::active() 
                ? static_cast<ClientReader*>(new DumbClientReader(client))
                : static_cast<ClientReader*>(new ReadlineClientReader(client)) )
{}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
