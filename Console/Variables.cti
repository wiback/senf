// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Variables inline template implementation */

#include "Variables.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::QueryVariable<Variable>

template <class Variable>
prefix_ senf::console::detail::QueryVariable<Variable>::QueryVariable(Variable const & var)
    : var_ (var)
{}

template <class Variable>
prefix_ Variable const & senf::console::detail::QueryVariable<Variable>::operator()()
    const
{
    return var_;
}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::SetVariable<Variable>

template <class Variable>
prefix_ senf::console::detail::SetVariable<Variable>::SetVariable(Variable & var)
    : var_ (var)
{}

template <class Variable>
prefix_ void senf::console::detail::SetVariable<Variable>::operator()(Variable const & value)
    const
{
    if (handler_) {
        Variable old (var_);
        var_ = value;
        handler_(old);
    }
    else
        var_ = value;
}

template <class Variable>
prefix_ void senf::console::detail::SetVariable<Variable>::onChange(OnChangeHandler handler)
{
    handler_ = handler;
}

///////////////////////////////////////////////////////////////////////////
// senf::console::VariableAttributor<Variable>

template <class Variable>
prefix_
senf::console::VariableAttributor<Variable>::VariableAttributor(QueryOverload & queryOverload,
                                                                SetOverload & setOverload)
    : queryOverload_ (queryOverload), setOverload_ (setOverload)
{}

///////////////////////////////////////////////////////////////////////////

template <class Variable>
prefix_ senf::console::VariableAttributor<Variable>
senf::console::senf_console_add_node(DirectoryNode & node, std::string const & name,
                                     Variable * var, int)
{
    typename VariableAttributor<Variable>::SetOverload & setOverload ( 
        node.add(name, typename detail::SetVariable<Variable>::Function(
                     detail::SetVariable<Variable>(*var))).overload() );
    typename VariableAttributor<Variable>::QueryOverload & queryOverload ( 
        node.add(name, typename detail::QueryVariable<Variable>::Function(
                     detail::QueryVariable<Variable>(*var))).overload() );

    return VariableAttributor<Variable>(queryOverload, setOverload);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
