// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ScopedDirectory inline non-template implementation */

//#include "ScopedDirectory.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cci.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::ScopedDirectoryBase

prefix_ senf::console::DirectoryNode & senf::console::ScopedDirectoryBase::node()
    const
{
    return *node_;
}

prefix_ senf::console::GenericNode::ptr
senf::console::ScopedDirectoryBase::remove(std::string const & name)
{
   return node().remove(name);
}

prefix_ senf::console::DirectoryNode &
senf::console::ScopedDirectoryBase::operator[](std::string const & name)
    const
{
    return node()[name];
}

prefix_ senf::console::CommandNode &
senf::console::ScopedDirectoryBase::operator()(std::string const & name)
    const
{
    return node()(name);
}

prefix_ senf::console::GenericNode &
senf::console::ScopedDirectoryBase::get(std::string const & name)
    const
{
    return node().get(name);
}

prefix_ senf::console::DirectoryNode &
senf::console::ScopedDirectoryBase::mkdir(std::string const & name)
{
    return node().mkdir(name);
}

prefix_ senf::console::DirectoryNode::ChildrenRange
senf::console::ScopedDirectoryBase::children()
    const
{
    return node().children();
}

prefix_ senf::console::DirectoryNode &
senf::console::ScopedDirectoryBase::doc(std::string const & doc)
{
    return node().doc(doc);
}

prefix_ senf::console::ScopedDirectoryBase::ScopedDirectoryBase()
    : node_ (DirectoryNode::create())
{}

prefix_ senf::console::ScopedDirectoryBase::~ScopedDirectoryBase()
{
    node_->unlink();
}

///////////////////////////////cci.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
