// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief Node inline template implementation */

//#include "Node.ih"

// Custom includes

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::NodeCreateTraits<Object>::Creator

template <class Object>
prefix_ typename senf::console::NodeCreateTraits<Object>::result_type
senf::console::NodeCreateTraits<Object>::Creator::create(DirectoryNode & node,
                                                         std::string const & name,
                                                         Object const & ob)
{
    return senf_console_add_node(node, name, ob, 0);
}

///////////////////////////////////////////////////////////////////////////
// senf::console::DirectoryNode

template <class NodeType>
prefix_ NodeType & senf::console::DirectoryNode::add(std::string const & name,
                                                     boost::shared_ptr<NodeType> node)
{
    SENF_ASSERT( ! node->parent() );
    node->name(name);
    add(node);
    return *node;
}

template <class Object>
prefix_ typename senf::console::NodeCreateTraits<Object>::result_type
senf::console::DirectoryNode::add(std::string const & name, Object const & ob)
{
    return NodeCreateTraits<Object>::Creator::create(*this, name, ob);
}

///////////////////////////////////////////////////////////////////////////
// senf::console::SimpleCommandNode

template <class Function>
prefix_ senf::console::SimpleCommandNode & senf::console::
senf_console_add_node(DirectoryNode & node, std::string const & name, Function const & fn, ...)
{
    return node.add(name, SimpleCommandNode::create(fn));
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
