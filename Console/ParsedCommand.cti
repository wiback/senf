// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParsedCommand inline template implementation */

#include "ParsedCommand.ih"

// Custom includes
#include "../Utils/membind.hh"
#include <boost/format.hpp>
#include "../Utils/parameter.hh"

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ArgumentInfoBase

prefix_ senf::console::detail::ArgumentInfoBase::ArgumentInfoBase(std::string const & type_)
    : type (type_), name (), hasDefault (false)
{}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ArgumentInfo<ParameterType>

template <class ParameterType>
prefix_ typename senf::console::detail::ArgumentInfo<ParameterType>::ptr
senf::console::detail::ArgumentInfo<ParameterType>::create()
{
    return ptr(new ArgumentInfo());
}

template <class ParameterType>
prefix_ senf::console::detail::ArgumentInfo<ParameterType>::ArgumentInfo()
    : ArgumentInfoBase ( ArgumentTraits<ParameterType>::description() ),
      defaultValue ()
{}

template <class ParameterType>
prefix_ std::string senf::console::detail::ArgumentInfo<ParameterType>::defaultValueStr()
    const
{
    return hasDefault ? ArgumentTraits<ParameterType>::str(defaultValue) : "";
}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandOverloadBase

template <class Type>
prefix_ senf::console::detail::ArgumentInfo<Type> &
senf::console::ParsedCommandOverloadBase::arg(unsigned n)
    const
{
    return dynamic_cast<detail::ArgumentInfo<Type> &>(arg(n));
}

template <class Type>
prefix_ void senf::console::ParsedCommandOverloadBase::addParameter()
{
    parameters_.push_back(detail::ArgumentInfo<Type>::create());
}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandOverload<FunctionTraits,n>

#define BOOST_PP_ITERATION_PARAMS_1 (4, (0, SENF_CONSOLE_MAX_COMMAND_ARITY,                       \
                                         SENF_ABSOLUTE_INCLUDE_PATH(Console/ParsedCommand.mpp),   \
                                         2))
#include BOOST_PP_ITERATE()

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandAttributorBase

template <class Type>
prefix_ void senf::console::ParsedCommandAttributorBase::defaultValue(Type const & value)
    const
{
    overload().arg<Type>(index_).defaultValue = value;
    overload().arg(index_).hasDefault = true;
}

template <class Type, class Fn>
prefix_ void senf::console::ParsedCommandAttributorBase::parser(Fn fn)
    const
{
    overload().arg<Type>(index_).parser = fn;
}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedCommandAttributor<Overload>

template <class Overload>
prefix_ Overload & senf::console::ParsedCommandAttributor<Overload>::overload()
    const
{
    return static_cast<Overload &>(ParsedCommandAttributorBase::overload());
}

template <class Overload>
prefix_
senf::console::ParsedCommandAttributor<Overload>::ParsedCommandAttributor(Overload & overload,
                                                                          unsigned index)
    : ParsedCommandAttributorBase (overload, index)
{}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedArgumentAttributorBase<Overload,Self>

template <class Overload, class Self>
prefix_ Self
senf::console::ParsedArgumentAttributorBase<Overload,Self>::doc(std::string const & doc)
    const
{
    this->ParsedCommandAttributorBase::nodeDoc(doc);
    return static_cast<Self const &>(*this);
}

template <class Overload, class Self>
prefix_ Self senf::console::ParsedArgumentAttributorBase<Overload,Self>::
overloadDoc(std::string const & doc)
    const
{
    this->ParsedCommandAttributorBase::overloadDoc(doc);
    return static_cast<Self const &>(*this);
}

template <class Overload, class Self>
prefix_
senf::console::ParsedArgumentAttributorBase<Overload,Self>::
ParsedArgumentAttributorBase(Overload & overload, unsigned index)
    : ParsedCommandAttributor<Overload> (overload, index)
{}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedArgumentAttributor<Overload,index,flag>

template <class Overload, unsigned index, bool flag>
prefix_ typename senf::console::ParsedArgumentAttributor<Overload,index,flag>::next_type
senf::console::ParsedArgumentAttributor<Overload,index,flag>::arg()
    const
{
    return next();
}

template <class Overload, unsigned index, bool flag>
template <class ArgumentPack>
prefix_ typename senf::console::ParsedArgumentAttributor<Overload,index,flag>::next_type
senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(ArgumentPack const & args)
    const
{
#   define ProcessArg(tag) \
        argInfo( kw:: tag, args, senf::has_parameter< ArgumentPack, kw::type:: tag >() )

    ProcessArg(name);
    ProcessArg(description);
    ProcessArg(default_value);
    ProcessArg(type_name);
    ProcessArg(default_doc);
    ProcessArg(parser);

    return next();

#   undef HaveArg
}

template <class Overload, unsigned index, bool flag>
template <class Kw, class ArgumentPack>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(Kw const &, ArgumentPack const &, boost::mpl::false_)
    const
{}

template <class Overload, unsigned index, bool flag>
template <class ArgumentPack>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(boost::parameter::keyword<kw::type::name> const &, ArgumentPack const & args,
        boost::mpl::true_)
    const
{
    this->argName(args[kw::name]);
}

template <class Overload, unsigned index, bool flag>
template <class ArgumentPack>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(boost::parameter::keyword<kw::type::description> const &, ArgumentPack const & args,
        boost::mpl::true_)
    const
{
    this->argDoc(args[kw::description]);
}

template <class Overload, unsigned index, bool flag>
template <class ArgumentPack>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(boost::parameter::keyword<kw::type::default_value> const &, ArgumentPack const & args,
        boost::mpl::true_)
    const
{
    this->defaultValue(args[kw::default_value]);
}

template <class Overload, unsigned index, bool flag>
template <class ArgumentPack>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(boost::parameter::keyword<kw::type::type_name> const &, ArgumentPack const & args,
        boost::mpl::true_)
    const
{
    this->typeName(args[kw::type_name]);
}

template <class Overload, unsigned index, bool flag>
template <class ArgumentPack>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(boost::parameter::keyword<kw::type::default_doc> const &, ArgumentPack const & args,
        boost::mpl::true_)
    const
{
    BOOST_STATIC_ASSERT(( senf::has_parameter<ArgumentPack, kw::type::default_value>::value ));
    this->defaultDoc(args[kw::default_doc]);
}

template <class Overload, unsigned index, bool flag>
template <class ArgumentPack>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
argInfo(boost::parameter::keyword<kw::type::parser> const &, ArgumentPack const & args,
        boost::mpl::true_)
    const
{
    this->parser(args[kw::parser]);
}

template <class Overload, unsigned index, bool flag>
prefix_
senf::console::ParsedArgumentAttributor<Overload,index,flag>::
ParsedArgumentAttributor(Overload & overload)
    : ParsedArgumentAttributorBase<Overload, ParsedArgumentAttributor> (overload, index)
{}

template <class Overload, unsigned index, bool flag>
prefix_ typename senf::console::ParsedArgumentAttributor<Overload,index,flag>::next_type
senf::console::ParsedArgumentAttributor<Overload,index,flag>::next()
    const
{
    return ParsedArgumentAttributor<Overload, index+1>(this->overload());
}

template <class Overload, unsigned index, bool flag>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::
defaultValue(value_type const & value)
    const
{
    ParsedCommandAttributorBase::defaultValue<value_type>(value);
}

template <class Overload, unsigned index, bool flag>
template <class Fn>
prefix_ void senf::console::ParsedArgumentAttributor<Overload,index,flag>::parser(Fn fn)
    const
{
    ParsedCommandAttributorBase::parser<value_type>(fn);
}

///////////////////////////////////////////////////////////////////////////
// senf::console::ParsedArgumentAttributor<Overload, index, false>

template <class Overload, unsigned index>
prefix_
senf::console::ParsedArgumentAttributor<Overload, index, false>::
ParsedArgumentAttributor(Overload & overload)
    : ParsedArgumentAttributorBase< Overload, 
                                     ParsedArgumentAttributor<Overload, index, false> > (overload, index)
{}

///////////////////////////////////////////////////////////////////////////
// namespace members

namespace {

    // What is THIS about ??

    // Ok, here's the dope: parsed commands may optionally have an std::ostream & first argument. If
    // this argument is given, then the function will be called with the console output stream as
    // it's first argument.
    //
    // This is implemented in the following way: ParsedCommandOverload (the class responsible for
    // calling the callback) will ALWAYS pass the stream as first argument. If the user callback
    // expects os as it's first argument, 'ignoreOneArg' will be false and the user supplied
    // function will be directly passed to ParsedCommandOverload.
    //
    // If however, it does NOT take an std::ostream first argument, 'ignoreOneArg' will be true and
    // the create member will use boost::bind to DROP the first argument.
    
    template <class Traits, bool ignoreOneArg, unsigned arity=Traits::arity>
    struct CreateParsedCommandOverload
    {};

    template <class Traits, unsigned arity>
    struct CreateParsedCommandOverload<Traits, false, arity>
    {
        typedef Traits traits;
        
        template <class Function>
        static typename senf::console::ParsedCommandOverload<traits>::ptr create(Function fn) 
            { return senf::console::ParsedCommandOverload<traits>::create(fn); };
    };

#   define BOOST_PP_ITERATION_PARAMS_1 (4, (0, SENF_CONSOLE_MAX_COMMAND_ARITY,                     \
                                            SENF_ABSOLUTE_INCLUDE_PATH(Console/ParsedCommand.mpp), \
                                            4))
#   include BOOST_PP_ITERATE()

}

template <class Function>
prefix_ senf::console::ParsedArgumentAttributor<
    senf::console::ParsedCommandOverload<
        typename senf::console::detail::ParsedCommandTraits<Function>::traits> >
senf::console::senf_console_add_node(DirectoryNode & node, std::string const & name,
                                     Function fn, int)
{
    OverloadedCommandNode & cmdNode (
        node.hasChild(name) 
        ? dynamic_cast<OverloadedCommandNode &>(node(name))
        : node.add(name, OverloadedCommandNode::create()) );

    typedef detail::ParsedCommandTraits<Function> CmdTraits;
    typedef ParsedCommandOverload<typename CmdTraits::traits> Overload;
    typedef ParsedArgumentAttributor<Overload> Attributor;

    return Attributor(
        cmdNode.add( CreateParsedCommandOverload<
                         typename CmdTraits::traits, ! CmdTraits::has_ostream_arg>::create(fn) ) );
}

template <class Owner, class Function>
prefix_ senf::console::ParsedArgumentAttributor<
    senf::console::ParsedCommandOverload<
        typename senf::console::detail::ParsedCommandTraits<Function>::traits> >
senf::console::
senf_console_add_node(DirectoryNode & node, Owner & owner, std::string const & name,
                      Function fn, int,
                      typename boost::enable_if_c<detail::ParsedCommandTraits<Function>::is_member>::type *)
{
    OverloadedCommandNode & cmdNode (
        node.hasChild(name) 
        ? dynamic_cast<OverloadedCommandNode &>(node(name))
        : node.add(name, OverloadedCommandNode::create()) );

    typedef detail::ParsedCommandTraits<Function> CmdTraits;
    typedef ParsedCommandOverload<typename CmdTraits::traits> Overload;
    typedef ParsedArgumentAttributor<Overload> Attributor;

    return Attributor(
        cmdNode.add( CreateParsedCommandOverload<
                         typename CmdTraits::traits, ! CmdTraits::has_ostream_arg>::create(
                             senf::membind(fn,&owner)) ) );
}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::CheckVoidReturn<Type>

template <class Type>
template <class Fn>
prefix_ void senf::console::detail::CheckVoidReturn<Type>::call(Fn fn, std::ostream & os)
{
    ReturnValueTraits<Type>::format(fn(),os);
    os << "\n";
}

template <class Fn>
prefix_ void senf::console::detail::CheckVoidReturn<void>::call(Fn fn, std::ostream & os)
{
    fn();
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
