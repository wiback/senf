// $Id$
//
// Copyright (C) 2008 
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \file
    \brief ParseParameter inline template implementation */

//#include "ParseParameter.ih"

// Custom includes
#include "../Utils/TypeInfo.hh"

#define prefix_ inline
///////////////////////////////cti.p///////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ParameterInfoBase

prefix_ senf::console::detail::ParameterInfoBase::ParameterInfoBase(std::string const & type_)
    : type (type_), name (), hasDefault (false)
{}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ParameterInfo<ParameterType>

template <class ParameterType>
prefix_ typename senf::console::detail::ParameterInfo<ParameterType>::ptr
senf::console::detail::ParameterInfo<ParameterType>::create()
{
    return ptr(new ParameterInfo());
}

template <class ParameterType>
prefix_ senf::console::detail::ParameterInfo<ParameterType>::ParameterInfo()
    : ParameterInfoBase ( ParameterTraits<ParameterType>::typeDescription() ),
      defaultValue ()
{}

template <class ParameterType>
prefix_ std::string senf::console::detail::ParameterInfo<ParameterType>::defaultValueStr()
    const
{
    return hasDefault ? ParameterTraits<ParameterType>::dump(defaultValue) : "";
}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ReturnValueTraits<Type>

template <class Type>
template <class Fn>
prefix_ void senf::console::detail::ReturnValueTraits<Type>::callAndWrite(Fn const & fn,
                                                                          std::ostream & os)
{
    os << fn() << "\n";
}

template <class Fn>
prefix_ void senf::console::detail::ReturnValueTraits<void>::callAndWrite(Fn const & fn,
                                                                          std::ostream & os)
{
    fn();
}

///////////////////////////////////////////////////////////////////////////
// senf::console::detail::ParameterTraits<Type>

template <class Type>
prefix_ void senf::console::detail::ParameterTraits<Type>::
parse(ParseCommandInfo::TokensRange const & tokens, Type & out)
{
    if (tokens.size() != 1)
        throw SyntaxErrorException("parameter syntax error");
    try {
        out = boost::lexical_cast<Type>(tokens.begin()[0].value());
    }
    catch (std::bad_cast & ex) {
        throw SyntaxErrorException("parameter syntax error");
    }
}

template <class Type>
prefix_ std::string senf::console::detail::ParameterTraits<Type>::typeDescription()
{
    std::string type (prettyName(typeid(Type)));
    std::string::size_type i (type.rfind(':'));
    return i == std::string::npos ? type : type.substr(i+1);
}

template <class Type>
prefix_ std::string senf::console::detail::ParameterTraits<Type>::dump(Type const & value)
{
    return boost::lexical_cast<std::string>(value);
}

///////////////////////////////cti.e///////////////////////////////////////
#undef prefix_


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// End:
