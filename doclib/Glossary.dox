//
// Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
//                    Network Research Group (NET)
//                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
//                    Contact: support@wiback.org
//
// This file is part of the SENF code tree.
// It is licensed under the 3-clause BSD License (aka New BSD License).
// See LICENSE.txt in the top level directory for details or visit
// https://opensource.org/licenses/BSD-3-Clause
//


/** \page glossary Glossary

    <table class="glossary">

    <tr><td>collection parser</td> <td>libPackets</td> <td>A packet parser which allows to repeat
    another parser or which uses some additional information to decide on the type or number of
    sub-parsers.</td></tr>

    <tr><td>complete policy</td> <td>libSocket</td> <td>socket policy where each axis is specified
    completely</td></tr>

    <tr><td>composite parser</td> <td>libPackets</td> <td>A packet parser providing access to named
    sub-fields which are parsers themselves.</td></tr>

    <tr><td>incomplete policy</td> <td>libSocket</td> <td>socket policy, where at least one axis is
    not fully specified</td></tr>

    <tr><td>packet interpreter</td> <td>libPackets</td> <td>Internal datastructure which represents
    one protocol or header in the chain of interpreters representing a complete packet</td></tr>

    <tr><td>packet parser</td> <td>libPackets</td> <td>lightweight class to convert between byte
    representation and interpreted value. Derived from senf::PacketParserBase</td></tr>

    <tr><td>policy axis</td> <td>libSocket</td> <td>one aspect defined in the socket policy, typedef
    and member of the senf::SocketPolicy template</td></tr>

    <tr><td>policy class</td> <td>libSocket</td> <td>implementation of a single policy axis, class
    derived from the axis base class</td></tr>

    <tr><td>policy interface</td> <td>libSocket</td> <td>interface directly provided by
    senf::ClientSocketHandle/senf::ServerSocketHandle and defined through the policy</td>

    <tr><td>policy</td> <td>libSocket</td> <td>collection of policy classes, one for each policy
    axis, instantiation of the SocketPolicy template</td></tr>

    <tr><td>protocol class</td> <td>libSocket</td> <td>definition of a protocol as a class, class
    inheriting from senf::ConcreteSocketProtocol.</td></tr>

    <tr><td>protocol facet</td> <td>libSocket</td> <td>a class providing some subset of the protocol
    interface, class derived from senf:;SocketProtocol but not from
    senf::ConcreteSocketProtocol</td></tr>

    <tr><td>protocol interface</td> <td>libSocket</td> <td>interface provided by the protocol class
    and accessible via the
    senf::ProtocolClientSocketHandle::protocol()/senf::ProtocolServerSocketHandle::protocol()
    member</td></tr>

    <tr><td>protocol parser</td> <td>libPackets</td> <td>A composite parser which defines a network
    protocol.</td></tr>

    <tr><td>socket policy</td> <td>libSocket</td> <td>another name for 'policy'</td></tr>

    <tr><td>value parser</td> <td>libPackets</td> <td>A packet parser which parses a simple value
    like a number or network address.</td></tr>

    </table>
 */


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u doc"
// mode: flyspell
// mode: auto-fill
// End:
