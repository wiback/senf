#
# Copyright (c) 2020 Fraunhofer Institute for Applied Information Technology (FIT)
#                    Network Research Group (NET)
#                    Schloss Birlinghoven, 53754 Sankt Augustin, GERMANY
#                    Contact: support@wiback.org
#
# This file is part of the SENF code tree.
# It is licensed under the 3-clause BSD License (aka New BSD License).
# See LICENSE.txt in the top level directory for details or visit
# https://opensource.org/licenses/BSD-3-Clause
#


Import('env')
import SENFSCons, datetime, os

###########################################################################

import yaptu

def modules():
    # Naja ... etwas rumgehackt aber was solls ...
    global EXTRA_MODULES
    mods = {}
    pathbase = env.Dir('#/senf').abspath
    pathbasel = len(pathbase)+1
    for module in env.Alias('all_docs')[0].sources:
        if module.name != 'html.stamp' : continue
        if not module.dir.dir.dir.abspath.startswith(pathbase): continue
        mods[module.dir.dir.dir.abspath] = [ module.dir.dir.dir.abspath[pathbasel:].replace('/','_'),
                                             module.dir.dir.dir.name,
                                             module.dir.abspath[pathbasel:],
                                             0 ]

    rv = []
    keys = mods.keys()
    keys.sort()
    for mod in keys:
        i = 0
        while i < len(rv):
            if len(rv[i]) > pathbasel and mod.startswith(rv[i] + '/'):
                level = mods[rv[i]][-1] + 1
                i += 1
                while i < len(rv) and mods[rv[i]][2] >= level:
                    i += 1
                rv[i:i] = [ mod ]
                mods[mod][-1] = level
                break
            i += 1
        if i == len(rv):
            rv.append(mod)

    return ( tuple(mods[mod]) for mod in rv )

def indices():
    ix = len(env.Dir('#').abspath)+1
    return [ doc.dir.abspath[ix:]
             for doc in env.Alias('all_docs')[0].sources
             if doc.name == "search.idx" ]

def writeTemplate(target = None, source = None, env = None):
    file(target[0].abspath,"w").write(processTemplate(env))

def processTemplate(env):
    return yaptu.process(str(env['TEMPLATE']), globals(), env.Dictionary())

writeTemplate = env.Action(writeTemplate, varlist = [ 'TEMPLATE' ])

###########################################################################

HEADER = """<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>$title</title>
<link href="@TOPDIR@/doc/html/doxygen.css" rel="stylesheet" type="text/css">
<link href="@TOPDIR@/doclib/senf.css" rel="stylesheet" type="text/css">
<link rel="shortcut icon" href="@TOPDIR@/doclib/favicon.ico">
<style type="text/css">
div.tabs li.$projectname a { background-color: #EDE497; }
</style>
</head>
<body>

<div id="head">
  <div id="title">
    <div id="title2">
      <div id="search">
        <form action="@TOPDIR@/doclib/search.php" method="get">
          Search: <input type="text" name="query" size="20" accesskey="s"/>
        </form>
      </div>
      <h1>SENF Extensible Network Framework</h1>
    </div>
  </div>
  <div id="subtitle">
    <ul>
      <li><a href="@TOPDIR@/doc/html/index.html">Home</a></li>
<!--
      <li><a class="ext" href="http://satext.fokus.fraunhofer.de/senf/debian">Download</a></li>
      <li><a class="ext" href="http://openfacts2.berlios.de/wikien/index.php/BerliosProject:SENF_Network_Framework">Wiki</a></li>
      <li><a class="ext" href="http://developer.berlios.de/projects/senf">BerliOS</a></li>

      <li><a class="ext" href="https://senf.fokus.fraunhofer.de/wsvn/log.php">ChangeLog</a></li>
      <li><a class="ext" href="https://senf.fokus.fraunhofer.de/wsvn/listing.php?path=%2Ftrunk%2F&">Browse SVN</a></li>
  
      <li><a class="ext" href="http://developer.berlios.de/bugs/?group_id=7489">Bug Tracker</a></li>
-->
    </ul>
  </div>
</div>

<div id="content1">
  <div id="content2">
    <div class="tabs menu">
      <li class="Overview level0"><a href="@TOPDIR@/doc/html/index.html">Overview</a></li>
      <li class="Examples level0"><a href="@TOPDIR@/Examples/doc/html/index.html">Examples</a></li>
      <li class="HowTos level0"><a href="@TOPDIR@/HowTos/doc/html/index.html">HowTos</a></li>
      <li class="glossary level0"><a href="@TOPDIR@/doc/html/glossary.html">Glossary</a></li>
    </div>
    <div class="tabs menu">
      <ul>
{{      for id, name, path, level in modules():
          <li class="${id} level${level}"><a href="@TOPDIR@/senf/${path}/index.html">${name}</a></li>
}}
      </ul>
    </div>"""

FOOTER = """<hr style="width:0px;border:none;clear:both;margin:0;padding:0" />
  </div>
</div>
<div id="footer">
  <span>
    <a href="mailto:senf@">Contact: senf@wiback.org</a> |
    &copy; 2009-2015 Fraunhofer Institute for Open Communication Systems (FOKUS), St. Augustin, GERMANY
    &copy; 2016-2019 Fraunhofer Institute for Applied Information Technology (FIT), St. Augustin, GERMANY
  </span>
</div>
</body></html>"""

SEARCH_PHP="""
<?php include 'search_functions.php'; ?>
<?php search(); ?>"""

SEARCH_PATHS_PHP="""<?php
function paths() {
  return array(
{{  for index in indices():
      "../${index}/",
}}
  );
}
?>"""

env.SetDefault(
    DOXYGEN = "doxygen"
)

env.Append( ENV = {
    'TODAY' : str(datetime.date.today()),
})

env.PhonyTarget('linklint', [], [
    'rm -rf doc/linklint',
    'linklint -doc doc/linklint -limit 99999999 `find -type d -name html -printf "/%P/@ "`',
])

env.PhonyTarget('fixlinks', [], [
    'python doclib/fix-links.py -v -s .svn -s linklint -s debian -s doclib -s search',
])

header = env.Command('doxy-header.html', 'SConscript', writeTemplate,
                     TEMPLATE = Literal(HEADER),
                     TITLE = "Documentation and API reference")
env.Depends(header, env.Value(repr(list(modules()))))

footer = env.Command('doxy-footer.html', 'SConscript', writeTemplate,
                     TEMPLATE = Literal(FOOTER))

env.Alias('all_docs',
          env.Command('search.php', [ '#/site_scons/lib/html-munge.xsl', 'SConscript' ],
                      [ writeTemplate,
                        'xsltproc --nonet --html --stringparam topdir .. -o - $SOURCE $TARGET 2>/dev/null'
                            + "| sed"
                            +   r" -e 's/\[\[/<?/g' -e 's/\]\]/?>/g'"
                            +   r" -e 's/\$$projectname/Overview/g'"
                            +   r" -e 's/\$$title/Search results/g'"
                            +       "> ${TARGETS[0]}.tmp",
                        'mv ${TARGET}.tmp ${TARGET}' ],
                      TEMPLATE = Literal(HEADER
                                         + SEARCH_PHP.replace('<?','[[').replace('?>',']]')
                                         + FOOTER),
                      TITLE = "Search results"))
env.Alias('all_docs',
          env.Command('search_paths.php', 'SConscript', writeTemplate,
                      TEMPLATE = Literal(SEARCH_PATHS_PHP)))

env.Alias('install_all',
          env.Install( '$DOCINSTALLDIR/doclib', [ 'favicon.ico',
                                                  'logo-head.png',
                                                  'search.php',
                                                  'search_functions.php',
                                                  'search_paths.php',
                                                  'senf.css' ] ))

env.Clean('all', 'doxy-header.html') # I should not need this but I do ...
env.Clean('all_docs', 'doxy-header.html') # I should not need this but I do ...

env.Install('${DOCINSTALLDIR}', 'index.html')

env.Depends(SENFSCons.Doxygen(env, output_directory="../doc"), env.Value(env['ENV']['REVISION']))
