// $Id$
//
// Copyright (C) 2008
// Fraunhofer Institute for Open Communication Systems (FOKUS)
// Competence Center NETwork research (NET), St. Augustin, GERMANY
//     Stefan Bund <g0dil@berlios.de>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

/** \mainpage UDP Client/Server example application

    \dontinclude udpServer.cc

    This Application is a command line based client/server application, which sends some strings
    from client to server, where they are printed on the command line.

    After installing the Library, the udpServer and the udpClient can be found in the
    senf/Example/udpServer directory and compiled with

    <pre>
    # scons -u
    </pre>

    Now you can start the application with
    <pre>
    # ./udpServer
    # ./udpClient
    </pre>

    \section UDPserverApplication UDP server application

    We take a look to the code starting with the Server: The file starts out including the necessary
    header files:

    \skip // Custom includes
    \until membind

    The Scheduler will be needed because we implement a non blocking UDP Server with the %senf
    integrated Scheduler. The  scheduler library provides a simple yet flexible abstraction of
    the standard asynchronous UNIX mainloop utilizing \c select or \c poll.

    First we define a class which is responsible for opening a socket and print out the incoming
    data on stdout. We create a \c ::UDPv4ClientSocketHandle, which is an unconnected and
    uninitialized UDP (IPv4) socket.

    \until serverSock;

    The name \e client socket handle is a bit misleading: The handle is a \e client and not a \e
    server socket handle since it implements the ordinary (client) socket API and not the connection
    oriented (e.g. TCP accept) server socket API. Since UDP is not connection oriented, there exists
    no \c UDPv4ServerSocketHandle.

    \until {}

    The constructor initialize the Server Object with a given address and port. In our case the
    server configuration is static: The server listens on the loopback device on port 4243. We
    instantiate and configure a senf::scheduler::FdEvent instance to call Server::readFromClient
    whenever data is available on the handle.

    \until }

    The public \c run() member is called to run the sniffer. It enables the event callback and
    enters the scheduler main-loop.

    \until event)

    This member function is called by the %scheduler whenever new data is available. The scheduler
    passes in an event-mask of the event(s) triggering the call.

    \until };

    In the function the data from the socket is put into a standard string and dumped out on stdout.

    \until return 0;
    \until }

    In the main function we need to create an Object of our Server with the loopback address and the
    port.

    That's it. We finish of by catching the exception and giving as much %detail as possible if an
    exception is caught. The \c prettyName function from the \c Utils library is used, to get a
    nice, printable representation of the dynamic type of the exception instance. It is an interface
    to the g++ de-mangler. This is necessary since the name member of the C++ \c type_info instance
    is a mangled name in g++.

    \section UDPclientApplication UDP client application

    \dontinclude udpClient.cc

    The client application uses the same mechanisms but implements them in a small main function.
    It sends numbers as strings to the server.

    \skip  argv[])
    \until return 0;
    \until }

    First a \c senf::::UDPv4ClientSocketHandle is created. With
    <tt>writeto(senf::INet4SocketAddress, string)</tt> the string \c s will be written to the
    specified address and port, which is constructed here from a static string read from the command
    line with the syntax \c IP:PORT. In this example Integers from zero to ten are send to the
    Server socket.
*/


// Local Variables:
// mode: c++
// fill-column: 100
// comment-column: 40
// c-file-style: "senf"
// indent-tabs-mode: nil
// ispell-local-dictionary: "american"
// compile-command: "scons -u test"
// mode: flyspell
// mode: auto-fill
// End:
